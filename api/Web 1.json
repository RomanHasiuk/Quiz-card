[
  {
    "id": "web_001",
    "topic": "Web",
    "mainQuestion": "У чому різниця між відносним та абсолютним шляхом?",
    "mainAnswer": "**Абсолютний шлях** – це повний шлях до файлу або ресурсу, починаючи від кореня файлової системи або домену (наприклад, `https://example.com/images/logo.png` або `/home/user/documents/file.txt`). **Відносний шлях** – це шлях до файлу або ресурсу відносно поточного місцезнаходження або поточного документа (наприклад, `../images/logo.png` або `css/style.css`).",
    "additionalQuestions": [
      {
        "id": "web_001_1",
        "question": "Коли варто використовувати абсолютний шлях?",
        "answer": "Абсолютні шляхи ідеально підходять, коли вам потрібно вказати точне місце розташування ресурсу, незалежно від того, де знаходиться поточний файл, наприклад, для зовнішніх ресурсів або кореневих посилань."
      },
      {
        "id": "web_001_2",
        "question": "Коли доцільніше використовувати відносний шлях?",
        "answer": "Відносні шляхи краще використовувати для внутрішніх посилань у межах одного проєкту, оскільки вони роблять код більш портативним та не залежать від зміни домену або кореневої директорії."
      },
      {
        "id": "web_001_3",
        "question": "Як `.` та `..` використовуються у відносних шляхах?",
        "answer": "`./` позначає поточний каталог, а `../` позначає батьківський каталог (на один рівень вище)."
      }
    ]
  },
  {
    "id": "web_002",
    "topic": "Web",
    "mainQuestion": "Що таке скрінрідери?",
    "mainAnswer": "**Скрінрідери** (screen readers) – це програмне забезпечення, яке допомагає людям з вадами зору (та іншими інвалідностями) взаємодіяти з цифровим контентом. Вони перетворюють текстову та графічну інформацію, що відображається на екрані, у синтезовану мову або шрифт Брайля, дозволяючи користувачам 'чути' або 'читати' вміст інтерфейсу.",
    "additionalQuestions": [
      {
        "id": "web_002_1",
        "question": "Як скрінрідери взаємодіють з веб-сторінками?",
        "answer": "Вони використовують доступне дерево (accessibility tree), яке формується браузером на основі DOM та ARIA-атрибутів, щоб представити структуру та семантику сторінки користувачу."
      },
      {
        "id": "web_002_2",
        "question": "Які елементи веб-сторінки особливо важливі для скрінрідерів?",
        "answer": "Важливі елементи включають семантичні HTML5-теги (`<header>`, `<nav>`, `<main>`, `<footer>`), альтернативний текст для зображень (`alt`), мітки для форм (`<label>`) та ARIA-атрибути для динамічного контенту."
      },
      {
        "id": "web_002_3",
        "question": "Наведіть приклад популярного скрінрідера.",
        "answer": "Серед популярних скрінрідерів: JAWS (Windows), NVDA (Windows, безкоштовний), VoiceOver (macOS/iOS), TalkBack (Android)."
      }
    ]
  },
  {
    "id": "web_003",
    "topic": "Web",
    "mainQuestion": "Як зробити сторінку доступною для людей з інвалідністю?",
    "mainAnswer": "Щоб зробити веб-сторінку доступною, необхідно дотримуватися принципів веб-доступності (WCAG). Це включає використання семантичного HTML, надання альтернативного тексту для нетекстового контенту, забезпечення навігації за допомогою клавіатури, створення контрастних кольорів, підтримку масштабування тексту та використання ARIA-атрибутів для покращення взаємодії зі скрінрідерами та іншими допоміжними технологіями.",
    "additionalQuestions": [
      {
        "id": "web_003_1",
        "question": "Що таке WCAG?",
        "answer": "**WCAG** (Web Content Accessibility Guidelines) – це міжнародні рекомендації, розроблені W3C, які визначають, як зробити веб-контент доступним для людей з різними видами інвалідності."
      },
      {
        "id": "web_003_2",
        "question": "Яка роль семантичного HTML у доступності?",
        "answer": "Семантичний HTML надає чітку структуру та значення контенту, дозволяючи скрінрідерам та іншим допоміжним технологіям правильно інтерпретувати та представляти інформацію користувачам."
      },
      {
        "id": "web_003_3",
        "question": "Що таке ARIA-атрибути і коли їх використовувати?",
        "answer": "**ARIA** (Accessible Rich Internet Applications) – це набір атрибутів HTML, які надають додаткову семантику та інформацію про інтерактивні елементи та динамічний контент, що недоступні для звичайного HTML. Використовувати їх слід лише тоді, коли семантичний HTML не може забезпечити потрібну доступність."
      }
    ]
  },
  {
    "id": "web_004",
    "topic": "Web",
    "mainQuestion": "Що таке cookies, localStorage та sessionStorage? У чому різниця між ними?",
    "mainAnswer": "**Cookies**, **localStorage** та **sessionStorage** – це механізми зберігання даних на стороні клієнта у веб-браузері. Вони відрізняються обсягом зберігання, терміном дії та доступом:",
    "additionalQuestions": [
      {
        "id": "web_004_1",
        "question": "Опишіть Cookies.",
        "answer": "Кукі – невеликі файли (до 4 КБ), що відправляються сервером і зберігаються браузером. Відправляються з кожним запитом на сервер. Мають термін дії. Використовуються для сесій, відстеження, персоналізації."
      },
      {
        "id": "web_004_2",
        "question": "Опишіть localStorage.",
        "answer": "LocalStorage – зберігає дані безстроково (до видалення користувачем) і доступний лише на стороні клієнта. Об'єм зберігання до 5-10 МБ. Дані не відправляються на сервер."
      },
      {
        "id": "web_004_3",
        "question": "Опишіть sessionStorage.",
        "answer": "SessionStorage – зберігає дані лише на час сесії (до закриття вкладки або браузера). Об'єм зберігання до 5-10 МБ. Дані не відправляються на сервер. Кожна вкладка має свій окремий `sessionStorage`."
      }
    ]
  },
  {
    "id": "web_005",
    "topic": "Web",
    "mainQuestion": "Що означає HTTP?",
    "mainAnswer": "**HTTP** означає **HyperText Transfer Protocol** (Протокол Передачі Гіпертексту). Це протокол прикладного рівня для передачі даних у Всесвітній павутині. Він є основою для обміну даними між веб-браузерами та веб-серверами, дозволяючи завантажувати веб-сторінки, зображення, відео та інший контент.",
    "additionalQuestions": [
      {
        "id": "web_005_1",
        "question": "Яка основна функція HTTP?",
        "answer": "Основна функція HTTP – дозволити клієнтам (браузерам) запитувати ресурси у серверів та отримувати відповіді."
      },
      {
        "id": "web_005_2",
        "question": "Чи є HTTP протоколом без стану?",
        "answer": "Так, HTTP є протоколом без стану (stateless). Це означає, що кожен запит від клієнта до сервера є незалежним, і сервер не зберігає інформацію про попередні запити клієнта. Для підтримки стану використовуються такі механізми, як кукі або сесії."
      },
      {
        "id": "web_005_3",
        "question": "Яка версія HTTP є актуальною?",
        "answer": "Наразі широко використовуються HTTP/1.1 та HTTP/2. HTTP/3 є новітньою версією, яка базується на QUIC для підвищення продуктивності."
      }
    ]
  },
  {
    "id": "web_006",
    "topic": "Web",
    "mainQuestion": "Поясніть максимально детально, що робить сучасний браузер, коли користувач вводить URL і натискає Enter.",
    "mainAnswer": "Коли користувач вводить URL і натискає Enter, сучасний браузер проходить через складний процес для завантаження та відображення сторінки. Цей процес включає розділення URL, перетворення доменного імені в IP-адресу (DNS-запит), встановлення TCP-з'єднання, надсилання HTTP-запиту, отримання відповіді від сервера, парсинг HTML, завантаження та обробку ресурсів (CSS, JS, зображення), рендеринг сторінки та, зрештою, її відображення користувачу.",
    "additionalQuestions": [
      {
        "id": "web_006_1",
        "question": "Яку роль відіграє DNS в цьому процесі?",
        "answer": "DNS (Domain Name System) перетворює доменне ім'я (наприклад, google.com) в IP-адресу, яку комп'ютер може використовувати для встановлення з'єднання з сервером, де розміщено веб-сайт."
      },
      {
        "id": "web_006_2",
        "question": "Що відбувається після отримання HTTP-відповіді?",
        "answer": "Браузер починає парсити HTML-документ, створюючи DOM-дерево. Він також виявляє посилання на інші ресурси (CSS, JavaScript, зображення) і починає їх завантажувати. Починається процес рендерингу: побудова CSSOM, формування дерева рендерингу, layout, paint і composition."
      },
      {
        "id": "web_006_3",
        "question": "Як браузер обробляє JavaScript?",
        "answer": "Коли браузер зустрічає тег `<script>`, він зазвичай призупиняє парсинг HTML і виконує JavaScript. Це може заблокувати рендеринг сторінки, якщо скрипт великий або повільний."
      }
    ]
  },
  {
    "id": "web_007",
    "topic": "Web",
    "mainQuestion": "Поясніть процес рендерингу сторінки (calc styles => reflow => repaint => composition).",
    "mainAnswer": "Процес рендерингу сторінки в браузері включає кілька ключових етапів: **Парсинг (Parsing)** HTML та CSS, створення **DOM** та **CSSOM**, об'єднання їх у **Render Tree**. Потім йдуть: **Layout (Reflow)** – обчислення геометрії та положення кожного елемента; **Paint (Repaint)** – заповнення пікселів, малювання елементів на екрані; **Composition** – поєднання окремих шарів на екрані для фінального відображення.",
    "additionalQuestions": [
      {
        "id": "web_007_1",
        "question": "Що таке DOM та CSSOM?",
        "answer": "**DOM** (Document Object Model) – це об'єктне представлення HTML-документа. **CSSOM** (CSS Object Model) – це об'єктне представлення стилів CSS, застосованих до документа."
      },
      {
        "id": "web_007_2",
        "question": "Що таке 'Reflow' (Layout) і чому його варто уникати?",
        "answer": "Reflow – це перерахунок розмірів та положення всіх елементів на сторінці. Це ресурсоємний процес, який відбувається при зміні DOM, CSS, розмірів вікна браузера тощо. Часті reflows можуть значно знизити продуктивність."
      },
      {
        "id": "web_007_3",
        "question": "Що таке 'Repaint' (Paint) і чим він відрізняється від Reflow?",
        "answer": "Repaint – це процес перемальовування пікселів елемента на екрані без зміни його розмірів чи положення (наприклад, зміна кольору фону). Repaint менш затратний, ніж Reflow, але все одно може впливати на продуктивність."
      }
    ]
  },
  {
    "id": "web_008",
    "topic": "Web",
    "mainQuestion": "Що таке critical CSS?",
    "mainAnswer": "**Critical CSS** (критичний CSS) – це мінімальний набір CSS-правил, необхідних для стилізації 'першого екрану' (above-the-fold content) веб-сторінки. Його вбудовують безпосередньо в HTML-документ (inline CSS) в `<head>`, щоб браузер міг одразу відобразити верхню частину сторінки без очікування завантаження зовнішніх CSS-файлів, покращуючи perceived performance.",
    "additionalQuestions": [
      {
        "id": "web_008_1",
        "question": "Навіщо використовувати Critical CSS?",
        "answer": "Використання Critical CSS допомагає покращити метрику 'First Contentful Paint' (FCP) та 'Largest Contentful Paint' (LCP), що є важливими для SEO та користувацького досвіду, оскільки користувач бачить вміст сторінки швидше."
      },
      {
        "id": "web_008_2",
        "question": "Як отримати Critical CSS?",
        "answer": "Існують різні інструменти та плагіни (наприклад, Critical, penthouse, або вбудовані функції деяких фреймворків), які автоматично аналізують сторінку та витягують критичний CSS."
      },
      {
        "id": "web_008_3",
        "question": "Де розміщується Critical CSS?",
        "answer": "Critical CSS розміщується всередині тегу `<style>` у розділі `<head>` HTML-документа."
      }
    ]
  },
  {
    "id": "web_009",
    "topic": "Web",
    "mainQuestion": "Як пов'язані CSS файли впливають на рендеринг сторінки?",
    "mainAnswer": "Зовнішні CSS-файли (підключені через `<link rel='stylesheet' href='style.css'>`) є **ресурсами, що блокують рендеринг**. Браузер не може розпочати відображення сторінки, доки всі CSS-файли не будуть завантажені та розпарсені, оскільки CSSOM необхідний для побудови дерева рендерингу. Це може затримувати відображення вмісту.",
    "additionalQuestions": [
      {
        "id": "web_009_1",
        "question": "Чому CSS блокує рендеринг?",
        "answer": "Браузеру потрібен повний CSSOM для правильного розрахунку стилів та макета сторінки. Якщо CSS-файл не завантажений, браузер не знає, як мають виглядати елементи, тому він призупиняє рендеринг, щоб уникнути 'миготіння нестилізованого контенту' (FOUC)."
      },
      {
        "id": "web_009_2",
        "question": "Як оптимізувати завантаження CSS?",
        "answer": "Можна використовувати Critical CSS, відкладати завантаження некритичного CSS (наприклад, за допомогою `media` атрибута в `<link>` або JavaScript), мінімізувати та компресувати файли CSS, використовувати HTTP/2 для паралельного завантаження."
      },
      {
        "id": "web_009_3",
        "question": "Що таке 'FOUC'?",
        "answer": "**FOUC** (Flash Of Unstyled Content) – це явище, коли веб-сторінка тимчасово відображається без застосованих стилів, а потім раптово перемальовується зі стилями після завантаження CSS. Це небажаний ефект для користувацького досвіду."
      }
    ]
  },
  {
    "id": "web_010",
    "topic": "Web",
    "mainQuestion": "У чому різниця між включенням `<script>` у `<head>` та перед `</body>`?",
    "mainAnswer": "Розміщення `<script>` тегу впливає на час завантаження та виконання JavaScript, а отже, і на рендеринг сторінки: \n* **У `<head>`:** Скрипт завантажується та виконується до того, як браузер почне парсити та відображати тіло сторінки. Це блокує рендеринг. \n* **Перед `</body>` (end of body):** Скрипт завантажується та виконується після того, як весь HTML-контент сторінки вже був розпарсений. Це дозволяє сторінці швидше відобразитися, і скрипти можуть безпечно звертатися до елементів DOM без помилок.",
    "additionalQuestions": [
      {
        "id": "web_010_1",
        "question": "Які недоліки розміщення скриптів у `<head>`?",
        "answer": "Основний недолік – блокування рендерингу сторінки. Користувач буде бачити порожню сторінку, доки всі скрипти не будуть завантажені та виконані, що погіршує perceived performance."
      },
      {
        "id": "web_010_2",
        "question": "Які переваги розміщення скриптів перед `</body>`?",
        "answer": "Переваги: не блокує рендеринг, що прискорює відображення вмісту користувачу; скрипти мають доступ до всіх елементів DOM, оскільки DOM вже побудований."
      },
      {
        "id": "web_010_3",
        "question": "Коли все ж таки є сенс розміщувати скрипти у `<head>`?",
        "answer": "Рідко, але може бути необхідно для певних функцій, які повинні бути доступні одразу (наприклад, поліфіли, скрипти для аналітики, що не блокують рендеринг, або скрипти з атрибутами `async` чи `defer`)."
      }
    ]
  },
  {
    "id": "web_011",
    "topic": "Web",
    "mainQuestion": "Що означають `async` та `defer` у `<script>`?",
    "mainAnswer": "Атрибути `async` та `defer` у тегу `<script>` дозволяють змінити поведінку завантаження та виконання JavaScript-файлів, щоб запобігти блокуванню рендерингу сторінки: \n* **`async`**: Скрипт завантажується асинхронно у фоновому режимі, не блокуючи парсинг HTML. Після завантаження він виконується, і це може блокувати рендеринг на час виконання. Порядок виконання скриптів з `async` не гарантується. \n* **`defer`**: Скрипт завантажується асинхронно у фоновому режимі, не блокуючи парсинг HTML. Виконання відкладається до повного завершення парсингу HTML (і до того, як спрацює подія `DOMContentLoaded`). Порядок виконання скриптів з `defer` зберігається.",
    "additionalQuestions": [
      {
        "id": "web_011_1",
        "question": "Коли використовувати `async`?",
        "answer": "Використовуйте `async` для незалежних скриптів, які не залежать від DOM та не впливають на інші скрипти (наприклад, скрипти аналітики, сторонні віджети)."
      },
      {
        "id": "web_011_2",
        "question": "Коли використовувати `defer`?",
        "answer": "Використовуйте `defer` для скриптів, які залежать від DOM або від інших скриптів (наприклад, jQuery, кастомні скрипти для інтерактивності сторінки). Це часто є кращою альтернативою розміщенню скриптів перед `</body>`."
      },
      {
        "id": "web_011_3",
        "question": "Яка поведінка скриптів без `async` та `defer`?",
        "answer": "Без цих атрибутів скрипт завантажується та виконується синхронно, блокуючи парсинг HTML та рендеринг сторінки до свого завершення."
      }
    ]
  },
  {
    "id": "web_012",
    "topic": "Web",
    "mainQuestion": "Який найкращий спосіб включити CSS та JS у HTML-сторінку?",
    "mainAnswer": "Найкращий спосіб включення CSS та JS полягає в оптимізації їх завантаження та виконання для покращення продуктивності та користувацького досвіду: \n* **CSS:** Ключовий CSS (Critical CSS) для 'першого екрану' слід вбудовувати безпосередньо в `<head>` (inline `<style>`). Весь інший CSS підключати через зовнішні файли (`<link rel='stylesheet' href='style.css'>`) з атрибутами `media` для відкладеного завантаження або використовувати `@import` в JavaScript для динамічного завантаження. \n* **JavaScript:** Більшість JavaScript-файлів слід підключати перед закриваючим тегом `</body>` або використовувати атрибути `defer` чи `async` у тегу `<script>` для асинхронного завантаження та неблокуючого виконання.",
    "additionalQuestions": [
      {
        "id": "web_012_1",
        "question": "Чому Critical CSS краще вбудовувати?",
        "answer": "Це дозволяє браузеру одразу відобразити 'перший екран' сторінки без очікування завантаження зовнішніх CSS-файлів, що покращує сприйману швидкість завантаження."
      },
      {
        "id": "web_012_2",
        "question": "Які переваги зовнішніх CSS та JS файлів?",
        "answer": "Зовнішні файли кешуються браузером, зменшуючи час завантаження при повторних відвідуваннях. Вони також покращують читабельність коду та його підтримку."
      },
      {
        "id": "web_012_3",
        "question": "Як `defer` і `async` допомагають з JavaScript?",
        "answer": "Вони дозволяють завантажувати скрипти паралельно з парсингом HTML, зменшуючи час блокування рендерингу та прискорюючи відображення сторінки."
      }
    ]
  },
  {
    "id": "web_013",
    "topic": "Web",
    "mainQuestion": "Як покращити продуктивність веб-сайту?",
    "mainAnswer": "Покращення продуктивності веб-сайту включає оптимізацію як фронтенду, так і бекенду. Ключові стратегії включають мінімізацію та компресію ресурсів (HTML, CSS, JS, зображення), кешування (на стороні браузера та сервера), використання CDN, оптимізацію зображень, ледаче завантаження (lazy loading), зменшення кількості HTTP-запитів, оптимізацію критичного шляху рендерингу та ефективну роботу з JavaScript.",
    "additionalQuestions": [
      {
        "id": "web_013_1",
        "question": "Що таке CDN і як він допомагає?",
        "answer": "**CDN** (Content Delivery Network) – це мережа розподілених серверів, які зберігають копії вашого контенту. Коли користувач запитує контент, CDN доставляє його з найближчого сервера, що зменшує затримку та прискорює завантаження."
      },
      {
        "id": "web_013_2",
        "question": "Що таке 'lazy loading'?",
        "answer": "**Lazy loading** (ледаче завантаження) – це техніка, при якій зображення або інші ресурси завантажуються лише тоді, коли вони стають видимими в області перегляду користувача, а не одразу при завантаженні сторінки. Це зменшує початковий час завантаження."
      },
      {
        "id": "web_013_3",
        "question": "Як оптимізувати зображення?",
        "answer": "Оптимізація зображень включає вибір правильного формату (WebP, AVIF), стиснення без втрати якості, використання адаптивних зображень (srcset, sizes), встановлення атрибутів `width` та `height` для уникнення зсувів макета."
      }
    ]
  }
]