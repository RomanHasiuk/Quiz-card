[
  {
    "id": "html-q1",
    "topic": "HTML",
    "mainQuestion": "Що таке DOCTYPE і навіщо він потрібен?",
    "mainAnswer": "`DOCTYPE` (Document Type Declaration) — це інструкція, яка вказує веб-браузеру, яку версію HTML (або XML) використовує документ. Це потрібно для коректного рендерингу сторінки в стандартному режимі.",
    "additionalQuestions": [
      {
        "id": "html-q1-aq1",
        "question": "Який DOCTYPE є найпоширенішим у сучасному HTML5?",
        "answer": "У HTML5 використовується дуже простий DOCTYPE: `<!DOCTYPE html>`."
      },
      {
        "id": "html-q1-aq2",
        "question": "Що станеться, якщо DOCTYPE відсутній?",
        "answer": "Якщо `DOCTYPE` відсутній або вказаний некоректно, браузер може перейти в 'режим сумісності' (quirks mode), що призведе до нестандартного відображення сторінки та можливих помилок у верстці."
      },
      {
        "id": "html-q1-aq3",
        "question": "Де розміщується DOCTYPE в HTML-документі?",
        "answer": "`DOCTYPE` завжди розміщується на самому початку HTML-документа, перед тегом `<html>`."
      }
    ]
  },
  {
    "id": "html-q2",
    "topic": "HTML",
    "mainQuestion": "Що таке атрибут?",
    "mainAnswer": "Атрибут — це модифікатор HTML-елемента, який надає додаткову інформацію про елемент або змінює його поведінку. Атрибути завжди вказуються у відкриваючому тезі.",
    "additionalQuestions": [
      {
        "id": "html-q2-aq1",
        "question": "Наведіть приклад використання атрибута.",
        "answer": "Приклад: `<a href=\"https://example.com\">Посилання</a>`, де `href` є атрибутом тегу `<a>`."
      },
      {
        "id": "html-q2-aq2",
        "question": "Які типи значень можуть мати атрибути?",
        "answer": "Значення атрибутів можуть бути рядками, числами, булевими значеннями або переліченими значеннями (зі списку дозволених)."
      },
      {
        "id": "html-q2-aq3",
        "question": "Чи всі HTML-елементи можуть мати однакові атрибути?",
        "answer": "Ні, не всі. Деякі атрибути є глобальними (можуть бути у будь-якого елемента, наприклад `id`, `class`), а деякі — специфічними для певних елементів (наприклад `src` для `<img>`, `action` для `<form>`)."
      }
    ]
  },
  {
    "id": "html-q3",
    "topic": "HTML",
    "mainQuestion": "Для чого потрібен атрибут `alt` для тегу `<img>`? Чи варто його використовувати?",
    "mainAnswer": "Атрибут `alt` (alternative text) надає текстовий опис зображення. Цей текст відображається, якщо зображення не завантажується, і використовується скрін-рідерами. Так, його обов'язково варто використовувати для доступності та SEO.",
    "additionalQuestions": [
      {
        "id": "html-q3-aq1",
        "question": "Як `alt` атрибут впливає на SEO?",
        "answer": "Пошукові системи використовують `alt` текст для розуміння вмісту зображень, що може покращити видимість вашої сторінки в результатах пошуку зображень."
      },
      {
        "id": "html-q3-aq2",
        "question": "Який вміст має бути в `alt` атрибуті для декоративних зображень?",
        "answer": "Для декоративних зображень, які не несуть значущого змісту (наприклад, фонові візерунки), `alt` атрибут може бути порожнім (`alt=\"\"`) або взагалі відсутнім, якщо зображення додається через CSS."
      },
      {
        "id": "html-q3-aq3",
        "question": "Чи є різниця між `alt` та `title` для `<img>` тегу?",
        "answer": "Так. `alt` надає *альтернативний текст* для вмісту зображення (для доступності та SEO), тоді як `title` надає *додаткову підказку*, яка з'являється при наведенні курсору."
      }
    ]
  },
  {
    "id": "html-q4",
    "topic": "HTML",
    "mainQuestion": "Що таке атрибут `title`? Чи варто його використовувати?",
    "mainAnswer": "Атрибут `title` надає додаткову, часто необов'язкову інформацію про елемент, яка зазвичай відображається як спливаюча підказка при наведенні курсору. Його використання залежить від контексту, але часто краще розміщувати важливу інформацію безпосередньо у видимому тексті.",
    "additionalQuestions": [
      {
        "id": "html-q4-aq1",
        "question": "Наведіть приклад, коли `title` атрибут є корисним.",
        "answer": "`title` може бути корисним для надання коротких, некритичних підказок, наприклад, повних назв абревіатур або пояснень до іконок, якщо ці пояснення не є критичними для розуміння."
      },
      {
        "id": "html-q4-aq2",
        "question": "Які недоліки використання `title` для доступності?",
        "answer": "`title` не доступний для користувачів клавіатури або сенсорних екранів, оскільки він вимагає наведення курсору миші. Тому для важливої інформації краще використовувати видимий текст або `alt` атрибут."
      },
      {
        "id": "html-q4-aq3",
        "question": "Чи можна використовувати `title` для будь-якого HTML-елемента?",
        "answer": "Так, `title` є глобальним атрибутом, що означає, що його можна використовувати з будь-яким HTML-елементом."
      }
    ]
  },
  {
    "id": "html-q5",
    "topic": "HTML",
    "mainQuestion": "Для чого використовуються `data-` атрибути?",
    "mainAnswer": "`data-` атрибути (custom data attributes) дозволяють зберігати додаткові, нестандартні дані безпосередньо в HTML-елементах. Ці дані потім легко доступні та можуть бути маніпульовані за допомогою JavaScript.",
    "additionalQuestions": [
      {
        "id": "html-q5-aq1",
        "question": "Як отримати значення `data-` атрибута за допомогою JavaScript?",
        "answer": "Використовуйте властивість `dataset` елемента, наприклад: `element.dataset.myAttribute` для `data-my-attribute`."
      },
      {
        "id": "html-q5-aq2",
        "question": "Чи можна стилізувати елементи на основі `data-` атрибутів за допомогою CSS?",
        "answer": "Так, можна використовувати селектори атрибутів CSS, наприклад: `[data-status=\"active\"] { color: green; }`."
      },
      {
        "id": "html-q5-aq3",
        "question": "Чи є обмеження щодо назв `data-` атрибутів?",
        "answer": "Назви повинні починатися з 'data-', після чого йде мінімум один або більше символів, що складаються з малих латинських літер, цифр, дефісів, крапок або підкреслень."
      }
    ]
  },
  {
    "id": "html-q6",
    "topic": "HTML",
    "mainQuestion": "Що означає слово 'семантичний' у Вебі?",
    "mainAnswer": "У контексті Вебу, 'семантичний' означає використання HTML-тегів таким чином, щоб вони точно відображали значення та призначення вмісту (наприклад, `<header>`, `<article>`, `<footer>`), а не лише його візуальне представлення.",
    "additionalQuestions": [
      {
        "id": "html-q6-aq1",
        "question": "Наведіть приклади семантичних та несемантичних HTML-тегів.",
        "answer": "Семантичні: `<header>`, `<nav>`, `<article>`, `<aside>`, `<footer>`, `<strong>`. Несемантичні: `<div>`, `<span>`, `<b>`, `<i>`."
      },
      {
        "id": "html-q6-aq2",
        "question": "Які переваги використання семантичного HTML?",
        "answer": "Покращена доступність для скрін-рідерів, краще SEO (пошукові системи легше розуміють контент), простіша підтримка коду та краща структура для розробників."
      },
      {
        "id": "html-q6-aq3",
        "question": "Як семантика пов'язана з доступністю веб-сторінок?",
        "answer": "Семантичні теги надають контекст і структуру для допоміжних технологій (наприклад, скрін-рідерів), дозволяючи користувачам з обмеженими можливостями краще розуміти та навігувати по сторінці."
      }
    ]
  },
  {
    "id": "html-q7",
    "topic": "HTML",
    "mainQuestion": "У чому різниця між тегами `<b>` і `<strong>`?",
    "mainAnswer": "Візуально обидва теги роблять текст жирним. `<strong>` є семантичним тегом, що вказує на *важливість* або *сильний акцент* на вмісті. `<b>` є несемантичним і просто застосовує жирне накреслення без додаткового змістовного значення.",
    "additionalQuestions": [
      {
        "id": "html-q7-aq1",
        "question": "Який тег краще використовувати для SEO та доступності?",
        "answer": "Для SEO та доступності краще використовувати `<strong>`, оскільки він передає смислове значення важливості контенту."
      },
      {
        "id": "html-q7-aq2",
        "question": "Чи можна досягти того ж візуального ефекту за допомогою CSS?",
        "answer": "Так, ви можете зробити текст жирним за допомогою CSS властивості `font-weight: bold;` для будь-якого елемента."
      },
      {
        "id": "html-q7-aq3",
        "question": "Коли доцільно використовувати тег `<b>`?",
        "answer": "`<b>` можна використовувати, коли потрібно просто зробити текст жирним без будь-якого додаткового акценту на важливості, наприклад, у назвах продуктів або для візуального виділення ключових слів, які не є семантично важливими."
      }
    ]
  },
  {
    "id": "html-q8",
    "topic": "HTML",
    "mainQuestion": "У чому різниця між `div` і `section`?",
    "mainAnswer": "`<div>` є загальним, несемантичним блоковим елементом для групування контенту без будь-якого змістовного значення. `<section>` є семантичним елементом, призначеним для групування логічно пов'язаного вмісту в окремі розділи документа, часто з заголовком.",
    "additionalQuestions": [
      {
        "id": "html-q8-aq1",
        "question": "Коли доречно використовувати `<div>`?",
        "answer": "`<div>` доречно використовувати для стилізації або групування елементів, коли жоден інший семантичний тег не підходить, наприклад, для створення контейнерів для CSS-макетів."
      },
      {
        "id": "html-q8-aq2",
        "question": "Які ще семантичні блокові елементи існують у HTML5?",
        "answer": "Інші семантичні елементи включають `<article>`, `<aside>`, `<nav>`, `<header>`, `<footer>`, `<main>`."
      },
      {
        "id": "html-q8-aq3",
        "question": "Як `section` допомагає структурувати документ для пошукових систем?",
        "answer": "Використання `<section>` допомагає пошуковим системам краще розуміти логічну структуру та ієрархію вмісту на сторінці, що може позитивно вплинути на індексування та релевантність."
      }
    ]
  },
  {
    "id": "html-q9",
    "topic": "HTML",
    "mainQuestion": "Що таке `srcset` для зображень?",
    "mainAnswer": "Атрибут `srcset` для тегу `<img>` дозволяє браузеру вибрати найкраще зображення з набору наданих джерел, виходячи з розміру екрана, роздільної здатності та щільності пікселів пристрою. Це забезпечує адаптивне відображення зображень та оптимізує їх завантаження.",
    "additionalQuestions": [
      {
        "id": "html-q9-aq1",
        "question": "Яка основна перевага використання `srcset`?",
        "answer": "Основна перевага — це оптимізація продуктивності: завантажуються лише ті розміри зображень, які потрібні для поточного пристрою, що зменшує трафік і прискорює завантаження сторінки."
      },
      {
        "id": "html-q9-aq2",
        "question": "Чим відрізняється `srcset` від `sizes` атрибута?",
        "answer": "`srcset` визначає набір доступних зображень та їхні розміри/щільність. `sizes` вказує браузеру, який розмір зображення буде відображатися на різних в'юпортах, допомагаючи йому вибрати відповідний `srcset`."
      },
      {
        "id": "html-q9-aq3",
        "question": "Чи можна використовувати `srcset` з тегом `<picture>`?",
        "answer": "Так, `srcset` часто використовується разом з тегом `<picture>` для більш складних сценаріїв адаптивних зображень, де потрібно змінювати зображення залежно від типу носія або формату."
      }
    ]
  },
  {
    "id": "html-q10",
    "topic": "HTML",
    "mainQuestion": "Що таке viewport?",
    "mainAnswer": "Viewport — це видима область веб-сторінки у вікні браузера користувача. Для адаптивного дизайну він є критично важливим, оскільки дозволяє контролювати розмір та масштабування сторінки відповідно до розміру екрана пристрою.",
    "additionalQuestions": [
      {
        "id": "html-q10-aq1",
        "question": "Як мета-тег `viewport` використовується в HTML?",
        "answer": "Мета-тег `viewport` розміщується в `<head>` секції HTML-документа, наприклад: `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`."
      },
      {
        "id": "html-q10-aq2",
        "question": "Які основні властивості можна задати для `viewport`?",
        "answer": "Основні властивості включають `width` (ширина в'юпорта), `initial-scale` (початковий масштаб), `minimum-scale`, `maximum-scale` та `user-scalable`."
      },
      {
        "id": "html-q10-aq3",
        "question": "Чому важливо налаштовувати `viewport` для мобільних пристроїв?",
        "answer": "Налаштування `viewport` дозволяє веб-сторінці правильно адаптуватися до різних розмірів екранів мобільних пристроїв, запобігаючи незручному масштабуванню та забезпечуючи хороший користувацький досвід."
      }
    ]
  },
  {
    "id": "html-q11",
    "topic": "HTML",
    "mainQuestion": "Як додати зображення на веб-сторінку?",
    "mainAnswer": "Зображення додаються за допомогою тегу `<img>`. Основними атрибутами є `src` (шлях до файлу зображення) та `alt` (альтернативний текст для доступності).",
    "additionalQuestions": [
      {
        "id": "html-q11-aq1",
        "question": "Які формати зображень найчастіше використовуються у вебі?",
        "answer": "Найпоширеніші формати: JPEG (для фотографій), PNG (для графіки з прозорістю), GIF (для анімації), та WebP/AVIF (для оптимізованих зображень з високою компресією)."
      },
      {
        "id": "html-q11-aq2",
        "question": "Як змінити розмір зображення за допомогою HTML чи CSS?",
        "answer": "У HTML можна використовувати атрибути `width` та `height` (`<img width=\"100\" height=\"100\">`). У CSS — властивості `width` та `height` (`img { width: 100px; height: auto; }`). Краще використовувати CSS для контролю розмірів."
      },
      {
        "id": "html-q11-aq3",
        "question": "Як забезпечити доступність зображень для всіх користувачів?",
        "answer": "Для забезпечення доступності важливо використовувати атрибут `alt` з інформативним описом, а для комплексних зображень (графіки, діаграми) надавати текстову транскрипцію або розширений опис."
      }
    ]
  }
]