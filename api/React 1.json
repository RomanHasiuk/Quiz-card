[
  {
    "id": "react-q1",
    "topic": "React",
    "mainQuestion": "Що таке React і в чому полягають його переваги?",
    "mainAnswer": "React (або React.js) — це бібліотека JavaScript з відкритим вихідним кодом для створення користувацьких інтерфейсів. Її розробила Facebook. Основна мета React — полегшити розробку швидких і масштабованих односторінкових застосунків (SPA) за допомогою компонентного підходу та Virtual DOM. \n**Переваги:** \n- **Декларативний підхід**: Спрощує створення складних UI, дозволяючи описувати, як UI має виглядати для певного стану, а React сам керує оновленнями. \n- **Компонентно-орієнтована архітектура**: Розбиття UI на незалежні, багаторазово використовувані компоненти, що полегшує розробку та супровід. \n- **Virtual DOM**: Забезпечує високу продуктивність за рахунок ефективного оновлення DOM. \n- **Односпрямований потік даних**: Спрощує налагодження та робить застосунок більш передбачуваним. \n- **Велика екосистема та спільнота**: Багато інструментів, бібліотек та активна підтримка спільноти.",
    "additionalQuestions": [
      {
        "id": "react-q1-aq1",
        "question": "Чи є React фреймворком чи бібліотекою?",
        "answer": "React позиціонується як бібліотека для створення користувацьких інтерфейсів, а не повноцінний фреймворк, оскільки він фокусується лише на рівні представлення (view layer) і не надає рішень для маршрутизації, управління станом або HTTP-запитів \"з коробки\"."
      },
      {
        "id": "react-q1-aq2",
        "question": "Що означає 'декларативний підхід' у React?",
        "answer": "Декларативний підхід означає, що ви описуєте, як має виглядати інтерфейс у певному стані, і React подбає про фактичні маніпуляції з DOM. Ви не даєте покрокові інструкції (як у імперативному підході), а лише декларуєте бажаний кінцевий результат."
      },
      {
        "id": "react-q1-aq3",
        "question": "Яка компанія розробила та підтримує React?",
        "answer": "React був розроблений та підтримується компанією Facebook (Meta Platforms)."
      }
    ]
  },
  {
    "id": "react-q2",
    "topic": "React",
    "mainQuestion": "Чи можна до вже існуючого сайту підключити лише один новий компонент на React? Як?",
    "mainAnswer": "Так, можна. React не вимагає, щоб весь сайт був побудований на ньому. Ви можете використовувати React для рендерингу окремих компонентів на вже існуючих сторінках. Для цього потрібно: \n1. Включити бібліотеки React та ReactDOM на сторінку (зазвичай через CDN або бандлер). \n2. Створити HTML-елемент (наприклад, `<div>`), який буде кореневим вузлом для вашого React-компонента. \n3. Використати метод `ReactDOM.render()` (для React 17-го і нижче) або `ReactDOM.createRoot().render()` (для React 18+), щоб вставити ваш React-компонент у цей HTML-елемент. \nЦе дозволяє поступово інтегрувати React у традиційні веб-застосунки.",
    "additionalQuestions": [
      {
        "id": "react-q2-aq1",
        "question": "Який метод використовується для рендерингу React-компонента в DOM у React 18?",
        "answer": "У React 18+ використовується `ReactDOM.createRoot(domNode).render(<MyComponent />);`."
      },
      {
        "id": "react-q2-aq2",
        "question": "Що таке \"кореневий вузол\" (root node) для React компонента?",
        "answer": "Кореневий вузол — це існуючий HTML-елемент на сторінці, до якого React буде 'прикріплювати' ваш компонент. Всі React-компоненти, які ви рендерите, будуть знаходитися всередині цього кореневого вузла."
      },
      {
        "id": "react-q2-aq3",
        "question": "Які можуть бути потенційні проблеми при інтеграції React в існуючий сайт?",
        "answer": "Можуть виникнути проблеми з конфліктами глобальних змінних, стилів (CSS), або якщо інший скрипт на сторінці змінює ту саму частину DOM, якою керує React. Також можуть бути складнощі з передачею даних між React-компонентами та існуючим кодом."
      }
    ]
  },
  {
    "id": "react-q3",
    "topic": "React",
    "mainQuestion": "Що таке JSX? Який у нього синтаксис?",
    "mainAnswer": "JSX (JavaScript XML) — це розширення синтаксису JavaScript, яке дозволяє писати HTML-подібний код безпосередньо в JavaScript. Він виглядає як HTML, але є синтаксичним цукром для викликів `React.createElement()`. JSX дозволяє розробникам описувати структуру UI компонента в тому ж файлі, де і логіка, роблячи код більш зрозумілим та інтуїтивним. \n**Синтаксис:** \n- Теги схожі на HTML: `<p>Привіт, світ!</p>` \n- Вбудовування JavaScript: Вирази JavaScript вставляються у фігурних дужках `{}`. Наприклад, `<h1>Привіт, {name}!</h1>` \n- Атрибути: Використовують camelCase (наприклад, `className` замість `class`). \n- Закриваючі теги: Всі теги повинні бути закриті (наприклад, `<img />` або `<p></p>`). \n- Фрагменти: Для повернення кількох елементів без додаткового вузла DOM, використовується `<>...</>` або `<React.Fragment>...</React.Fragment>`.",
    "additionalQuestions": [
      {
        "id": "react-q3-aq1",
        "question": "Чи розуміє браузер JSX напряму?",
        "answer": "Ні, браузер не розуміє JSX напряму. JSX-код транспілюється в чистий JavaScript (виклики `React.createElement()`) за допомогою таких інструментів, як Babel, перш ніж він буде виконаний браузером."
      },
      {
        "id": "react-q3-aq2",
        "question": "Яка різниця між `class` в HTML і `className` в JSX?",
        "answer": "В HTML для призначення CSS-класу використовується атрибут `class`. У JSX, оскільки `class` є зарезервованим словом у JavaScript (для оголошення класів), використовується `className` для уникнення конфліктів."
      },
      {
        "id": "react-q3-aq3",
        "question": "Чому JSX вимагає, щоб всі елементи були закриті?",
        "answer": "JSX транспілюється в JavaScript. JavaScript є строго типізованим і не може інтерпретувати незакриті теги. `<img />` є синтаксично коректним самозакривним елементом, на відміну від `<img` в HTML."
      }
    ]
  },
  {
    "id": "react-q4",
    "topic": "React",
    "mainQuestion": "Чи обов’язково використовувати JSX із Реактом?",
    "mainAnswer": "Ні, використовувати JSX із React не обов'язково. React можна використовувати і без JSX, створюючи елементи безпосередньо за допомогою методу `React.createElement()`. Наприклад, замість `<p>Привіт</p>` ви могли б написати `React.createElement('p', null, 'Привіт')`. \nОднак, JSX є настільки зручним, інтуїтивно зрозумілим і поширеним, що практично всі сучасні React-проекти використовують його. Він значно покращує читабельність та зручність написання UI-коду, тому відмова від нього рідко є виправданою.",
    "additionalQuestions": [
      {
        "id": "react-q4-aq1",
        "question": "Які переваги використання JSX над `React.createElement()`?",
        "answer": "JSX робить код більш читабельним, схожим на HTML, що полегшує візуалізацію структури UI. Він також спрощує написання та підтримування складних UI-ієрархій порівняно з вкладеними викликами `React.createElement()`."
      },
      {
        "id": "react-q4-aq2",
        "question": "Чому React команда рекомендує використовувати JSX?",
        "answer": "Команда React рекомендує JSX, оскільки він дозволяє писати розмітку і логіку разом, що відповідає компонентному підходу, де компоненти є самодостатніми одиницями UI. Це робить код більш зрозумілим та легшим для візуалізації."
      },
      {
        "id": "react-q4-aq3",
        "question": "Чи є якісь інші синтаксиси, схожі на JSX, у інших бібліотеках?",
        "answer": "Так, інші бібліотеки та фреймворки також мають свої синтаксичні розширення або шаблонізатори, які дозволяють писати декларативну розмітку. Наприклад, Vue.js використовує однофайлові компоненти з HTML-шаблонами, Svelte має свій власний синтаксис шаблонів, а Angular використовує HTML-шаблони зі спеціальними директивами."
      }
    ]
  },
  {
    "id": "react-q5",
    "topic": "React",
    "mainQuestion": "Що таке Virtual DOM?",
    "mainAnswer": "Virtual DOM (Віртуальний DOM) — це легка JavaScript-копія реального DOM. Коли стан React-компонента змінюється, React спочатку створює нове дерево Virtual DOM. Потім він порівнює це нове дерево з попереднім станом Virtual DOM (процес, що називається 'diffing'). React обчислює мінімальний набір змін, необхідних для оновлення реального DOM, і застосовує лише ці зміни. Це значно підвищує продуктивність, оскільки прямі маніпуляції з реальним DOM є повільними та ресурсоємними.",
    "additionalQuestions": [
      {
        "id": "react-q5-aq1",
        "question": "Чому маніпуляції з реальним DOM повільні?",
        "answer": "Маніпуляції з реальним DOM повільні, тому що кожна зміна викликає перерахунок стилів, макета (layout) та перемальовування (repaint) сторінки, що є ресурсоємними операціями для браузера. Крім того, прямі маніпуляції можуть бути неоптимальними, якщо зміни відбуваються часто."
      },
      {
        "id": "react-q5-aq2",
        "question": "Що таке 'diffing' та 'reconciliation' у контексті Virtual DOM?",
        "answer": "'Diffing' — це процес порівняння двох версій Virtual DOM для визначення відмінностей. 'Reconciliation' — це процес, за допомогою якого React оновлює реальний DOM на основі цих відмінностей, застосовуючи лише необхідні зміни."
      },
      {
        "id": "react-q5-aq3",
        "question": "Чи всі фреймворки використовують Virtual DOM?",
        "answer": "Ні, не всі. Хоча Virtual DOM є популярною оптимізацією в таких бібліотеках, як React, інші фреймворки можуть використовувати різні підходи. Наприклад, Svelte взагалі не використовує Virtual DOM, а компілює код у невеликі, оптимізовані для DOM зміни під час збирання."
      }
    ]
  },
  {
    "id": "react-q6",
    "topic": "React",
    "mainQuestion": "Що таке компонент і в чому різниця між компонентом-функцією та компонентом-класом? У чому відмінність між компонентом та JSX-елементом?",
    "mainAnswer": "**Компонент** у React — це незалежна, багаторазово використовувана частина UI, яка інкапсулює свою власну логіку та вигляд. Компоненти дозволяють розбивати UI на дрібніші, керовані частини. \n**Відмінності між компонентом-функцією та компонентом-класом:** \n- **Компонент-функція (Functional Component)**: Просто функція JavaScript, яка приймає `props` як аргумент і повертає JSX. До появи хуків (Hooks) вони були 'безстатусні' (stateless). З хуками (React 16.8+) вони можуть мати стан та доступ до життєвого циклу. \n- **Компонент-клас (Class Component)**: Клас JavaScript, який успадковується від `React.Component` та має метод `render()`, який повертає JSX. До появи хуків, вони були єдиним способом мати стан та методи життєвого циклу. \n**Відмінність між компонентом та JSX-елементом:** \n- **Компонент**: Це шаблон (функція або клас) для створення UI. Це *визначення* того, що буде рендеритися. \n- **JSX-елемент**: Це *екземпляр* або *опис* того, що буде рендеритися. Це те, що повертає метод `render()` компонента або сама функція-компонент, і що React потім використовуватиме для побудови Virtual DOM (наприклад, `<MyComponent />` або `<div>`).",
    "additionalQuestions": [
      {
        "id": "react-q6-aq1",
        "question": "Коли варто використовувати компоненти-класи замість компонентів-функцій у сучасній розробці React?",
        "answer": "У сучасній розробці React (після появи хуків у React 16.8) компоненти-функції з хуками можуть робити все, що робили компоненти-класи, і часто є кращим вибором через їхню простоту та легкість тестування. Компоненти-класи все ще можуть зустрічатися у старих кодових базах, або якщо є специфічна потреба у їхніх методах життєвого циклу без використання хуків."
      },
      {
        "id": "react-q6-aq2",
        "question": "Що таке 'стан' (state) у контексті React-компонентів?",
        "answer": "Стан (state) — це об'єкт, який містить дані, що належать конкретному компоненту і можуть змінюватися з часом, впливаючи на його рендеринг. Зміна стану компонента призводить до його повторного рендерингу."
      },
      {
        "id": "react-q6-aq3",
        "question": "Як React розуміє, чи JSX-тег є HTML-елементом, чи React-компонентом?",
        "answer": "React використовує правило, що теги, які починаються з великої літери (наприклад, `<MyComponent />`), вважаються React-компонентами, а теги, які починаються з малої літери (наприклад, `<div>`), вважаються стандартними HTML-елементами."
      }
    ]
  },
  {
    "id": "react-q7",
    "topic": "React",
    "mainQuestion": "Що таке props? Як отримати до них доступ і як їх поміняти?",
    "mainAnswer": "**Props** (від 'properties') — це механізм у React для передачі даних від батьківського компонента до дочірнього. Props є **тільки для читання** (read-only) і **незмінними** (immutable) для дочірнього компонента. Компоненти завжди повинні поводитися як 'чисті функції' по відношенню до своїх props. \n**Доступ до props:** \n- **Компонент-функція**: Props передаються як перший аргумент функції: `function MyComponent(props) { return <h1>{props.title}</h1>; }` \n- **Компонент-клас**: Props доступні через `this.props`: `class MyComponent extends React.Component { render() { return <h1>{this.props.title}</h1>; } }` \n**Зміна props:** \n- Дочірній компонент **не може** безпосередньо змінювати свої props. \n- Щоб змінити дані, які передаються через props, батьківський компонент повинен оновити свій власний стан (state) або props, які він отримує, і тоді передати нові значення дочірньому компоненту.",
    "additionalQuestions": [
      {
        "id": "react-q7-aq1",
        "question": "Чому props є незмінними?",
        "answer": "Props є незмінними для дочірнього компонента, щоб забезпечити передбачуваність потоку даних у React. Це допомагає підтримувати односпрямований потік даних і запобігає непередбаченим побічним ефектам, коли дочірній компонент випадково змінює дані, отримані від батька."
      },
      {
        "id": "react-q7-aq2",
        "question": "Як передати функцію як prop?",
        "answer": "Ви можете передавати функції як props так само, як і будь-які інші дані: `<ChildComponent onClick={() => console.log('Клік')} />`. Це поширений спосіб дозволити дочірньому компоненту викликати функцію, визначену в батьківському, для передачі даних або сповіщення про події."
      },
      {
        "id": "react-q7-aq3",
        "question": "Чи можна призначити значення за замовчуванням для props?",
        "answer": "Так, можна. Для компонентів-функцій можна використовувати синтаксис деструктуризації з присвоєнням значень за замовчуванням (`function MyComponent({ title = 'Default Title' })`). Для компонентів-класів раніше використовували `defaultProps` (статична властивість класу), але зараз це також можна зробити через значення за замовчуванням у деструктуризації."
      }
    ]
  },
  {
    "id": "react-q8",
    "topic": "React",
    "mainQuestion": "Що таке state? Як отримати до нього доступ і як його поміняти?",
    "mainAnswer": "**State** (стан) — це об'єкт JavaScript, який належить конкретному компоненту і містить дані, що можуть змінюватися з часом і впливати на рендеринг цього компонента. На відміну від `props`, `state` є приватним і повністю контролюється компонентом, який його володіє. Зміна стану призводить до повторного рендерингу компонента та його дочірніх елементів. \n**Доступ до state:** \n- **Компонент-клас**: Доступ через `this.state`. Наприклад: `this.state.count` \n- **Компонент-функція (з хуками)**: Доступ через повернене значення `useState` хука. Наприклад: `const [count, setCount] = useState(0); // count` \n**Зміна state:** \n- **Компонент-клас**: Зміна здійснюється за допомогою методу `this.setState()`. Наприклад: `this.setState({ count: this.state.count + 1 });`. `setState` є асинхронним і об'єднує зміни. \n- **Компонент-функція (з хуками)**: Зміна здійснюється за допомогою функції-сеттера, поверненої `useState`. Наприклад: `setCount(count + 1);`. Ця функція також є асинхронною.",
    "additionalQuestions": [
      {
        "id": "react-q8-aq1",
        "question": "Чи є зміна стану в React синхронною чи асинхронною?",
        "answer": "Зміна стану (`this.setState()` або функція-сеттер `useState`) є асинхронною. React групує кілька викликів `setState` для оптимізації продуктивності, тому не варто покладатися на миттєве оновлення `this.state` або значення стану після виклику `setState`."
      },
      {
        "id": "react-q8-aq2",
        "question": "Чому не можна змінювати стан напряму (наприклад, `this.state.count = 1`)?",
        "answer": "Пряма зміна стану не повідомить React про необхідність повторного рендерингу компонента, що призведе до розсинхронізації UI та стану. Завжди використовуйте `this.setState()` або функцію-сеттер від `useState`."
      },
      {
        "id": "react-q8-aq3",
        "question": "Як оновити стан, якщо нове значення залежить від попереднього?",
        "answer": "Для компонентів-класів передайте функцію в `setState`: `this.setState((prevState) => ({ count: prevState.count + 1 }));`. Для функціональних компонентів також передайте функцію в сеттер: `setCount((prevCount) => prevCount + 1);`. Це гарантує, що ви працюєте з найактуальнішим станом."
      }
    ]
  },
  {
    "id": "react-q9",
    "topic": "React",
    "mainQuestion": "Які є методи життєвого циклу React-компонента?",
    "mainAnswer": "Методи життєвого циклу (Lifecycle methods) — це спеціальні методи у компонентах-класах React, які викликаються в певні моменти їх існування: при створенні, оновленні або видаленні з DOM. Вони дозволяють виконувати код у відповідь на ці події. \n**Основні методи життєвого циклу (для класових компонентів, до появи хуків):** \n- **Монтування (Mounting - створення):** \n  - `constructor()`: Ініціалізація стану, прив'язка методів. \n  - `static getDerivedStateFromProps()`: Оновлення стану на основі props. \n  - `render()`: Рендеринг JSX. \n  - `componentDidMount()`: Викликається після першого рендерингу компонента в DOM. Ідеально для завантаження даних, підписок. \n- **Оновлення (Updating):** \n  - `static getDerivedStateFromProps()`: Знову ж таки, викликається при оновленні props/state. \n  - `shouldComponentUpdate()`: Для оптимізації, визначає, чи потрібно компоненту оновлюватися. \n  - `render()`: Повторний рендеринг JSX. \n  - `getSnapshotBeforeUpdate()`: Отримує знімок DOM перед його оновленням. \n  - `componentDidUpdate()`: Викликається після оновлення компонента. Добре для роботи з DOM після оновлення, або виконання побічних ефектів. \n- **Розмонтування (Unmounting - видалення):** \n  - `componentWillUnmount()`: Викликається безпосередньо перед видаленням компонента з DOM. Ідеально для очищення (відписка, скасування таймерів). \n- **Обробка помилок (Error Handling):** \n  - `static getDerivedStateFromError()`: Для рендерингу запасного UI після помилки. \n  - `componentDidCatch()`: Для логування інформації про помилку.",
    "additionalQuestions": [
      {
        "id": "react-q9-aq1",
        "question": "Які хуки у функціональних компонентах замінюють методи життєвого циклу класів?",
        "answer": "Хук `useEffect` може замінити `componentDidMount`, `componentDidUpdate` та `componentWillUnmount`. Хук `useState` замінює управління станом з `this.state` та `this.setState`."
      },
      {
        "id": "react-q9-aq2",
        "question": "Який метод життєвого циклу викликається найпершим при монтуванні компонента?",
        "answer": "`constructor()` викликається найпершим при створенні екземпляра компонента-класу."
      },
      {
        "id": "react-q9-aq3",
        "question": "Чи можна викликати `setState` у `render()`?",
        "answer": "Ні, категорично не можна викликати `setState` у методі `render()`. Це призведе до нескінченного циклу рендерингу, оскільки `setState` спричиняє повторний рендеринг, який знову викличе `setState`."
      }
    ]
  },
  {
    "id": "react-q10",
    "topic": "React",
    "mainQuestion": "Як користуватися методом `componentDidMount` і для чого він потрібен?",
    "mainAnswer": "`componentDidMount()` — це метод життєвого циклу компонента-класу, який викликається одразу після того, як компонент та всі його дочірні елементи були відрендерені та вставлені в DOM. \n**Для чого потрібен:** \n- **Завантаження даних (Data Fetching)**: Ідеальне місце для виконання HTTP-запитів до API, оскільки компонент вже знаходиться в DOM, і ви можете оновити його стан після отримання даних. \n- **Підписки**: Встановлення підписок на зовнішні джерела даних (наприклад, вебсокет). \n- **Маніпуляції з DOM**: Якщо вам потрібно отримати доступ до реального DOM-вузла після того, як він був відрендерений (наприклад, для інтеграції зі сторонніми бібліотеками, які працюють безпосередньо з DOM).",
    "additionalQuestions": [
      {
        "id": "react-q10-aq1",
        "question": "Який хук замінює `componentDidMount` у функціональних компонентах?",
        "answer": "Хук `useEffect` з порожнім масивом залежностей (`[]`) замінює `componentDidMount`. Код у ньому виконається лише один раз після першого рендерингу: `useEffect(() => { /* код тут */ }, []);`."
      },
      {
        "id": "react-q10-aq2",
        "question": "Чи можна викликати `setState` у `componentDidMount`?",
        "answer": "Так, можна викликати `setState` у `componentDidMount`. Це призведе до повторного рендерингу, але це є дозволеним, оскільки відбувається після початкового рендерингу і зазвичай використовується для встановлення початкових даних."
      },
      {
        "id": "react-q10-aq3",
        "question": "Що станеться, якщо `componentDidMount` поверне значення?",
        "answer": "`componentDidMount` (як і інші методи життєвого циклу, крім `render`) не очікує і не обробляє повернене значення. Будь-яке повернене значення буде проігноровано React."
      }
    ]
  },
  {
    "id": "react-q11",
    "topic": "React",
    "mainQuestion": "Як користуватися методом `componentDidUpdate` і для чого він потрібен?",
    "mainAnswer": "`componentDidUpdate(prevProps, prevState, snapshot)` — це метод життєвого циклу компонента-класу, який викликається одразу після того, як відбулося оновлення компонента (внаслідок зміни props або state). \n**Для чого потрібен:** \n- **Виконання побічних ефектів у відповідь на зміни props/state**: Наприклад, оновлення DOM залежно від нового стану, повторне завантаження даних, якщо змінився ID елемента, або взаємодія зі сторонніми бібліотеками. \n- **Важливо**: Завжди слід порівнювати `prevProps` та `prevState` з поточними `this.props` та `this.state` всередині цього методу, щоб уникнути нескінченних циклів рендерингу при виклику `this.setState()`.",
    "additionalQuestions": [
      {
        "id": "react-q11-aq1",
        "question": "Який хук замінює `componentDidUpdate` у функціональних компонентах?",
        "answer": "Хук `useEffect` з масивом залежностей, що містить змінні, за зміною яких потрібно стежити, замінює `componentDidUpdate`. Наприклад: `useEffect(() => { /* код тут */ }, [dependency1, dependency2]);`."
      },
      {
        "id": "react-q11-aq2",
        "question": "Які аргументи приймає `componentDidUpdate`?",
        "answer": "`componentDidUpdate` приймає три аргументи: `prevProps` (попередні props), `prevState` (попередній стан) та `snapshot` (значення, повернуте з `getSnapshotBeforeUpdate()`, якщо він використовується)."
      },
      {
        "id": "react-q11-aq3",
        "question": "Чому важливо порівнювати попередні та поточні props/state у `componentDidUpdate`?",
        "answer": "Це необхідно для запобігання нескінченним циклам. Якщо `setState` викликається всередині `componentDidUpdate` без умови порівняння, то кожне оновлення буде викликати нове оновлення, що призведе до зациклення."
      }
    ]
  },
  {
    "id": "react-q12",
    "topic": "React",
    "mainQuestion": "Як користуватися методом `componentWillUnmount` і для чого він потрібен?",
    "mainAnswer": "`componentWillUnmount()` — це метод життєвого циклу компонента-класу, який викликається безпосередньо перед тим, як компонент буде видалено з DOM та розмонтовано. \n**Для чого потрібен:** \n- **Очищення ресурсів**: Це останній шанс виконати будь-які операції очищення. \n- **Скасування підписок**: Відписка від подій (наприклад, `addEventListener`), вебсокетів, таймерів (наприклад, `clearInterval`, `clearTimeout`). \n- **Скасування мережевих запитів**: Скасування незавершених HTTP-запитів, щоб уникнути витоків пам'яті або встановлення стану на розмонтованому компоненті.",
    "additionalQuestions": [
      {
        "id": "react-q12-aq1",
        "question": "Який хук замінює `componentWillUnmount` у функціональних компонентах?",
        "answer": "Хук `useEffect` з функцією очищення, що повертається з колбека, замінює `componentWillUnmount`. Наприклад: `useEffect(() => { /* код для підписки */ return () => { /* код для відписки */ }; }, []);`."
      },
      {
        "id": "react-q12-aq2",
        "question": "Що станеться, якщо не очистити підписки або таймери в `componentWillUnmount`?",
        "answer": "Це може призвести до **витоків пам'яті** та непередбачуваної поведінки. Навіть після видалення компонента, колбеки підписок або таймерів можуть продовжувати виконуватися, намагаючись оновити стан неіснуючого компонента, що може спричинити помилки."
      },
      {
        "id": "react-q12-aq3",
        "question": "Чи можна викликати `setState` у `componentWillUnmount`?",
        "answer": "Ні, не варто викликати `setState` у `componentWillUnmount`. Компонент вже знаходиться на етапі розмонтування, і будь-які зміни стану не будуть мати ефекту на UI, а лише викличуть попередження React про використання `setState` на розмонтованому компоненті."
      }
    ]
  },
  {
    "id": "react-q13",
    "topic": "React",
    "mainQuestion": "Як можна навісити подію на JSX-компонент? Чи можна навішувати події на компоненти?",
    "mainAnswer": "У React події навішуються на JSX-елементи (наприклад, `<div>`, `<button>`) за допомогою **camelCase-атрибутів**, які приймають функцію-обробник. \nПриклад: `<button onClick={handleClick}>Натисни мене</button>`. \n\n**Чи можна навішувати події на компоненти?** \nТак, можна, але це працює дещо інакше: \n- **На кастомні React-компоненти (наприклад, `<MyButton />`)**: Атрибут події, такий як `onClick`, який ви передаєте кастомному компоненту, буде переданий йому як `prop`. Цей `prop` має бути потім **явно переданий** (прокинутий) до реального DOM-елемента всередині цього кастомного компонента, щоб подія спрацювала. \nПриклад: \n```jsx \nfunction MyButton({ onClick, children }) { \n  return <button onClick={onClick}>{children}</button>; \n} \n// Використання: \n<MyButton onClick={() => console.log('Клік')}>Мій Button</MyButton> \n``` \nЯкщо не прокинути `onClick` до внутрішнього `button`, подія не спрацює. \n- **На DOM-елементи**: Події навішуються напряму, як зазначено вище.",
    "additionalQuestions": [
      {
        "id": "react-q13-aq1",
        "question": "Яка різниця між `onClick` у React та `onclick` у чистому HTML?",
        "answer": "У React `onClick` — це JSX-атрибут у camelCase, який приймає функцію JavaScript. У HTML `onclick` — це атрибут, який приймає рядок з JavaScript-кодом. React-події також є синтетичними подіями, які обгортають нативні події браузера."
      },
      {
        "id": "react-q13-aq2",
        "question": "Що таке 'синтетичні події' (Synthetic Events) у React?",
        "answer": "Синтетичні події — це обгортка React навколо нативних подій браузера. Вони забезпечують кросбраузерну сумісність і мають однакову структуру, незалежно від браузера. Об'єкти синтетичних подій повторно використовуються React для оптимізації продуктивності, тому ви не повинні зберігати посилання на них або звертатися до них асинхронно."
      },
      {
        "id": "react-q13-aq3",
        "question": "Як передати аргументи в обробник подій у React?",
        "answer": "Найкращий спосіб — використовувати стрілкову функцію або `bind` у JSX: \n- Стрілкова функція: `<button onClick={() => handleClick(argument)}>` \n- `bind`: `<button onClick={this.handleClick.bind(this, argument)}>` (для класових компонентів)."
      }
    ]
  },
  {
    "id": "react-q14",
    "topic": "React",
    "mainQuestion": "Результат яких типів може повертати метод `render` (або компонент-функція)?",
    "mainAnswer": "Метод `render()` компонента-класу (або компонент-функція) може повертати наступні типи значень: \n1.  **JSX-елемент**: Найпоширеніший випадок, наприклад, `<div>Привіт</div>`. \n2.  **Масив або `React.Fragment`**: Дозволяє повертати кілька елементів без створення додаткового батьківського вузла в DOM. Наприклад, `[<p>1</p>, <p>2</p>]` або `<>...</>`. \n3.  **Портал (Portal)**: Дозволяє рендерити дочірні елементи в DOM-вузол, який знаходиться *поза* ієрархією батьківського компонента. \n4.  **`null`**: Якщо компонент не повинен нічого рендерити. \n5.  **Рядок або число**: Рендериться як текстовий вузол. \n6.  **Булеве значення (`true`/`false`)**: React ігнорує булеві значення, що дозволяє використовувати їх для умовного рендерингу, наприклад, `{isLoggedIn && <Profile />}`.",
    "additionalQuestions": [
      {
        "id": "react-q14-aq1",
        "question": "У яких випадках варто використовувати `React.Fragment` або `Short Syntax Fragments (<></>)`?",
        "answer": "`React.Fragment` (або `<>...</>`) варто використовувати, коли компонент має повернути кілька дочірніх елементів, але ви не хочете додавати зайвий `div` (або інший елемент) у DOM. Це допомагає підтримувати чисту структуру DOM, особливо для гнучких макетів (CSS Flexbox/Grid)."
      },
      {
        "id": "react-q14-aq2",
        "question": "Для чого потрібні React Portals?",
        "answer": "React Portals дозволяють рендерити дочірні елементи поза DOM-ієрархією батьківського компонента. Це корисно для модальних вікон, спливаючих меню, тултипів та інших елементів, які повинні 'вириватися' з поточного контексту DOM, але при цьому зберігати логіку та стан React-компонента."
      },
      {
        "id": "react-q14-aq3",
        "question": "Що буде, якщо `render` поверне `undefined`?",
        "answer": "Якщо метод `render` (або функція-компонент) поверне `undefined` замість `null`, React викине помилку, оскільки `undefined` не є допустимим поверненим значенням для рендерингу."
      }
    ]
  },
  {
    "id": "react-q15",
    "topic": "React",
    "mainQuestion": "У яких випадках потрібно присвоювати елементам та/або компонентам атрибут `key`? Яке значення слід присвоювати цьому атрибуту? Для чого він потрібен?",
    "mainAnswer": "`key` — це спеціальний строковий атрибут, який потрібно присвоювати елементам при рендерингу списків компонентів або елементів. \n**Коли потрібен:** Коли ви рендерите список елементів, отриманих з масиву (наприклад, за допомогою `map`). \n**Яке значення присвоювати:** `key` має бути **унікальним** серед своїх 'братів' (sibling elements) у цьому списку. Ідеально використовувати стабільний та унікальний ID з даних (наприклад, ID запису з бази даних). \n**Для чого потрібен:** React використовує `key` для ефективної ідентифікації елементів у списку та відстеження їхніх змін, додавання, видалення та перевпорядкування. Це дозволяє React оптимізувати оновлення DOM, повторно використовувати існуючі елементи замість перерендерингу всього списку, що значно покращує продуктивність при роботі з динамічними списками. Без `key` або з неоптимальним `key` (наприклад, індекс масиву при змінюваному порядку), React може некоректно оновлювати UI або мати проблеми з продуктивністю.",
    "additionalQuestions": [
      {
        "id": "react-q15-aq1",
        "question": "Чому використання індексу масиву як `key` є поганою практикою, якщо елементи списку можуть змінювати порядок?",
        "answer": "Якщо елементи списку змінюють порядок, а `key` є індексом, React може переплутати елементи. Це призведе до неправильних оновлень UI, проблем з внутрішнім станом компонента або неоптимального рендерингу, оскільки React вважатиме, що той самий елемент просто змінив вміст, замість того, щоб зрозуміти, що елемент перемістився."
      },
      {
        "id": "react-q15-aq2",
        "question": "Чи потрібно, щоб `key` був глобально унікальним?",
        "answer": "Ні, `key` має бути унікальним лише серед своїх 'братів' (sibling elements) у межах одного списку. Ви можете використовувати той самий `key` в іншому списку, якщо ці списки не є братами."
      },
      {
        "id": "react-q15-aq3",
        "question": "Чи передається `key` як `prop` до компонента?",
        "answer": "Ні, атрибут `key` є спеціальним атрибутом, який використовується React внутрішньо для оптимізації ідентифікації елементів. Він не доступний як `prop` у дочірньому компоненті."
      }
    ]
  }
]