[
  {
    "id": "sql-q01",
    "topic": "SQL",
    "mainQuestion": "Що таке SQL і для чого він використовується?",
    "mainAnswer": "SQL (Structured Query Language) – це стандартизована мова програмування, призначена для керування та маніпулювання реляційними базами даних. Вона використовується для створення, зміни та видалення баз даних, таблиць, а також для вибірки, вставки, оновлення та видалення даних.",
    "additionalQuestions": [
      {
        "id": "sql-q01-aq1",
        "question": "Які основні категорії команд SQL?",
        "answer": "Основні категорії команд SQL: DDL (Data Definition Language) – для визначення структури даних (CREATE, ALTER, DROP); DML (Data Manipulation Language) – для маніпуляції даними (SELECT, INSERT, UPDATE, DELETE); DCL (Data Control Language) – для керування доступом (GRANT, REVOKE); TCL (Transaction Control Language) – для управління транзакціями (COMMIT, ROLLBACK, SAVEPOINT)."
      },
      {
        "id": "sql-q01-aq2",
        "question": "Назвіть кілька популярних реляційних систем управління базами даних (СУБД).",
        "answer": "Популярні СУБД включають MySQL, PostgreSQL, Oracle Database, Microsoft SQL Server, SQLite."
      },
      {
        "id": "sql-q01-aq3",
        "question": "Яка різниця між SQL та NoSQL?",
        "answer": "SQL (реляційні) бази даних мають фіксовану схему, зберігають дані у таблицях з рядками та стовпцями, використовують SQL для запитів та забезпечують ACID-властивості. NoSQL (нереляційні) бази даних мають гнучку схему, зберігають дані у різних форматах (документи, ключ-значення, графіки), не завжди використовують SQL та пропонують BASE-властивості для масштабованості та доступності."
      }
    ]
  },
  {
    "id": "sql-q02",
    "topic": "SQL",
    "mainQuestion": "Поясніть, що таке PRIMARY KEY та FOREIGN KEY.",
    "mainAnswer": "PRIMARY KEY (первинний ключ) – це унікальний ідентифікатор для кожного запису (рядка) в таблиці. Він гарантує унікальність і не допускає значення NULL. FOREIGN KEY (зовнішній ключ) – це стовпець або набір стовпців в одній таблиці, що посилається на PRIMARY KEY в іншій таблиці, встановлюючи зв'язок між ними та забезпечуючи цілісність даних.",
    "additionalQuestions": [
      {
        "id": "sql-q02-aq1",
        "question": "Які властивості має PRIMARY KEY?",
        "answer": "PRIMARY KEY повинен бути унікальним для кожного рядка в таблиці і не може містити значення NULL. Таблиця може мати лише один PRIMARY KEY."
      },
      {
        "id": "sql-q02-aq2",
        "question": "Для чого використовується FOREIGN KEY?",
        "answer": "FOREIGN KEY використовується для встановлення зв'язків між таблицями та підтримки рефераційної цілісності даних, тобто гарантує, що посилання на дані в іншій таблиці є дійсними."
      },
      {
        "id": "sql-q02-aq3",
        "question": "Чи може таблиця мати кілька FOREIGN KEY?",
        "answer": "Так, таблиця може мати багато FOREIGN KEY, які посилаються на первинні ключі різних таблиць або навіть на той самий первинний ключ іншої таблиці."
      }
    ]
  },
  {
    "id": "sql-q03",
    "topic": "SQL",
    "mainQuestion": "Опишіть різні типи JOIN у SQL.",
    "mainAnswer": "JOIN у SQL використовується для об'єднання рядків з двох або більше таблиць на основі пов'язаного стовпця між ними. Основними типами є: INNER JOIN (повертає тільки ті рядки, які мають збіги в обох таблицях), LEFT (OUTER) JOIN (повертає всі рядки з лівої таблиці і збіги з правої), RIGHT (OUTER) JOIN (повертає всі рядки з правої таблиці і збіги з лівої), та FULL (OUTER) JOIN (повертає всі рядки, коли є збіг у будь-якій з таблиць).",
    "additionalQuestions": [
      {
        "id": "sql-q03-aq1",
        "question": "Наведіть синтаксис INNER JOIN.",
        "answer": "```sql\nSELECT columns\nFROM TableA\nINNER JOIN TableB\nON TableA.common_column = TableB.common_column;\n```"
      },
      {
        "id": "sql-q03-aq2",
        "question": "Коли варто використовувати LEFT JOIN?",
        "answer": "LEFT JOIN варто використовувати, коли потрібно отримати всі записи з 'лівої' таблиці (першої в операції JOIN), незалежно від того, чи є для них відповідні записи в 'правій' таблиці. Якщо відповідних записів немає, стовпці з правої таблиці будуть NULL."
      },
      {
        "id": "sql-q03-aq3",
        "question": "Чим відрізняється CROSS JOIN від інших JOIN?",
        "answer": "CROSS JOIN створює декартовий добуток двох таблиць, тобто поєднує кожен рядок з першої таблиці з кожним рядком з другої таблиці, без умови об'єднання. Це може призвести до дуже великих наборів результатів і рідко використовується в реальних сценаріях, крім генерації комбінацій."
      }
    ]
  },
  {
    "id": "sql-q04",
    "topic": "SQL",
    "mainQuestion": "Що таке індекси у базах даних і для чого вони потрібні?",
    "mainAnswer": "Індекси – це спеціальні пошукові таблиці, що створюються в базах даних для прискорення операцій вибірки даних. Вони працюють подібно до індексу в книзі, дозволяючи СУБД швидко знаходити необхідні рядки без сканування всієї таблиці. Індекси покращують продуктивність читання, але можуть уповільнювати операції запису (INSERT, UPDATE, DELETE).",
    "additionalQuestions": [
      {
        "id": "sql-q04-aq1",
        "question": "Які типи індексів існують?",
        "answer": "Існують різні типи, включаючи: Clustered Index (визначає фізичний порядок зберігання даних у таблиці, одна таблиця може мати лише один), Non-Clustered Index (логічний порядок, вказує на розташування даних, таблиця може мати багато), Unique Index (забезпечує унікальність значень у стовпці/стовпцях)."
      },
      {
        "id": "sql-q04-aq2",
        "question": "Коли варто створювати індекси?",
        "answer": "Індекси варто створювати на стовпцях, які часто використовуються в умовах `WHERE`, `JOIN`, `ORDER BY` або `GROUP BY` clause, особливо для великих таблиць."
      },
      {
        "id": "sql-q04-aq3",
        "question": "Які недоліки використання індексів?",
        "answer": "Індекси займають місце на диску, а також уповільнюють операції INSERT, UPDATE та DELETE, оскільки при кожній зміні даних індекс також потрібно оновлювати. Занадто багато індексів може негативно вплинути на продуктивність запису."
      }
    ]
  },
  {
    "id": "sql-q05",
    "topic": "SQL",
    "mainQuestion": "Поясніть концепцію нормалізації баз даних.",
    "mainAnswer": "Нормалізація – це процес організації даних у базі даних для зменшення надмірності даних та покращення цілісності даних. Вона передбачає розбиття великих таблиць на менші, пов'язані таблиці, дотримуючись певних нормальних форм (NF).",
    "additionalQuestions": [
      {
        "id": "sql-q05-aq1",
        "question": "Які існують нормальні форми (Normal Forms)?",
        "answer": "Найпоширеніші нормальні форми: 1NF (перша нормальна форма), 2NF (друга нормальна форма), 3NF (третя нормальна форма) та BCNF (нормальна форма Бойса-Кодда). Є й вищі форми, але вони використовуються рідше."
      },
      {
        "id": "sql-q05-aq2",
        "question": "Яка головна мета нормалізації?",
        "answer": "Головна мета нормалізації – мінімізувати надмірність даних (дублювання), уникнути аномалій оновлення, вставки та видалення, та забезпечити логічну цілісність даних."
      },
      {
        "id": "sql-q05-aq3",
        "question": "Що таке денормалізація і коли її використовують?",
        "answer": "Денормалізація – це процес навмисного додавання надмірності даних до таблиці для покращення продуктивності запитів, особливо у великих системах, де швидкість читання даних критично важлива, а операції запису не настільки часті. Вона застосовується після нормалізації."
      }
    ]
  },
  {
    "id": "sql-q06",
    "topic": "SQL",
    "mainQuestion": "Що таке транзакції в SQL і які їхні властивості?",
    "mainAnswer": "Транзакція – це послідовність операцій, яка розглядається як єдиний логічний блок роботи. Всі операції в транзакції повинні бути або повністю успішними (commit), або повністю відміненими (rollback). Транзакції забезпечують цілісність даних через властивості ACID: Atomicity (Атомарність), Consistency (Узгодженість), Isolation (Ізольованість), Durability (Надійність).",
    "additionalQuestions": [
      {
        "id": "sql-q06-aq1",
        "question": "Поясніть властивість Atomicity (Атомарність).",
        "answer": "Атомарність означає, що транзакція повинна бути виконана повністю або не виконана взагалі. Якщо будь-яка частина транзакції не вдається, вся транзакція скасовується, і база даних повертається до свого попереднього стану."
      },
      {
        "id": "sql-q06-aq2",
        "question": "Поясніть властивість Isolation (Ізольованість).",
        "answer": "Ізольованість означає, що паралельні транзакції повинні виконуватися таким чином, щоб результат виглядав так, ніби вони виконувались послідовно. Це запобігає впливу однієї транзакції на іншу до її повного завершення."
      },
      {
        "id": "sql-q06-aq3",
        "question": "Наведіть приклад використання транзакцій.",
        "answer": "Типовий приклад – переказ грошей між банківськими рахунками. Це включає дві операції: віднімання грошей з одного рахунку та додавання на інший. Ці дві операції повинні бути виконані як одна атомарна одиниця: або обидві успішні, або жодна з них, щоб зберегти цілісність балансів."
      }
    ]
  },
  {
    "id": "sql-q07",
    "topic": "SQL",
    "mainQuestion": "Що таке агрегатні функції в SQL і назвіть декілька прикладів.",
    "mainAnswer": "Агрегатні функції в SQL виконують обчислення над набором рядків і повертають одне значення. Вони часто використовуються з clause `GROUP BY`. Приклади: `COUNT()` (рахує кількість рядків), `SUM()` (сумує значення), `AVG()` (обчислює середнє), `MIN()` (знаходить мінімальне значення), `MAX()` (знаходить максимальне значення).",
    "additionalQuestions": [
      {
        "id": "sql-q07-aq1",
        "question": "Для чого використовується clause `GROUP BY`?",
        "answer": "Clause `GROUP BY` використовується для групування рядків, які мають однакові значення в одному або кількох стовпцях, у резюмуючі рядки. Агрегатні функції потім застосовуються до кожної групи окремо."
      },
      {
        "id": "sql-q07-aq2",
        "question": "Яка різниця між `WHERE` та `HAVING`?",
        "answer": "`WHERE` використовується для фільтрації рядків до того, як вони будуть згруповані (`GROUP BY`). `HAVING` використовується для фільтрації груп, створених за допомогою `GROUP BY`, застосовуючи умови до агрегатних функцій."
      },
      {
        "id": "sql-q07-aq3",
        "question": "Чи можна використовувати агрегатні функції без `GROUP BY`?",
        "answer": "Так, можна. Якщо агрегатні функції використовуються без `GROUP BY`, вони застосовуються до всього набору результатів запиту, і повертається одне результуюче значення для всього запиту."
      }
    ]
  },
  {
    "id": "sql-q08",
    "topic": "SQL",
    "mainQuestion": "Що таке підзапити (Subqueries) у SQL?",
    "mainAnswer": "Підзапит (або внутрішній запит) – це запит SELECT, вкладений в інший SQL-запит (SELECT, INSERT, UPDATE, DELETE). Він може бути використаний там, де вичікується одне значення, список значень, або ціла таблиця. Результат підзапиту використовується батьківським запитом.",
    "additionalQuestions": [
      {
        "id": "sql-q08-aq1",
        "question": "Які типи підзапитів існують?",
        "answer": "Підзапити можуть бути: скалярні (повертають одне значення), рядкові (повертають один рядок), табличні (повертають таблицю з кількома рядками і стовпцями), та корельовані (виконуються для кожного рядка зовнішнього запиту)."
      },
      {
        "id": "sql-q08-aq2",
        "question": "Наведіть приклад використання підзапиту в `WHERE` clause.",
        "answer": "```sql\nSELECT ProductName\nFROM Products\nWHERE Price > (SELECT AVG(Price) FROM Products);\n```"
      },
      {
        "id": "sql-q08-aq3",
        "question": "Коли варто використовувати підзапити замість JOIN?",
        "answer": "Підзапити часто використовуються, коли потрібно відфільтрувати дані на основі результатів іншого запиту, або коли потрібен 'фактичний' результат для умови. Для об'єднання таблиць зазвичай краще використовувати JOIN з точки зору продуктивності та читабельності, якщо не потрібна агрегація на підзапиті."
      }
    ]
  },
  {
    "id": "sql-q09",
    "topic": "SQL",
    "mainQuestion": "Які відмінності між `DELETE`, `TRUNCATE` та `DROP`?",
    "mainAnswer": "`DELETE` видаляє рядки з таблиці. Це операція DML, яку можна відкотити (ROLLBACK). Вона повільніша, оскільки записує кожне видалення в лог транзакцій. `TRUNCATE` видаляє всі рядки з таблиці, але зберігає її структуру. Це операція DDL, яка не може бути відкочена і працює швидше, оскільки не записує видалення окремих рядків. `DROP` видаляє всю таблицю (і її дані, і структуру) з бази даних. Це також DDL операція, яку не можна відкотити.",
    "additionalQuestions": [
      {
        "id": "sql-q09-aq1",
        "question": "Яка команда швидша: `DELETE` чи `TRUNCATE`?",
        "answer": "`TRUNCATE` зазвичай значно швидша, ніж `DELETE`, оскільки вона не сканує кожен рядок для видалення та не записує кожну операцію видалення в лог транзакцій. Вона просто деалокує сторінки даних, зайняті таблицею."
      },
      {
        "id": "sql-q09-aq2",
        "question": "Чи можна використовувати `WHERE` clause з `TRUNCATE`?",
        "answer": "Ні, `TRUNCATE` не дозволяє використовувати `WHERE` clause. Вона видаляє всі рядки таблиці. Якщо потрібна умова, слід використовувати `DELETE`."
      },
      {
        "id": "sql-q09-aq3",
        "question": "Що станеться з індексами при використанні `DROP TABLE`?",
        "answer": "При використанні `DROP TABLE` разом з таблицею будуть видалені всі пов'язані з нею індекси, обмеження та тригери."
      }
    ]
  },
  {
    "id": "sql-q10",
    "topic": "SQL",
    "mainQuestion": "Що таке VIEW у SQL і для чого він використовується?",
    "mainAnswer": "VIEW (представлення) – це віртуальна таблиця, яка базується на результаті запиту SQL. Вона не зберігає дані фізично, а лише їх визначення (запит). VIEW використовується для спрощення складних запитів, обмеження доступу до певних стовпців або рядків, та для забезпечення абстракції над базовими таблицями.",
    "additionalQuestions": [
      {
        "id": "sql-q10-aq1",
        "question": "Які переваги використання VIEW?",
        "answer": "Переваги включають: спрощення складних запитів, підвищення безпеки (приховання чутливих даних), забезпечення незалежності даних (зміна базової таблиці може не впливати на VIEW, якщо збережена структура), та можливість надання агрегованих або відфільтрованих даних."
      },
      {
        "id": "sql-q10-aq2",
        "question": "Чи можна оновлювати дані через VIEW?",
        "answer": "Так, деякі VIEW є оновлюваними. Це залежить від складності VIEW (наприклад, не можна оновлювати VIEW, що містять JOIN, агрегатні функції або DISTINCT). В інших випадках зміни через VIEW можуть оновлювати базові таблиці."
      },
      {
        "id": "sql-q10-aq3",
        "question": "У чому різниця між VIEW та звичайною таблицею?",
        "answer": "Звичайна таблиця фізично зберігає дані, тоді як VIEW – це лише збережений запит, який генерує дані динамічно щоразу, коли до нього звертаються. VIEW не займає місця для зберігання даних, лише для свого визначення."
      }
    ]
  },
  {
    "id": "sql-q11",
    "topic": "SQL",
    "mainQuestion": "Що таке STORED PROCEDURE у SQL?",
    "mainAnswer": "Stored Procedure (зберігана процедура) – це набір операцій SQL, які зберігаються в базі даних і можуть бути виконані як єдиний блок. Вони дозволяють інкапсулювати складну бізнес-логіку, підвищують продуктивність за рахунок попередньої компіляції та зменшують мережевий трафік, оскільки для виконання багатьох операцій достатньо одного виклику.",
    "additionalQuestions": [
      {
        "id": "sql-q11-aq1",
        "question": "Які переваги використання Stored Procedures?",
        "answer": "Переваги: підвищена продуктивність (попередня компіляція), зменшення мережевого трафіку, повторне використання коду, підвищена безпека (доступ до даних через процедури), централізація логіки на рівні БД."
      },
      {
        "id": "sql-q11-aq2",
        "question": "Які недоліки використання Stored Procedures?",
        "answer": "Недоліки: складність керування версіями та тестування, прив'язка до конкретної СУБД (непортируємість), відсутність деяких можливостей високорівневих мов програмування, потенційна складність відлагодження."
      },
      {
        "id": "sql-q11-aq3",
        "question": "Чим відрізняються Stored Procedure від Function у SQL?",
        "answer": "Stored Procedure може виконувати DML (INSERT, UPDATE, DELETE) та DDL операції, не може бути використана в запитах як вираз і може не повертати значення (або повертати кілька). Function повертає одне значення (скалярну або табличну), може бути використана в запитах (наприклад, у SELECT або WHERE) і не може виконувати DML/DDL операції, лише читати дані."
      }
    ]
  },
  {
    "id": "sql-q12",
    "topic": "SQL",
    "mainQuestion": "Що таке TRIGGER у SQL?",
    "mainAnswer": "Trigger (тригер) – це спеціальний тип збереженої процедури, який автоматично виконується (спрацьовує) у відповідь на певну подію (INSERT, UPDATE, DELETE) над таблицею в базі даних. Тригери використовуються для забезпечення цілісності даних, аудиту, автоматичного оновлення інших таблиць тощо.",
    "additionalQuestions": [
      {
        "id": "sql-q12-aq1",
        "question": "Коли спрацьовує тригер: BEFORE чи AFTER події?",
        "answer": "Тригери можуть спрацьовувати як BEFORE (до) події, так і AFTER (після) події. BEFORE-тригери дозволяють модифікувати дані до їхнього збереження, AFTER-тригери – реагувати на вже змінені дані."
      },
      {
        "id": "sql-q12-aq2",
        "question": "Які типові сценарії використання тригерів?",
        "answer": "Типові сценарії: ведення журналу змін (аудит), автоматичне оновлення пов'язаних полів (наприклад, сума замовлення), забезпечення складної цілісності даних, яка не може бути реалізована обмеженнями (constraints)."
      },
      {
        "id": "sql-q12-aq3",
        "question": "Чи можуть тригери уповільнювати продуктивність?",
        "answer": "Так, тригери можуть уповільнювати продуктивність, оскільки вони додають додаткові операції, які виконуються під час INSERT, UPDATE або DELETE. Якщо логіка тригера складна або тригер викликає інші тригери, це може призвести до значного уповільнення."
      }
    ]
  },
  {
    "id": "sql-q13",
    "topic": "SQL",
    "mainQuestion": "Що таке ін'єкції SQL (SQL Injection) і як їх запобігти?",
    "mainAnswer": "SQL Injection – це тип атаки, за якого зловмисник вводить або 'ін'єктує' шкідливий SQL-код у вхідні дані додатка, щоб маніпулювати запитами до бази даних. Це може призвести до несанкціонованого доступу, витоку даних, зміни або видалення інформації. Запобігання включає використання параметризованих запитів (prepared statements), екранування спеціальних символів та валідацію вхідних даних.",
    "additionalQuestions": [
      {
        "id": "sql-q13-aq1",
        "question": "Наведіть приклад SQL Injection.",
        "answer": "Якщо запит формується як `SELECT * FROM users WHERE username = '\" + username + \"' AND password = '\" + password + \"'`, а зловмисник вводить `username = 'admin'--` та будь-який пароль, то `--` коментує решту запиту, і зловмисник входить як admin."
      },
      {
        "id": "sql-q13-aq2",
        "question": "Що таке Prepared Statements (Параметризовані запити)?",
        "answer": "Prepared Statement – це метод підготовки SQL-запиту, де місця для вхідних даних позначаються заповнювачами (плейсхолдерами). Потім дані передаються окремо, і СУБД обробляє їх як літерали, а не як частину SQL-коду, що повністю усуває ризик SQL-ін'єкцій."
      },
      {
        "id": "sql-q13-aq3",
        "question": "Які ще заходи безпеки допоможуть захистити базу даних?",
        "answer": "Крім запобігання SQL Injection: використання принципів найменших привілеїв для користувачів БД, шифрування конфіденційних даних, регулярні аудити та оновлення ПЗ, моніторинг активності БД, резервне копіювання."
      }
    ]
  },
  {
    "id": "sql-q14",
    "topic": "SQL",
    "mainQuestion": "Що таке DDL та DML команди у SQL?",
    "mainAnswer": "DDL (Data Definition Language) – це підмножина SQL, яка використовується для визначення та керування структурою бази даних. Приклади: `CREATE` (створення), `ALTER` (зміна), `DROP` (видалення). DML (Data Manipulation Language) – це підмножина SQL, яка використовується для маніпуляції даними всередині таблиць. Приклади: `SELECT` (вибірка), `INSERT` (вставка), `UPDATE` (оновлення), `DELETE` (видалення).",
    "additionalQuestions": [
      {
        "id": "sql-q14-aq1",
        "question": "Чи можна відкотити DDL операції?",
        "answer": "Зазвичай DDL операції неможливо відкотити (`ROLLBACK`), оскільки вони модифікують схему бази даних. Однак деякі СУБД можуть мати механізми для відкату DDL у певних сценаріях, але це не є стандартною поведінкою."
      },
      {
        "id": "sql-q14-aq2",
        "question": "Наведіть приклад команди DDL.",
        "answer": "```sql\nCREATE TABLE Employees (\n    EmployeeID INT PRIMARY KEY,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50)\n);\n```"
      },
      {
        "id": "sql-q14-aq3",
        "question": "Наведіть приклад команди DML.",
        "answer": "```sql\nINSERT INTO Employees (EmployeeID, FirstName, LastName)\nVALUES (1, 'Іван', 'Петренко');\n\nUPDATE Employees\nSET FirstName = 'Олександр'\nWHERE EmployeeID = 1;\n```"
      }
    ]
  },
  {
    "id": "sql-q15",
    "topic": "SQL",
    "mainQuestion": "Поясніть, що таке обмеження (Constraints) у SQL.",
    "mainAnswer": "Обмеження (Constraints) – це правила, що застосовуються до стовпців у таблиці бази даних для обмеження типу даних, які можуть бути вставлені або оновлені. Вони забезпечують точність, надійність та цілісність даних. Приклади: `NOT NULL`, `UNIQUE`, `PRIMARY KEY`, `FOREIGN KEY`, `CHECK`, `DEFAULT`.",
    "additionalQuestions": [
      {
        "id": "sql-q15-aq1",
        "question": "Що робить обмеження `NOT NULL`?",
        "answer": "`NOT NULL` гарантує, що стовпець не може містити значення NULL. Тобто, кожний запис у цьому стовпці повинен мати певне значення."
      },
      {
        "id": "sql-q15-aq2",
        "question": "У чому різниця між `UNIQUE` та `PRIMARY KEY`?",
        "answer": "`UNIQUE` гарантує, що всі значення в стовпці є унікальними, але може містити одне значення NULL (якщо не вказано `NOT NULL`). Таблиця може мати кілька `UNIQUE` обмежень. `PRIMARY KEY` також гарантує унікальність, але не може містити NULL значень, і таблиця може мати лише один `PRIMARY KEY`."
      },
      {
        "id": "sql-q15-aq3",
        "question": "Що робить обмеження `CHECK`?",
        "answer": "`CHECK` обмеження використовується для встановлення діапазону значень, які дозволені в стовпці. Воно перевіряє, чи відповідає значення стовпця заданій умові, перш ніж дозволити вставку або оновлення."
      }
    ]
  }
]