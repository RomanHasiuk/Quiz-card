[
  {
    "id": "web_014",
    "topic": "Web",
    "mainQuestion": "Що таке Shadow DOM?",
    "mainAnswer": "**Shadow DOM** – це одна з трьох ключових технологій Web Components (разом з Custom Elements та HTML Templates). Вона дозволяє інкапсулювати дерево DOM та стилі (CSS) елемента, створюючи 'тіньовий' DOM-піддерево, яке ізольоване від основного документа. Це запобігає конфліктам стилів та забезпечує незалежність компонента.",
    "additionalQuestions": [
      {
        "id": "web_014_1",
        "question": "Для чого використовується Shadow DOM?",
        "answer": "Він використовується для створення інкапсульованих, повторно використовуваних веб-компонентів, де внутрішні деталі реалізації (розмітка, стилі) приховані від зовнішнього світу та не впливають на основний DOM."
      },
      {
        "id": "web_014_2",
        "question": "Які переваги Shadow DOM?",
        "answer": "Основні переваги: **ізоляція CSS** (стилі в Shadow DOM не витікають назовні, а зовнішні стилі не впливають на нього) та **ізоляція DOM** (внутрішня структура елемента не доступна напряму з основного DOM)."
      },
      {
        "id": "web_014_3",
        "question": "Як створити Shadow DOM?",
        "answer": "Shadow DOM створюється за допомогою методу `attachShadow()` на елементі DOM (наприклад, `element.attachShadow({ mode: 'open' });`). Режим 'open' дозволяє доступ до тіньового кореня з JavaScript, 'closed' – забороняє."
      }
    ]
  },
  {
    "id": "web_015",
    "topic": "Web",
    "mainQuestion": "Що таке AJAX?",
    "mainAnswer": "**AJAX** (Asynchronous JavaScript and XML) – це набір веб-технологій, які дозволяють веб-сторінкам асинхронно обмінюватися даними з сервером, без необхідності перезавантаження всієї сторінки. Це покращує взаємодію з користувачем, роблячи веб-додатки більш динамічними та чуйними.",
    "additionalQuestions": [
      {
        "id": "web_015_1",
        "question": "Які основні компоненти AJAX?",
        "answer": "Основними компонентами є JavaScript для керування логікою та `XMLHttpRequest` (або сучасний `Fetch API`) для надсилання HTTP-запитів до сервера. Також використовуються DOM для оновлення вмісту сторінки та JSON (раніше XML) для формату обміну даними."
      },
      {
        "id": "web_015_2",
        "question": "Які переваги використання AJAX?",
        "answer": "Покращення користувацького досвіду (відсутність перезавантаження сторінки), зменшення навантаження на сервер (передаються лише необхідні дані), швидший час відгуку, можливість створення більш інтерактивних інтерфейсів."
      },
      {
        "id": "web_015_3",
        "question": "Чи завжди AJAX використовує XML?",
        "answer": "Ні. Хоча в назві є 'XML', на практиці набагато частіше використовується **JSON** як формат обміну даними через його легкість та простоту парсингу в JavaScript."
      }
    ]
  },
  {
    "id": "web_016",
    "topic": "Web",
    "mainQuestion": "Що таке HTTP та HTTPS?",
    "mainAnswer": "**HTTP** (HyperText Transfer Protocol) – це протокол прикладного рівня для передачі даних у Всесвітній павутині. **HTTPS** (HyperText Transfer Protocol Secure) – це безпечна версія HTTP, яка використовує SSL/TLS шифрування для захисту даних, що передаються між клієнтом і сервером.",
    "additionalQuestions": [
      {
        "id": "web_016_1",
        "question": "Яка головна відмінність між HTTP та HTTPS?",
        "answer": "Головна відмінність полягає в безпеці. HTTPS шифрує дані, що передаються, забезпечуючи конфіденційність, цілісність та автентифікацію, тоді як HTTP передає дані у відкритому вигляді."
      },
      {
        "id": "web_016_2",
        "question": "Які порти за замовчуванням використовуються для HTTP та HTTPS?",
        "answer": "За замовчуванням HTTP використовує порт **80**, а HTTPS – порт **443**."
      },
      {
        "id": "web_016_3",
        "question": "Що таке SSL/TLS?",
        "answer": "**SSL** (Secure Sockets Layer) та його наступник **TLS** (Transport Layer Security) – це криптографічні протоколи, які забезпечують безпечний зв'язок через комп'ютерну мережу, шифруючи дані та автентифікуючи сторони."
      }
    ]
  },
  {
    "id": "web_017",
    "topic": "Web",
    "mainQuestion": "Що таке request method? Назвіть деякі з поширених методів.",
    "mainAnswer": "**Request method** (або HTTP-метод) – це індикатор HTTP-запиту, який вказує бажану дію для ресурсу, визначеного URI. Він визначає тип операції, яку клієнт хоче виконати над ресурсом на сервері.",
    "additionalQuestions": [
      {
        "id": "web_017_1",
        "question": "Назвіть найпоширеніші HTTP-методи та їх призначення.",
        "answer": "**GET** (отримати ресурс), **POST** (створити ресурс або надіслати дані), **PUT** (повністю оновити ресурс), **DELETE** (видалити ресурс), **PATCH** (частково оновити ресурс), **HEAD** (отримати заголовки без тіла), **OPTIONS** (отримати дозволені методи)."
      },
      {
        "id": "web_017_2",
        "question": "Що означає 'ідемпотентний' метод?",
        "answer": "Ідемпотентний метод означає, що багаторазове виконання того ж запиту матиме той самий ефект на сервері, як і одноразове виконання. Наприклад, `GET`, `PUT`, `DELETE` є ідемпотентними."
      },
      {
        "id": "web_017_3",
        "question": "Що означає 'безпечний' метод?",
        "answer": "Безпечний метод означає, що він не змінює стан сервера. Наприклад, `GET` та `HEAD` є безпечними методами."
      }
    ]
  },
  {
    "id": "web_018",
    "topic": "Web",
    "mainQuestion": "Що таке домен та порт?",
    "mainAnswer": "**Домен** (доменне ім'я) – це легко запам'ятовувана адреса в інтернеті, яка замінює складні IP-адреси (наприклад, `google.com`). **Порт** – це логічний номер, який ідентифікує конкретний процес або застосунок на комп'ютері, через який відбувається мережеве з'єднання.",
    "additionalQuestions": [
      {
        "id": "web_018_1",
        "question": "Як домен та IP-адреса пов'язані?",
        "answer": "Доменне ім'я – це читабельне для людини представлення IP-адреси. DNS-сервери (Domain Name System) перетворюють доменні імена в IP-адреси, які використовуються для маршрутизації в інтернеті."
      },
      {
        "id": "web_018_2",
        "question": "Навіщо потрібні порти?",
        "answer": "Порти дозволяють декільком застосункам або службам на одному сервері одночасно використовувати мережеве з'єднання, направляючи вхідні пакети даних до правильного застосунку."
      },
      {
        "id": "web_018_3",
        "question": "Назвіть стандартні порти для веб-трафіку.",
        "answer": "Стандартний порт для HTTP – **80**, для HTTPS – **443**."
      }
    ]
  },
  {
    "id": "web_019",
    "topic": "Web",
    "mainQuestion": "Що таке заголовки? Назвіть кілька поширених.",
    "mainAnswer": "**Заголовки** (HTTP Headers) – це пари 'ім'я-значення', які передаються в HTTP-запитах та відповідях. Вони містять метадані про повідомлення, такі як тип контенту, довжина, кешування, авторизація, інформація про клієнта/сервер, допомагаючи сторонам правильно інтерпретувати та обробляти дані.",
    "additionalQuestions": [
      {
        "id": "web_019_1",
        "question": "Які є категорії HTTP-заголовків?",
        "answer": "Заголовки поділяються на: загальні (General Headers), заголовки запиту (Request Headers), заголовки відповіді (Response Headers) та заголовки сутності (Entity Headers)."
      },
      {
        "id": "web_019_2",
        "question": "Назвіть кілька поширених заголовків запиту.",
        "answer": "`User-Agent` (ідентифікує браузер/клієнт), `Accept` (типи медіа, які приймає клієнт), `Content-Type` (тип вмісту тіла запиту), `Authorization` (для автентифікації)."
      },
      {
        "id": "web_019_3",
        "question": "Назвіть кілька поширених заголовків відповіді.",
        "answer": "`Content-Type` (тип вмісту тіла відповіді), `Cache-Control` (інструкції кешування), `Set-Cookie` (встановлення кукі), `Location` (для перенаправлення)."
      }
    ]
  },
  {
    "id": "web_020",
    "topic": "Web",
    "mainQuestion": "Що таке response status code?",
    "mainAnswer": "**Response status code** (код стану відповіді HTTP) – це тризначне число, яке повертається сервером у відповідь на HTTP-запит клієнта. Він вказує на результат спроби запиту та надає інформацію про те, чи був запит успішним, чи сталася помилка, чи потрібна додаткова дія.",
    "additionalQuestions": [
      {
        "id": "web_020_1",
        "question": "Які існують категорії статусних кодів?",
        "answer": "Статусні коди поділяються на 5 категорій: **1xx** (інформаційні), **2xx** (успішні), **3xx** (перенаправлення), **4xx** (помилки клієнта), **5xx** (помилки сервера)."
      },
      {
        "id": "web_020_2",
        "question": "Назвіть кілька поширених статусних кодів.",
        "answer": "**200 OK** (успіх), **201 Created** (ресурс створено), **400 Bad Request** (некоректний запит), **404 Not Found** (ресурс не знайдено), **500 Internal Server Error** (внутрішня помилка сервера)."
      },
      {
        "id": "web_020_3",
        "question": "Коли використовується статус 301, а коли 302?",
        "answer": "**301 Moved Permanently** використовується для постійного перенаправлення (змінюється URL в закладках пошукових систем). **302 Found** (тимчасове перенаправлення) використовується для тимчасових перенаправлень, коли ресурс буде доступний за старим URL пізніше."
      }
    ]
  },
  {
    "id": "web_021",
    "topic": "Web",
    "mainQuestion": "Який потік взаємодії між клієнтом, сервером та базою даних?",
    "mainAnswer": "Потік взаємодії починається з **клієнта** (наприклад, веб-браузера), який надсилає **HTTP-запит** до **сервера**. Сервер приймає запит, обробляє його за допомогою бізнес-логіки. Якщо потрібно, сервер взаємодіє з **базою даних** (надсилає SQL-запити або використовує ORM) для отримання, зберігання або зміни даних. База даних повертає дані серверу, який, у свою чергу, формує **HTTP-відповідь** та відправляє її назад клієнту. Клієнт отримує відповідь та відображає дані користувачу.",
    "additionalQuestions": [
      {
        "id": "web_021_1",
        "question": "Які ролі клієнта, сервера та бази даних у цьому потоці?",
        "answer": "Клієнт ініціює запит та відображає результат. Сервер (бек-енд) обробляє запити, виконує бізнес-логіку та взаємодіє з базою даних. База даних зберігає та надає доступ до даних."
      },
      {
        "id": "web_021_2",
        "question": "Що може спричинити затримку у цьому потоці?",
        "answer": "Затримки можуть виникати через мережеву латентність, повільну обробку на сервері, неефективні запити до бази даних, великий обсяг даних у відповіді або повільний рендеринг на клієнті."
      },
      {
        "id": "web_021_3",
        "question": "Як забезпечується безпека у цьому потоці?",
        "answer": "Безпека забезпечується на різних рівнях: HTTPS для шифрування зв'язку, автентифікація та авторизація на сервері, захист від SQL-ін'єкцій та XSS-атак, а також належне керування доступом до бази даних."
      }
    ]
  },
  {
    "id": "web_022",
    "topic": "Web",
    "mainQuestion": "Опишіть механізм аутентифікації для взаємодії клієнт/сервер.",
    "mainAnswer": "Механізм **автентифікації** – це процес перевірки ідентичності користувача або системи. Для взаємодії клієнт/сервер він зазвичай включає надсилання облікових даних (наприклад, логіну та пароля) з клієнта на сервер. Сервер перевіряє ці дані. У разі успіху сервер видає токен (наприклад, сесійний кукі або JWT), який клієнт зберігає і відправляє з кожним наступним запитом для доведення своєї ідентичності без повторного введення облікових даних.",
    "additionalQuestions": [
      {
        "id": "web_022_1",
        "question": "Які поширені типи автентифікації?",
        "answer": "Найпоширеніші: автентифікація на основі сесій (з кукі), на основі токенів (JWT), OAuth 2.0 (для сторонніх застосунків), Basic Auth (для простих випадків), API-ключі."
      },
      {
        "id": "web_022_2",
        "question": "Як працює автентифікація на основі сесій?",
        "answer": "Після успішного входу сервер створює унікальний ідентифікатор сесії, зберігає його на сервері, а клієнту відправляє кукі з цим ідентифікатором. Браузер відправляє кукі з кожним наступним запитом, і сервер використовує його для ідентифікації користувача."
      },
      {
        "id": "web_022_3",
        "question": "Чому JWT популярний для API?",
        "answer": "JWT (JSON Web Tokens) є безстатевими (stateless), що робить їх ідеальними для масштабованих API та мікросервісів. Вони не вимагають зберігання стану сесії на сервері, а всю необхідну інформацію містять у собі (підписані, але не зашифровані)."
      }
    ]
  },
  {
    "id": "web_023",
    "topic": "Web",
    "mainQuestion": "Що таке REST API? Як він будується?",
    "mainAnswer": "**REST API** (Representational State Transfer Application Programming Interface) – це архітектурний стиль для розподілених систем, що використовує HTTP-протокол. Він базується на принципах, які дозволяють створювати масштабовані, гнучкі та ефективні веб-сервіси. REST API працює з ресурсами (наприклад, 'користувачі', 'продукти'), доступ до яких здійснюється через унікальні URL-адреси, а взаємодія відбувається за допомогою стандартних HTTP-методів.",
    "additionalQuestions": [
      {
        "id": "web_023_1",
        "question": "Які ключові принципи REST?",
        "answer": "1. **Клієнт-серверна архітектура:** Чітке розділення ролей. 2. **Безстатевість (Stateless):** Кожен запит від клієнта містить всю необхідну інформацію. 3. **Кешованість:** Відповіді можуть бути кешовані. 4. **Уніфікований інтерфейс:** Стандартні методи HTTP, ідентифікація ресурсів. 5. **Шари (Layered System):** Дозволяє проксі та балансувальники навантаження. 6. **Код на вимогу (Code-on-Demand):** Опціонально, дозволяє серверу розширювати функціонал клієнта через код."
      },
      {
        "id": "web_023_2",
        "question": "Як REST API працює з ресурсами?",
        "answer": "Ресурси ідентифікуються за допомогою URL (URI). Наприклад, `/users` може представляти колекцію користувачів, а `/users/123` – конкретного користувача з ID 123. HTTP-методи (`GET`, `POST`, `PUT`, `DELETE`) використовуються для виконання операцій над цими ресурсами."
      },
      {
        "id": "web_023_3",
        "question": "Які формати даних найчастіше використовуються в REST API?",
        "answer": "Найчастіше використовується **JSON** (JavaScript Object Notation) через його легкість, читабельність та простоту парсингу в JavaScript. Іноді також використовується XML."
      }
    ]
  },
  {
    "id": "web_024",
    "topic": "Web",
    "mainQuestion": "У чому різниця між PUT та PATCH?",
    "mainAnswer": "Обидва HTTP-методи, `PUT` та `PATCH`, використовуються для оновлення ресурсів на сервері, але вони відрізняються підходом: \n* **`PUT`**: Використовується для **повного оновлення** ресурсу. Клієнт надсилає повне представлення ресурсу, і сервер замінює існуючий ресурс цим новим представленням. Якщо ресурс не існує, `PUT` може створити його (ідемпотентно). \n* **`PATCH`**: Використовується для **часткового оновлення** ресурсу. Клієнт надсилає лише ті зміни, які необхідно внести в ресурс. Сервер застосовує ці зміни до існуючого ресурсу.",
    "additionalQuestions": [
      {
        "id": "web_024_1",
        "question": "Наведіть приклад використання PUT.",
        "answer": "Якщо у вас є ресурс користувача `{ 'id': 1, 'name': 'John', 'email': 'john@example.com' }`, і ви хочете змінити лише ім'я, з `PUT` вам все одно доведеться відправити весь об'єкт: `PUT /users/1 { 'id': 1, 'name': 'Jane', 'email': 'john@example.com' }`."
      },
      {
        "id": "web_024_2",
        "question": "Наведіть приклад використання PATCH.",
        "answer": "Для того ж користувача, щоб змінити лише ім'я за допомогою `PATCH`, ви відправите лише частину об'єкта: `PATCH /users/1 { 'name': 'Jane' }`."
      },
      {
        "id": "web_024_3",
        "question": "Який метод є ідемпотентним?",
        "answer": "**PUT** є ідемпотентним, оскільки багаторазові запити `PUT` з однаковим тілом призведуть до того ж стану ресурсу. **PATCH** не є ідемпотентним за визначенням, оскільки повторні запити `PATCH` можуть призвести до різних станів, якщо застосовується 'патч'."
      }
    ]
  },
  {
    "id": "web_025",
    "topic": "Web",
    "mainQuestion": "Поясніть CORS. Чому він існує?",
    "mainAnswer": "**CORS** (Cross-Origin Resource Sharing) – це механізм безпеки браузера, який дозволяє веб-сторінці робити запити до ресурсів іншого домену (відмінного від домену, з якого завантажено саму сторінку). Він існує для реалізації **політики єдиного джерела (Same-Origin Policy)**, яка за замовчуванням забороняє браузерам виконувати cross-origin запити з міркувань безпеки, щоб запобігти шкідливим діям (наприклад, викраденню даних або міжсайтовим атакам). CORS надає безпечний спосіб 'дозволити' такі міждоменні запити.",
    "additionalQuestions": [
      {
        "id": "web_025_1",
        "question": "Що таке Same-Origin Policy?",
        "answer": "Same-Origin Policy – це фундаментальна концепція безпеки у веб-браузерах, яка обмежує взаємодію скриптів, що завантажуються з одного 'джерела' (комбінація протоколу, домену та порту), з ресурсами іншого 'джерела'."
      },
      {
        "id": "web_025_2",
        "question": "Як сервер дозволяє CORS?",
        "answer": "Сервер надсилає спеціальні HTTP-заголовки у відповідь на cross-origin запити, зокрема `Access-Control-Allow-Origin`, який вказує, які домени дозволено запитувати його ресурси. Можуть бути також `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers` та інші."
      },
      {
        "id": "web_025_3",
        "question": "Що таке 'preflight request' в CORS?",
        "answer": "Це запит `OPTIONS`, який браузер автоматично відправляє перед певними 'складними' CORS-запитами (наприклад, з нестандартними заголовками або методами, крім `GET`/`POST` без певних `Content-Type`), щоб отримати дозвіл від сервера на виконання основного запиту."
      }
    ]
  },
  {
    "id": "web_026",
    "topic": "Web",
    "mainQuestion": "Поясніть модель OSI.",
    "mainAnswer": "**Модель OSI** (Open Systems Interconnection model) – це концептуальна архітектурна модель, яка стандартизує функції комунікаційної системи на сім логічно розділених шарів. Кожен шар моделі виконує певну роль і взаємодіє лише з безпосередньо вищим та нижчим шарами, забезпечуючи чітке розділення обов'язків у мережевій взаємодії. Вона допомагає зрозуміти, як різні мережеві технології співпрацюють.",
    "additionalQuestions": [
      {
        "id": "web_026_1",
        "question": "Назвіть сім шарів моделі OSI.",
        "answer": "Знизу догори: 1. Фізичний (Physical), 2. Канальний (Data Link), 3. Мережевий (Network), 4. Транспортний (Transport), 5. Сесійний (Session), 6. Представлення (Presentation), 7. Прикладний (Application)."
      },
      {
        "id": "web_026_2",
        "question": "Які функції виконує Мережевий шар?",
        "answer": "Мережевий шар (Layer 3) відповідає за логічну адресацію (IP-адреси), маршрутизацію пакетів через мережу та забезпечення міжмережевого зв'язку."
      },
      {
        "id": "web_026_3",
        "question": "Які функції виконує Транспортний шар?",
        "answer": "Транспортний шар (Layer 4) забезпечує наскрізну передачу даних між застосунками. Він відповідає за сегментацію даних, контроль потоку, виявлення та виправлення помилок, а також мультиплексування/демультиплексування (наприклад, TCP та UDP)."
      }
    ]
  }
]