[
  {
    "id": "js-q35",
    "topic": "JavaScript",
    "mainQuestion": "Для чого потрібна структура даних `Set`? Які методи вона реалізує?",
    "mainAnswer": "`Set` (множина) — це нова вбудована структура даних (ES6), яка дозволяє зберігати колекцію **унікальних значень будь-якого типу**. Вона автоматично видаляє дублікати. \n**Основні методи:** \n- **`new Set([iterable])`**: Створює нову множину. \n- **`set.add(value)`**: Додає нове значення. \n- **`set.delete(value)`**: Видаляє значення, повертає `true`, якщо елемент був у Set. \n- **`set.has(value)`**: Перевіряє наявність значення, повертає `true` або `false`. \n- **`set.clear()`**: Видаляє всі елементи. \n- **`set.size`**: Властивість, що повертає кількість елементів.",
    "additionalQuestions": [
      {
        "id": "js-q35-aq1",
        "question": "Як перетворити `Set` на `Array`?",
        "answer": "Можна використовувати `Array.from(mySet)` або spread-синтаксис `[...mySet]`."
      },
      {
        "id": "js-q35-aq2",
        "question": "Чи можна зберігати об'єкти в `Set`?",
        "answer": "Так, можна. Однак `Set` порівнює об'єкти за посиланням. Тобто, `{}` та `{}` будуть вважатися різними об'єктами, навіть якщо їхній вміст однаковий, оскільки вони є різними об'єктами в пам'яті."
      },
      {
        "id": "js-q35-aq3",
        "question": "Який сценарій використання `Set` є типовим?",
        "answer": "Видалення дублікатів з масиву, перевірка наявності елемента в колекції з високою ефективністю (якщо не потрібно зберігати порядок або індекси)."
      }
    ]
  },
  {
    "id": "js-q36",
    "topic": "JavaScript",
    "mainQuestion": "Для чого потрібна структура даних `Map`? Які методи вона реалізує?",
    "mainAnswer": "`Map` (карта/словник) — це нова вбудована структура даних (ES6), яка зберігає колекцію пар 'ключ-значення', де ключі можуть бути **будь-якого типу** (на відміну від звичайних об'єктів, де ключі є лише рядками або символами). Вона зберігає порядок вставки елементів. \n**Основні методи:** \n- **`new Map([iterable])`**: Створює нову карту. \n- **`map.set(key, value)`**: Додає або оновлює пару 'ключ-значення'. \n- **`map.get(key)`**: Повертає значення за ключем, або `undefined`, якщо ключ не знайдено. \n- **`map.has(key)`**: Перевіряє наявність ключа, повертає `true` або `false`. \n- **`map.delete(key)`**: Видаляє пару за ключем. \n- **`map.clear()`**: Видаляє всі пари. \n- **`map.size`**: Властивість, що повертає кількість пар.",
    "additionalQuestions": [
      {
        "id": "js-q36-aq1",
        "question": "У чому головна перевага `Map` над звичайними об'єктами для зберігання даних?",
        "answer": "Головна перевага полягає в тому, що `Map` дозволяє використовувати ключі будь-якого типу (включаючи об'єкти, функції, `NaN`), гарантує порядок вставки елементів і має кращу продуктивність для частих операцій додавання/видалення великих об'ємів даних."
      },
      {
        "id": "js-q36-aq2",
        "question": "Як ітерувати по елементах `Map`?",
        "answer": "Можна використовувати `for...of` цикл з `map.keys()`, `map.values()`, або `map.entries()`: \n`for (const [key, value] of myMap) { console.log(key, value); }`."
      },
      {
        "id": "js-q36-aq3",
        "question": "Чи можна використовувати об'єкти як ключі в `Map`?",
        "answer": "Так, це одна з ключових особливостей `Map`. Об'єкти як ключі порівнюються за посиланням, тобто `map.set({}, 'value1')` та `map.set({}, 'value2')` створять дві різні записи."
      }
    ]
  },
  {
    "id": "js-q37",
    "topic": "JavaScript",
    "mainQuestion": "Що таке `WeakSet` та `WeakMap` і чим вони відрізняються від їхніх 'сильних' аналогів?",
    "mainAnswer": "`WeakSet` та `WeakMap` (ES6) є 'слабкими' колекціями, що означає, що вони не створюють сильних посилань на свої елементи/ключі. \n- **`WeakSet`**: Колекція унікальних об'єктів. \n- **`WeakMap`**: Колекція пар 'ключ-значення', де ключі — це об'єкти, а значення можуть бути будь-якими. \n**Відмінність від 'сильних' (звичайних `Set`/`Map`)**: \n1. **Лише об'єкти**: `WeakSet` може зберігати лише об'єкти (не примітиви), а `WeakMap` може використовувати лише об'єкти як ключі. \n2. **'Слабкі' посилання**: Якщо на об'єкт, що зберігається у `WeakSet` або є ключем у `WeakMap`, більше немає сильних посилань, збирач сміття (garbage collector) може видалити цей об'єкт з пам'яті (і, відповідно, з колекції `WeakSet`/`WeakMap`), не чекаючи, поки ви його явно видалите. Це запобігає витокам пам'яті. \n3. **Не ітеровані**: Вони не ітеровані (не мають `size`, `clear()`, `keys()`, `values()`, `entries()`), тому неможливо отримати список всіх елементів або ключів. \n4. **Асинхронність**: Видалення елементів відбувається асинхронно і не детерміновано, тому не можна точно знати, коли об'єкт буде видалено.",
    "additionalQuestions": [
      {
        "id": "js-q37-aq1",
        "question": "Коли `WeakSet` або `WeakMap` можуть бути корисними?",
        "answer": "Вони корисні для зберігання метаданих або додаткової інформації, пов'язаної з об'єктами, без запобігання збору сміття цих об'єктів. Наприклад, для відстеження стану DOM-елементів або для приватних даних класів."
      },
      {
        "id": "js-q37-aq2",
        "question": "Чому `WeakSet` та `WeakMap` не ітеровані?",
        "answer": "Оскільки об'єкти можуть бути видалені збирачем сміття в будь-який момент, наявність ітерації або методу `size` призвела б до непередбачуваної поведінки, оскільки колекція могла б змінитись під час ітерації."
      },
      {
        "id": "js-q37-aq3",
        "question": "Чи можна в `WeakMap` використовувати примітивні значення як ключі?",
        "answer": "Ні, `WeakMap` дозволяє використовувати лише об'єкти як ключі. Якщо ви спробуєте використовувати примітив, буде викинута помилка `TypeError`."
      }
    ]
  },
  {
    "id": "js-q38",
    "topic": "JavaScript",
    "mainQuestion": "Яке застосування регулярних виразів? Які основні способи роботи з ними в JavaScript?",
    "mainAnswer": "Регулярні вирази (Regular Expressions - RegEx) — це потужний інструмент для пошуку, заміни та маніпуляції текстом, а також для валідації рядків за певним шаблоном. \n**Застосування:** валідація форм (email, номер телефону), пошук шаблонів у тексті, розбір URL-адрес, заміна підрядків. \n**Основні способи роботи:** \n1. **Створення**: \n   - Літерал: `/pattern/flags` (наприклад, `/abc/g`) \n   - Конструктор: `new RegExp('pattern', 'flags')` \n2. **Методи `String`:** \n   - `string.match(regex)`: повертає масив з усіма збігами або `null`. \n   - `string.search(regex)`: повертає індекс першого збігу або `-1`. \n   - `string.replace(regex, replacement)`: замінює збіги. \n   - `string.split(regex)`: розбиває рядок за шаблоном. \n3. **Методи `RegExp`:** \n   - `regex.test(string)`: повертає `true` або `false`, чи знайдено збіг. \n   - `regex.exec(string)`: повертає масив з інформацією про один збіг або `null`.",
    "additionalQuestions": [
      {
        "id": "js-q38-aq1",
        "question": "Що означають прапорці (flags) у регулярних виразах?",
        "answer": "Прапорці змінюють поведінку регулярного виразу: \n- `i` (ignore case): регістронезалежний пошук. \n- `g` (global): знайти всі збіги, а не тільки перший. \n- `m` (multiline): дозволяє `^` та `$` збігатися з початком/кінцем рядка, а не лише всього тексту."
      },
      {
        "id": "js-q38-aq2",
        "question": "У чому різниця між `string.match()` та `regex.exec()`?",
        "answer": "`string.match()` повертає всі збіги (якщо прапорець `g` встановлений) або деталі першого збігу. `regex.exec()` повертає деталі *одного* збігу за раз і зберігає стан, що дозволяє послідовно отримувати всі збіги при багаторазовому виклику."
      },
      {
        "id": "js-q38-aq3",
        "question": "Коли варто використовувати конструктор `new RegExp()` замість літералу?",
        "answer": "Конструктор `new RegExp()` варто використовувати, коли шаблон регулярного виразу створюється динамічно, наприклад, з рядка, введеного користувачем."
      }
    ]
  },
  {
    "id": "js-q39",
    "topic": "JavaScript",
    "mainQuestion": "Що означають дужки `()`, квадратні дужки `[]` та фігурні дужки `{}` у регулярних виразах?",
    "mainAnswer": "У регулярних виразах ці символи мають специфічне значення: \n- **Круглі дужки `()` (Grouping / Capturing Group)**: Використовуються для групування частин виразу, щоб застосовувати до них квантифікатори (наприклад, `(ab)+`), а також для створення 'груп захоплення', які зберігають текст, що відповідає цій частині виразу, для подальшого використання (доступні через `match[1]`, `match[2]` тощо). \n- **Квадратні дужки `[]` (Character Set)**: Визначають набір символів. Вони збігаються з *будь-яким одним символом* з цього набору. Наприклад, `[abc]` збігається з 'a', 'b' або 'c'. `[0-9]` збігається з будь-якою цифрою. \n- **Фігурні дужки `{}` (Quantifier)**: Визначають кількість повторень попереднього символу або групи. Наприклад, `a{3}` означає 'aaa', `a{2,4}` означає 'aa', 'aaa' або 'aaaa'.",
    "additionalQuestions": [
      {
        "id": "js-q39-aq1",
        "question": "Що таке 'незахоплюючі групи' (non-capturing groups) і як їх створити?",
        "answer": "Незахоплюючі групи `(?:...)` групують частини виразу без створення окремої групи захоплення. Вони корисні, коли вам потрібно згрупувати елементи, але не потрібно зберігати їх у результатах `match()`."
      },
      {
        "id": "js-q39-aq2",
        "question": "Як інвертувати набір символів у квадратних дужках?",
        "answer": "Використовуйте `^` на початку набору: `[^abc]` збігається з будь-яким символом, який *не* є 'a', 'b' або 'c'."
      },
      {
        "id": "js-q39-aq3",
        "question": "Яка різниця між `a{1,}` та `a+`?",
        "answer": "Обидва означають 'один або більше повторень символу `a`'. `a+` є скороченням для `a{1,}`."
      }
    ]
  },
  {
    "id": "js-q40",
    "topic": "JavaScript",
    "mainQuestion": "Що означають наступні символи в регулярних виразах: `+`, `*`, `?`, `^`, `$`?",
    "mainAnswer": "Ці символи є квантифікаторами або якорями: \n- **`+` (One or More)**: Збігається з одним або більше повторень попереднього елемента. Наприклад, `a+` збігається з 'a', 'aa', 'aaa' тощо. \n- **`*` (Zero or More)**: Збігається з нулем або більше повторень попереднього елемента. Наприклад, `a*` збігається з '', 'a', 'aa' тощо. \n- **`?` (Zero or One / Optional)**: Збігається з нулем або одним повторенням попереднього елемента, роблячи його необов'язковим. Також використовується для 'нежадібних' (non-greedy) квантифікаторів (наприклад, `*?`). Наприклад, `colou?r` збігається з 'color' або 'colour'. \n- **`^` (Start of String / Negation)**: \n  - На початку виразу: якір, що збігається з початком рядка (або початком рядка в багаторядковому режимі). Наприклад, `^abc`. \n  - Всередині `[]`: заперечення набору символів. Наприклад, `[^abc]`. \n- **`$` (End of String)**: Як якір, що збігається з кінцем рядка (або кінцем рядка в багаторядковому режимі). Наприклад, `abc$`.",
    "additionalQuestions": [
      {
        "id": "js-q40-aq1",
        "question": "Яка різниця між 'жадібним' (greedy) та 'нежадібним' (non-greedy) квантифікатором?",
        "answer": "За замовчуванням квантифікатори (`+`, `*`, `{}`) є 'жадібними' — вони намагаються збігтися з якомога більшою кількістю символів. Додавання `?` після квантифікатора робить його 'нежадібним' (або 'лінивим'), що означає, що він намагається збігтися з якомога меншою кількістю символів."
      },
      {
        "id": "js-q40-aq2",
        "question": "Як збігатися з буквальним символом `+`, `*`, `?`, `^`, `$`?",
        "answer": "Щоб збігатися з цими символами буквально, їх потрібно екранувати зворотним слешем: `\\+`, `\\*`, `\\?`, `\\^`, `\\$`."
      },
      {
        "id": "js-q40-aq3",
        "question": "Наведіть приклад використання `^` та `$` разом.",
        "answer": "`^Hello$` збігається лише з рядком, який містить *точно* 'Hello' і нічого більше. Часто використовується для повної валідації рядка."
      }
    ]
  },
  {
    "id": "js-q41",
    "topic": "JavaScript",
    "mainQuestion": "Що таке рекурсія? Що таке стек?",
    "mainAnswer": "**Рекурсія** — це програмна техніка, при якій функція викликає сама себе для вирішення задачі. Вона продовжує викликати себе доти, доки не досягне базового (вихідного) випадку. **Стек** (зокрема, стек викликів, Call Stack) — це структура даних, що працює за принципом LIFO (Last-In, First-Out), яка використовується JavaScript-двигуном для відстеження послідовності викликів функцій. Кожен виклик функції додається до стеку (push), а коли функція завершується, вона видаляється зі стеку (pop). При рекурсії, кожен рекурсивний виклик додає новий кадр до стеку, що може призвести до 'переповнення стеку' (Stack Overflow) при надто глибокій рекурсії без належного базового випадку.",
    "additionalQuestions": [
      {
        "id": "js-q41-aq1",
        "question": "Наведіть приклад рекурсивної функції.",
        "answer": "`function factorial(n) { if (n === 0 || n === 1) { return 1; } return n * factorial(n - 1); } console.log(factorial(5)); // 120`"
      },
      {
        "id": "js-q41-aq2",
        "question": "Що таке 'базовий випадок' у рекурсії і чому він важливий?",
        "answer": "Базовий випадок — це умова, при якій рекурсивна функція припиняє викликати сама себе і повертає кінцеве значення. Він критично важливий для запобігання нескінченної рекурсії та переповнення стеку."
      },
      {
        "id": "js-q41-aq3",
        "question": "Коли варто використовувати рекурсію, а коли цикл?",
        "answer": "Рекурсія часто робить код більш читабельним для задач, які природно розв'язуються рекурсивно (наприклад, обробка дерев, фракталів). Цикли зазвичай ефективніші за продуктивністю та пам'яттю, особливо для великих об'ємів даних, де рекурсія може призвести до переповнення стеку."
      }
    ]
  },
  {
    "id": "js-q42",
    "topic": "JavaScript",
    "mainQuestion": "Що таке клас (class)?",
    "mainAnswer": "У JavaScript **клас** — це синтаксичний цукор (syntactic sugar) над вже існуючою прототипною моделлю успадкування. Класи надають більш зрозумілий і звичний синтаксис для створення конструкторів об'єктів та реалізації успадкування, схожий на об'єктно-орієнтовані мови, такі як Java або C#. Класи не вводять нової об'єктної моделі в JavaScript, вони просто спрощують роботу з прототипами.",
    "additionalQuestions": [
      {
        "id": "js-q42-aq1",
        "question": "Як оголосити клас у JavaScript?",
        "answer": "Класи оголошуються за допомогою ключового слова `class`, наприклад: `class MyClass { constructor() {} myMethod() {} }`."
      },
      {
        "id": "js-q42-aq2",
        "question": "Що таке метод `constructor` у класі?",
        "answer": "`constructor` — це спеціальний метод, який викликається при створенні нового екземпляра класу за допомогою оператора `new`. Він використовується для ініціалізації властивостей об'єкта."
      },
      {
        "id": "js-q42-aq3",
        "question": "Яке ключове слово використовується для успадкування одного класу від іншого?",
        "answer": "Для успадкування використовується ключове слово `extends`, наприклад: `class Dog extends Animal { ... }`."
      }
    ]
  },
  {
    "id": "js-q43",
    "topic": "JavaScript",
    "mainQuestion": "Що таке статичні властивості (static properties) класу?",
    "mainAnswer": "**Статичні властивості** (та методи) класу — це властивості (та методи), які належать самому класу, а не його окремим екземплярам. До них можна отримати доступ без створення екземпляра класу, безпосередньо через ім'я класу. Вони корисні для утилітних функцій, які не залежать від стану конкретного об'єкта, або для констант, пов'язаних з класом.",
    "additionalQuestions": [
      {
        "id": "js-q43-aq1",
        "question": "Як оголосити статичний метод у класі?",
        "answer": "Статичні методи оголошуються за допомогою ключового слова `static` перед назвою методу: `class MyClass { static myStaticMethod() { console.log('Я статичний метод'); } }`."
      },
      {
        "id": "js-q43-aq2",
        "question": "Як отримати доступ до статичної властивості або методу?",
        "answer": "Доступ здійснюється через ім'я класу: `MyClass.myStaticMethod();` або `console.log(MyClass.staticProperty);`."
      },
      {
        "id": "js-q43-aq3",
        "question": "Чи може статичний метод отримати доступ до нестатичних властивостей екземпляра?",
        "answer": "Ні, статичні методи не мають доступу до `this` екземпляра класу, оскільки вони не викликаються на екземплярі. Вони можуть отримувати доступ лише до інших статичних властивостей або методів класу."
      }
    ]
  },
  {
    "id": "js-q44",
    "topic": "JavaScript",
    "mainQuestion": "Як перевірити, чи належить об'єкт певному класу?",
    "mainAnswer": "Для перевірки належності об'єкта до певного класу (або чи є він екземпляром класу або його дочірнього класу) використовується оператор **`instanceof`**. Наприклад, `myObject instanceof MyClass` поверне `true`, якщо `myObject` є екземпляром `MyClass` або екземпляром класу, який успадковується від `MyClass`. Також можна перевірити властивість `constructor.name` (наприклад, `myObject.constructor.name === 'MyClass'`), але це менш надійно, оскільки ім'я конструктора може бути змінено або обфусковано.",
    "additionalQuestions": [
      {
        "id": "js-q44-aq1",
        "question": "Чи працює `instanceof` для примітивних типів даних?",
        "answer": "Ні, `instanceof` працює лише для об'єктів. Спроба використовувати його з примітивами (наприклад, `5 instanceof Number`) поверне `false`."
      },
      {
        "id": "js-q44-aq2",
        "question": "Яке обмеження має перевірка через `constructor.name`?",
        "answer": "Перевірка `constructor.name` може бути ненадійною, оскільки вона залежить від імені функції конструктора, яке може бути змінено або обфусковано в процесі мініфікації коду. Крім того, вона не враховує ланцюжок успадкування, на відміну від `instanceof`."
      },
      {
        "id": "js-q44-aq3",
        "question": "Як перевірити, чи об'єкт є `null` або `undefined` перед використанням `instanceof`?",
        "answer": "Завжди рекомендується перевіряти об'єкт на `null` або `undefined` перед використанням `instanceof`, оскільки `null instanceof MyClass` викине `TypeError`, а `undefined instanceof MyClass` буде `false`. Можна використати `if (myObject && myObject instanceof MyClass)`."
      }
    ]
  },
  {
    "id": "js-q45",
    "topic": "JavaScript",
    "mainQuestion": "Які є засоби обробки помилок у JavaScript?",
    "mainAnswer": "Основними засобами обробки помилок у JavaScript є: \n- **`try...catch` блок**: Дозволяє 'спіймати' та обробити помилки (винятки), які виникають у блоці `try`. Якщо помилка виникає, виконання переходить до блоку `catch`. \n- **`finally` блок**: Виконується завжди, незалежно від того, чи була помилка, чи ні. Корисний для очищення ресурсів. \n- **`throw` оператор**: Дозволяє вручну генерувати помилку (виняток). \n- **Об'єкт `Error` та його похідні**: Вбудовані конструктори для створення об'єктів помилок (`TypeError`, `ReferenceError` тощо). \n- **Проміси (`.catch()`) та `async/await` (`try...catch`)**: Для обробки помилок в асинхронному коді.",
    "additionalQuestions": [
      {
        "id": "js-q45-aq1",
        "question": "Коли слід використовувати `try...catch`?",
        "answer": "`try...catch` слід використовувати, коли ви очікуєте, що певна частина коду може викинути помилку, і ви хочете контрольовано її обробити, щоб програма не завершила свою роботу."
      },
      {
        "id": "js-q45-aq2",
        "question": "У чому відмінність між `Error` та `TypeError`?",
        "answer": "`Error` — це загальний базовий клас для об'єктів помилок. `TypeError` — це специфічний тип помилки, який виникає, коли операція не може бути виконана, тому що значення не має очікуваного типу (наприклад, виклик нефункції як функції)."
      },
      {
        "id": "js-q45-aq3",
        "question": "Чи можна зловити помилки, які виникають в асинхронних колбеках, за допомогою синхронного `try...catch`?",
        "answer": "Ні, синхронний `try...catch` може зловити лише помилки, що виникають синхронно в його блоці. Для асинхронних помилок (наприклад, у `setTimeout` колбеках, промісах) потрібно використовувати `.catch()` для промісів або `try...catch` всередині `async` функції."
      }
    ]
  },
  {
    "id": "js-q46",
    "topic": "JavaScript",
    "mainQuestion": "Навіщо потрібна модульність у наших застосунках? Які інструменти завантаження JS модулів ви знаєте?",
    "mainAnswer": "**Модульність** дозволяє розбивати великі застосунки на невеликі, незалежні, багаторазово використовувані частини (модулі). Це покращує організацію коду, полегшує його підтримку, налагодження та тестування, а також дозволяє командній роботі. \n**Інструменти та стандарти завантаження модулів:** \n- **ES Modules (ESM)**: Стандартний синтаксис JavaScript (`import`/`export`), підтримується більшістю сучасних браузерів та Node.js. \n- **CommonJS (CJS)**: Стандарт для Node.js (`require`/`module.exports`), використовується переважно на стороні сервера. \n- **AMD (Asynchronous Module Definition)**: Для асинхронного завантаження модулів у браузері (наприклад, RequireJS). \n- **UMD (Universal Module Definition)**: Патерн, що дозволяє модулям працювати як в CommonJS, так і в AMD/браузері. \n- **Bundlers (збирачі)**: Такі інструменти, як Webpack, Rollup, Parcel, Vite, які об'єднують модулі та їхні залежності в один або кілька файлів для оптимізації завантаження.",
    "additionalQuestions": [
      {
        "id": "js-q46-aq1",
        "question": "У чому головна відмінність між `import`/`export` та `require`/`module.exports`?",
        "answer": "`import`/`export` (ESM) є статичними (аналіз залежностей відбувається під час компіляції) та підтримують деревовидне струшування (tree-shaking). `require`/`module.exports` (CommonJS) є динамічними (завантаження відбувається під час виконання) і синхронними."
      },
      {
        "id": "js-q46-aq2",
        "question": "Яка роль бандлерів у сучасній веб-розробці?",
        "answer": "Бандлери (наприклад, Webpack) об'єднують файли модулів та їхні залежності в оптимізовані пакети для розгортання в браузері. Вони можуть також виконувати транспіляцію (Babel), мініфікацію, оптимізацію зображень тощо."
      },
      {
        "id": "js-q46-aq3",
        "question": "Чи можна використовувати ES Modules у Node.js?",
        "answer": "Так, починаючи з Node.js 12 (та стабільніше з 14), можна використовувати ES Modules, якщо файли мають розширення `.mjs` або якщо в `package.json` встановлено `\"type\": \"module\"`."
      }
    ]
  },
  {
    "id": "js-q47",
    "topic": "JavaScript",
    "mainQuestion": "Опишіть потік завантаження даних з віддаленого сервера в JavaScript. Які інструменти для отримання даних ви знаєте?",
    "mainAnswer": "Потік завантаження даних зазвичай є асинхронним: \n1. **Ініціація запиту**: JavaScript відправляє HTTP-запит до віддаленого сервера. Це не блокує основний потік виконання програми. \n2. **Очікування відповіді**: Запит виконується у фоновому режимі (за допомогою Web APIs). \n3. **Отримання відповіді**: Після отримання відповіді від сервера викликається колбек-функція або обробляється Проміс. \n4. **Обробка даних**: Отримані дані (зазвичай у форматі JSON) парсяться та використовуються в застосунку. \n**Інструменти для отримання даних:** \n- **`XMLHttpRequest` (XHR)**: Старіший, але все ще робочий API для HTTP-запитів. \n- **`Fetch API`**: Сучасний, заснований на Промісах API для мережевих запитів, який надає більш потужний і гнучкий інтерфейс. \n- **Бібліотеки/фреймворки**: \n  - **Axios**: Популярна бібліотека для HTTP-запитів, заснована на Промісах, з багатьма зручними функціями. \n  - **jQuery.ajax()**: Метод для AJAX-запитів, якщо ви використовуєте jQuery. \n  - **Спеціалізовані рішення**: GraphQL клієнти (Apollo Client, Relay), RTK Query для Redux Toolkit тощо.",
    "additionalQuestions": [
      {
        "id": "js-q47-aq1",
        "question": "У чому перевага `Fetch API` над `XMLHttpRequest`?",
        "answer": "`Fetch API` використовує Проміси, що дозволяє працювати з асинхронними операціями більш чисто та уникнути 'callback hell'. Він має більш сучасний та гнучкий дизайн."
      },
      {
        "id": "js-q47-aq2",
        "question": "Що таке CORS і як він пов'язаний з завантаженням даних?",
        "answer": "CORS (Cross-Origin Resource Sharing) — це механізм безпеки браузера, який обмежує запити до ресурсів з іншого домену (origin). Якщо ви намагаєтеся зробити запит до API, який знаходиться на іншому домені, без належної конфігурації CORS на сервері, браузер заблокує запит з міркувань безпеки."
      },
      {
        "id": "js-q47-aq3",
        "question": "Як обробляти відповіді у форматі JSON за допомогою `Fetch API`?",
        "answer": "Після отримання об'єкта `Response` від `fetch`, ви можете викликати `response.json()` на ньому. Цей метод також повертає Проміс, який резолвиться з об'єктом JavaScript, отриманим після парсингу JSON."
      }
    ]
  },
  {
    "id": "js-q48",
    "topic": "JavaScript",
    "mainQuestion": "Поясніть спливання подій (event bubbling)?",
    "mainAnswer": "**Спливання подій (Event Bubbling)** — це механізм, при якому події, що виникають на елементі DOM (наприклад, клік на кнопці), спочатку обробляються на цьому елементі, а потім 'спливають' (поширюються) вгору по дереву DOM до батьківських елементів, аж до `document` і `window`. Це означає, що якщо ви клікнете на внутрішньому елементі, обробники подій на ньому спрацюють першими, а потім спрацюють обробники на його батьківському елементі, потім на батьківському батька і так далі. Це дозволяє використовувати **делегування подій**.",
    "additionalQuestions": [
      {
        "id": "js-q48-aq1",
        "question": "Як зупинити спливання події?",
        "answer": "Для зупинки спливання події використовується метод `event.stopPropagation()` всередині обробника події. Це запобігає подальшому поширенню події до батьківських елементів."
      },
      {
        "id": "js-q48-aq2",
        "question": "Що таке фаза 'захоплення' (capturing phase) у потоці подій?",
        "answer": "Потік подій складається з трьох фаз: фаза захоплення (від `window` до цільового елемента), фаза цілі (коли подія досягає цільового елемента) і фаза спливання (від цільового елемента назад до `window`). Зазвичай обробники подій реєструються для фази спливання, але їх можна зареєструвати і для фази захоплення, передавши `true` третім аргументом `addEventListener`."
      },
      {
        "id": "js-q48-aq3",
        "question": "Чи всі події спливають?",
        "answer": "Більшість подій спливає, але є деякі винятки, які не спливають, наприклад, подія `focus` або `blur`."
      }
    ]
  },
  {
    "id": "js-q49",
    "topic": "JavaScript",
    "mainQuestion": "Що таке делегування подій (event delegation)?",
    "mainAnswer": "**Делегування подій** — це техніка, яка використовує спливання подій для ефективної обробки подій на кількох дочірніх елементах. Замість того, щоб призначати обробник подій кожному окремому дочірньому елементу, ви призначаєте один обробник подій **батьківському елементу**. Коли подія 'спливає' від дочірнього елемента до батьківського, обробник на батьківському елементі визначає, який саме дочірній елемент викликав подію (за допомогою `event.target`), і виконує відповідну логіку. Це зменшує кількість обробників подій, покращує продуктивність та спрощує роботу з динамічно доданими елементами.",
    "additionalQuestions": [
      {
        "id": "js-q49-aq1",
        "question": "Які головні переваги делегування подій?",
        "answer": "Головні переваги: зменшення кількості обробників подій (і, відповідно, споживання пам'яті), підвищення продуктивності, особливо для великих списків, та автоматична робота з елементами, які додаються в DOM після ініціалізації сторінки."
      },
      {
        "id": "js-q49-aq2",
        "question": "Наведіть приклад, де делегування подій особливо корисне.",
        "answer": "Делегування подій дуже корисне для динамічних списків, таких як списки завдань (Todo List), де елементи додаються або видаляються. Замість того, щоб додавати обробник кліків до кожного нового елемента списку, ви додаєте один обробник до батьківського контейнера списку."
      },
      {
        "id": "js-q49-aq3",
        "question": "Як отримати доступ до елемента, на якому відбулася подія, при делегуванні?",
        "answer": "Доступ до елемента, який фактично викликав подію (тобто того, на якому вона почалася), можна отримати за допомогою властивості `event.target`."
      }
    ]
  },
  {
    "id": "js-q50",
    "topic": "JavaScript",
    "mainQuestion": "Що таке `WeakMap`? Які його особливості?",
    "mainAnswer": "`WeakMap` — це колекція, яка дозволяє використовувати об'єкти як ключі, але не перешкоджає їх видаленню збирачем сміття. Це означає, що якщо єдиний посилання на об'єкт-ключ буде видалено, то відповідний запис у `WeakMap` також буде видалено. \n**Особливості:** \n- Ключами можуть бути лише об'єкти (примітиви не підтримуються). \n- Не має методів для отримання розміру (`size`) або ітерації по елементах (немає методів `keys()`, `values()`, `entries()`). \n- Використовується для зберігання метаданих про об'єкти без перешкоджання їх видаленню збирачем сміття.",
    "additionalQuestions": [
      {
        "id": "js-q50-aq1",
        "question": "Яка різниця між `WeakMap` та `Map`?",
        "answer": "`WeakMap` дозволяє використовувати лише об'єкти як ключі і не перешкоджає збору сміття, тоді як `Map` може мати будь-які типи ключів і зберігає всі елементи незалежно від того, чи є на них посилання."
      },
      {
        "id": "js-q50-aq2",
        "question": "Чому в `WeakMap` немає методів для ітерації?",
        "answer": "`WeakMap` не підтримує ітерацію через свої елементи, оскільки ключі можуть бути видалені збирачем сміття в будь-який момент, що робить ітерацію непередбачуваною."
      },
      {
        "id": "js-q50-aq3",
        "question": "Чи можна використовувати `WeakMap` для зберігання примітивних значень?",
        "answer": "`WeakMap` не підтримує примітивні значення як ключі. Ключами можуть бути лише об'єкти. Примітивні значення можна зберігати в `Map` або інших структурах даних, але не в `WeakMap`."
      }
    ]
  },
  {
    "id": "js-q51",
    "topic": "JavaScript",
    "mainQuestion": "Що таке `WeakSet`? Які його особливості?",
    "mainAnswer": "`WeakSet` — це колекція, яка дозволяє зберігати лише об'єкти, але не перешкоджає їх видаленню збирачем сміття. Це означає, що якщо єдиний посилання на об'єкт буде видалено, то відповідний запис у `WeakSet` також буде видалено. \n**Особливості:** \n- Може містити лише об'єкти (примітиви не підтримуються). \n- Не має методів для отримання розміру (`size`) або ітерації по елементах (немає методів `keys()`, `values()`, `entries()`). \n- Використовується для зберігання унікальних об'єктів без перешкоджання їх видаленню збирачем сміття.",
    "additionalQuestions": [
      {
        "id": "js-q51-aq1",
        "question": "Яка різниця між `WeakSet` та `Set`?",
        "answer": "`WeakSet` дозволяє використовувати лише об'єкти і не перешкоджає збору сміття, тоді як `Set` може мати будь-які типи значень (примітиви та об'єкти) і зберігає всі елементи незалежно від того, чи є на них посилання."
      },
      {
        "id": "js-q51-aq2",
        "question": "Чому в `WeakSet` немає методів для ітерації?",
        "answer": "`WeakSet` не підтримує ітерацію через свої елементи, оскільки ключі можуть бути видалені збирачем сміття в будь-який момент, що робить ітерацію непередбачуваною."
      },
      {
        "id": "js-q51-aq3",
        "question": "Чи можна використовувати `WeakSet` для зберігання примітивних значень?",
        "answer": "`WeakSet` не підтримує примітивні значення. Ключами можуть бути лише об'єкти. Примітивні значення можна зберігати в `Set` або інших структурах даних, але не в `WeakSet`."
      }
    ]
  }
]