[
  {
    "id": "devops-q1",
    "topic": "DevOps",
    "mainQuestion": "Що таке DevOps і чому він важливий?",
    "mainAnswer": "DevOps – це набір практик, які поєднують розробку програмного забезпечення (Dev) та операційні процеси (Ops). Його мета – скоротити життєвий цикл розробки системи, забезпечити безперервне доставлення високої якості програмного забезпечення та покращити співпрацю між командами розробки та операцій.",
    "additionalQuestions": [
      {
        "id": "devops-q1-aq1",
        "question": "Які основні цілі та переваги впровадження DevOps?",
        "answer": "Основні цілі: швидша доставка (time to market), підвищення якості та надійності, зменшення кількості помилок, покращення співпраці та комунікації, автоматизація процесів. Переваги: прискорення інновацій, підвищення задоволеності клієнтів, конкурентні переваги."
      },
      {
        "id": "devops-q1-aq2",
        "question": "У чому полягає культурний аспект DevOps?",
        "answer": "Культурний аспект DevOps передбачає зміну мислення та підходу до роботи. Він зосереджений на співпраці, спільному володінні відповідальністю, автоматизації, безперервному навчанні та вдосконаленні, а також на усуненні 'силосів' між командами розробки та операцій."
      },
      {
        "id": "devops-q1-aq3",
        "question": "Як DevOps інтегрується з Agile методологіями?",
        "answer": "DevOps доповнює Agile, розширюючи його принципи безперервного доставлення та зворотного зв'язку на весь життєвий цикл програмного забезпечення, включаючи розгортання та експлуатацію. Agile фокусується на швидкій розробці, а DevOps забезпечує швидке та надійне доставлення цієї розробки до кінцевих користувачів."
      }
    ]
  },
  {
    "id": "devops-q2",
    "topic": "DevOps",
    "mainQuestion": "Що таке CI/CD і які його складові?",
    "mainAnswer": "CI/CD (Continuous Integration/Continuous Delivery/Continuous Deployment) – це практика розробки програмного забезпечення, яка передбачає постійну інтеграцію коду, автоматизовану збірку, тестування та доставлення змін у продуктивне середовище. CI (безперервна інтеграція) – це автоматизація об'єднання коду, CD (безперервне доставлення) – це автоматичне доставлення коду в репозиторій, готовий до розгортання, а Continuous Deployment (безперервне розгортання) – це повна автоматизація розгортання у продакшн.",
    "additionalQuestions": [
      {
        "id": "devops-q2-aq1",
        "question": "Які переваги CI/CD для команд розробки?",
        "answer": "Переваги CI/CD включають: швидке виявлення та виправлення помилок, частіші та менші за розміром релізи, зменшення ризиків при розгортанні, покращення якості коду, автоматизація рутинних завдань та підвищення довіри до процесу розгортання."
      },
      {
        "id": "devops-q2-aq2",
        "question": "Які інструменти зазвичай використовуються для реалізації CI/CD?",
        "answer": "Популярні інструменти CI/CD: Jenkins, GitLab CI/CD, GitHub Actions, CircleCI, Travis CI, Azure DevOps, Bitbucket Pipelines. Для управління кодом: Git; для контейнеризації: Docker; для оркестрації: Kubernetes."
      },
      {
        "id": "devops-q2-aq3",
        "question": "У чому різниця між Continuous Delivery та Continuous Deployment?",
        "answer": "**Continuous Delivery** означає, що код готовий до розгортання в будь-який момент, але фінальне розгортання в продакшн відбувається вручну. **Continuous Deployment** йде далі, автоматично розгортаючи кожну успішну зміну в продакшн без втручання людини."
      }
    ]
  },
  {
    "id": "devops-q3",
    "topic": "DevOps",
    "mainQuestion": "Що таке Docker і які його основні переваги?",
    "mainAnswer": "Docker – це платформа для розробки, доставки та запуску додатків у контейнерах. Контейнер – це легкий, портативний, самодостатній пакет програмного забезпечення, який включає все необхідне для запуску додатка: код, runtime, системні інструменти, бібліотеки та налаштування. Основні переваги Docker: ізоляція, портативність, відтворюваність, ефективність використання ресурсів.",
    "additionalQuestions": [
      {
        "id": "devops-q3-aq1",
        "question": "Яка різниця між контейнером і віртуальною машиною (VM)?",
        "answer": "VM включає повну операційну систему гостя, тому вона важча та повільніша. Контейнер розділяє ядро операційної системи хоста, що робить його легшим, швидшим та ефективнішим за ресурсами. Контейнери ізолюють процеси, тоді як VM ізолюють цілі операційні системи."
      },
      {
        "id": "devops-q3-aq2",
        "question": "Що таке Dockerfile, Docker Image та Docker Container?",
        "answer": "**Dockerfile** – це текстовий файл, що містить інструкції для побудови Docker Image. **Docker Image** – це шаблон або знімок, який включає додаток та всі його залежності, готовий до запуску. **Docker Container** – це екземпляр Docker Image, що працює."
      },
      {
        "id": "devops-q3-aq3",
        "question": "Що таке Docker Compose?",
        "answer": "Docker Compose – це інструмент для визначення та запуску багатоконтейнерних Docker-додатків. Він дозволяє описати всі сервіси, мережі та томи додатка в одному YAML-файлі, а потім запускати їх однією командою."
      }
    ]
  },
  {
    "id": "devops-q4",
    "topic": "DevOps",
    "mainQuestion": "Що таке Kubernetes (K8s) і для чого він потрібен?",
    "mainAnswer": "Kubernetes – це відкрита система для автоматизації розгортання, масштабування та управління контейнерними додатками. Він надає платформу для оркестрації контейнерів, забезпечуючи їх доступність, стійкість та масштабованість у кластері серверів.",
    "additionalQuestions": [
      {
        "id": "devops-q4-aq1",
        "question": "Які основні компоненти Kubernetes кластера?",
        "answer": "Основні компоненти Kubernetes: **Master Node** (Control Plane) – керує кластером (API Server, Scheduler, Controller Manager, etcd) та **Worker Nodes** – виконують робочі навантаження (Kubelet, Kube-proxy, Container Runtime)."
      },
      {
        "id": "devops-q4-aq2",
        "question": "Що таке Pod у Kubernetes?",
        "answer": "Pod – це найменша одиниця розгортання в Kubernetes. Він інкапсулює один або декілька контейнерів (які спільно використовують мережу та зберігання), а також ресурси та специфікації для їх запуску. Pod – це абстракція над контейнерами."
      },
      {
        "id": "devops-q4-aq3",
        "question": "Які переваги використання Kubernetes?",
        "answer": "Переваги Kubernetes: автоматичне масштабування, самовідновлення (health checks, перезапуск відмовивших Pods), балансування навантаження, управління конфігурацією та секретами, легке оновлення та відкат, ефективне використання ресурсів."
      }
    ]
  },
  {
    "id": "devops-q5",
    "topic": "DevOps",
    "mainQuestion": "Поясніть концепцію 'Infrastructure as Code' (IaC).",
    "mainAnswer": "Infrastructure as Code (IaC) – це практика управління та provisioning інфраструктури (сервери, мережі, бази даних тощо) за допомогою файлів конфігурації, а не ручного налаштування. Ці файли є кодом, який може бути версіонований, тестується та розгортається, як і будь-який інший програмний код.",
    "additionalQuestions": [
      {
        "id": "devops-q5-aq1",
        "question": "Які переваги IaC?",
        "answer": "Переваги IaC: відтворюваність середовищ, швидке provisioning інфраструктури, зменшення помилок, документування інфраструктури, версіонування та легкий відкат змін, можливість горизонтального масштабування."
      },
      {
        "id": "devops-q5-aq2",
        "question": "Назвіть інструменти для реалізації IaC.",
        "answer": "Популярні інструменти IaC: Terraform (для управління інфраструктурою на різних хмарних провайдерах), Ansible, Chef, Puppet (для управління конфігурацією), AWS CloudFormation, Azure Resource Manager."
      },
      {
        "id": "devops-q5-aq3",
        "question": "У чому різниця між 'imperative' та 'declarative' підходами в IaC?",
        "answer": "**Imperative (імперативний)** підхід описує кроки, які потрібно виконати для досягнення бажаного стану (наприклад, Chef, Puppet, Ansible). **Declarative (декларативний)** підхід описує лише бажаний кінцевий стан інфраструктури, а інструмент сам визначає, як його досягти (наприклад, Terraform, Kubernetes YAML)."
      }
    ]
  },
  {
    "id": "devops-q6",
    "topic": "DevOps",
    "mainQuestion": "Що таке моніторинг та логування у DevOps?",
    "mainAnswer": "Моніторинг та логування – це критично важливі практики DevOps для спостереження за працездатністю додатків та інфраструктури, виявлення проблем та аналізу поведінки системи. **Моніторинг** збирає метрики (CPU, RAM, мережа, запити), а **логування** збирає системні та додаткові журнали.",
    "additionalQuestions": [
      {
        "id": "devops-q6-aq1",
        "question": "Які показники (метрики) варто моніторити для веб-додатка?",
        "answer": "Для веб-додатка варто моніторити: використання CPU/RAM, пропускну здатність мережі, кількість запитів, час відгуку, частоту помилок (4xx, 5xx), кількість активних користувачів, використання дискового простору, стан баз даних."
      },
      {
        "id": "devops-q6-aq2",
        "question": "Назвіть інструменти для моніторингу та логування.",
        "answer": "Інструменти моніторингу: Prometheus, Grafana, Zabbix, Datadog, New Relic. Інструменти логування: ELK Stack (Elasticsearch, Logstash, Kibana), Splunk, Graylog, Loki."
      },
        {
        "id": "devops-q6-aq3",
        "question": "Що таке централізоване логування і чому воно важливе?",
        "answer": "Централізоване логування передбачає збір логів з усіх компонентів розподіленої системи в єдине сховище. Це важливо для швидкого пошуку та аналізу проблем, кореляції подій між різними сервісами, моніторингу безпеки та аналізу поведінки додатка в цілому."
      }
    ]
  },
  {
    "id": "devops-q7",
    "topic": "DevOps",
    "mainQuestion": "Що таке системи контролю версій (VCS) і яка їх роль у DevOps?",
    "mainAnswer": "Системи контролю версій (VCS), такі як Git, є основою для будь-якого процесу DevOps. Вони дозволяють відстежувати зміни в коді, співпрацювати над проектами, відновлювати попередні версії, а також слугують центральним репозиторієм для CI/CD пайплайнів.",
    "additionalQuestions": [
      {
        "id": "devops-q7-aq1",
        "question": "Що таке Git і які його основні команди?",
        "answer": "Git – це розподілена система контролю версій. Основні команди: `git clone` (клонувати репозиторій), `git add` (додати файли до індексу), `git commit` (зберегти зміни), `git push` (відправити зміни на віддалений репозиторій), `git pull` (отримати зміни з віддаленого репозиторію), `git branch` (управління гілками), `git merge` (об'єднати гілки)."
      },
      {
        "id": "devops-q7-aq2",
        "question": "Що таке 'гілка' (branch) у Git і навіщо їх використовувати?",
        "answer": "Гілка – це незалежна лінія розробки. Їх використовують для ізоляції нових функцій, виправлень або експериментів від основної кодової бази. Це дозволяє команді працювати паралельно над різними завданнями без конфліктів у основній гілці (наприклад, `main` або `master`)."
      },
      {
        "id": "devops-q7-aq3",
        "question": "Поясніть робочий процес Git Flow або GitHub Flow.",
        "answer": "**Git Flow** – це сувора модель розгалуження, яка використовує багато гілок для підтримки різних версій релізу та фіч. **GitHub Flow** – це простіша, легкомасштабована модель, яка використовує лише гілку `main` (або `master`) та гілки функцій, що інтегруються через pull requests."
      }
    ]
  },
  {
    "id": "devops-q8",
    "topic": "DevOps",
    "mainQuestion": "Що таке автоматизоване тестування у DevOps і яка його роль?",
    "mainAnswer": "Автоматизоване тестування – це виконання тестів за допомогою програмного забезпечення без втручання людини. У DevOps воно є невід'ємною частиною CI/CD пайплайну, забезпечуючи швидкий зворотний зв'язок про якість коду та допомагаючи виявляти дефекти на ранніх етапах.",
    "additionalQuestions": [
      {
        "id": "devops-q8-aq1",
        "question": "Які типи автоматизованих тестів існують?",
        "answer": "Основні типи: **Юніт-тести** (перевіряють окремі функції/методи), **Інтеграційні тести** (перевіряють взаємодію між компонентами), **Функціональні/Наскрізні (E2E) тести** (імітують поведінку користувача в усьому додатку), **Регресійні тести** (перевіряють, що нові зміни не пошкодили існуючу функціональність), **Продуктивні тести** (навантаження, стрес)."
      },
      {
        "id": "devops-q8-aq2",
        "question": "На якому етапі CI/CD пайплайну запускаються тести?",
        "answer": "Юніт-тести та інтеграційні тести зазвичай запускаються на ранніх етапах CI (після збірки). Функціональні та E2E-тести, а також тести продуктивності, запускаються пізніше, після розгортання в тестовому середовищі."
      },
      {
        "id": "devops-q8-aq3",
        "question": "Які інструменти використовуються для автоматизованого тестування у веб-розробці?",
        "answer": "Для юніт-тестів: Jest, Mocha, Jasmine (JS/TS). Для E2E-тестів: Cypress, Playwright, Selenium. Для API-тестів: Postman (Newman), Karate DSL. Для продуктивності: JMeter, K6."
      }
    ]
  },
  {
    "id": "devops-q9",
    "topic": "DevOps",
    "mainQuestion": "Що таке хмарні обчислення (Cloud Computing) і як вони впливають на DevOps?",
    "mainAnswer": "Хмарні обчислення – це модель надання обчислювальних послуг (сервери, сховища, бази даних, мережі, програмне забезпечення) через інтернет з централізованого пулу ресурсів. Хмара є основою для багатьох практик DevOps, надаючи гнучку, масштабовану та економічно ефективну інфраструктуру 'на вимогу' для CI/CD, контейнеризації та моніторингу.",
    "additionalQuestions": [
      {
        "id": "devops-q9-aq1",
        "question": "Назвіть основні моделі хмарних послуг (IaaS, PaaS, SaaS).",
        "answer": "**IaaS (Infrastructure as a Service)**: надає базові обчислювальні ресурси (віртуальні машини, мережі, сховища). **PaaS (Platform as a Service)**: надає платформу для розробки, запуску та управління додатками без керування базовою інфраструктурою. **SaaS (Software as a Service)**: надає готове програмне забезпечення, доступне через веб-браузер."
      },
      {
        "id": "devops-q9-aq2",
        "question": "Які основні хмарні провайдери ви знаєте?",
        "answer": "Найбільші хмарні провайдери: Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP). Також є Oracle Cloud Infrastructure, IBM Cloud та інші."
      },
      {
        "id": "devops-q9-aq3",
        "question": "Як хмарні функції (Serverless/FaaS) впливають на DevOps?",
        "answer": "Serverless-функції (наприклад, AWS Lambda, Azure Functions, Google Cloud Functions) дозволяють розробникам розгортати код без керування серверами. Для DevOps це означає менше інфраструктурного управління, але більший акцент на CI/CD для функцій, моніторинг їх виконання та управління залежностями."
      }
    ]
  },
  {
    "id": "devops-q10",
    "topic": "DevOps",
    "mainQuestion": "Що таке автоматизація розгортання та як вона реалізується?",
    "mainAnswer": "Автоматизація розгортання – це процес автоматичного переміщення додатка з репозиторію коду до цільового середовища (тестового, стейджингу, продакшну) з мінімальним втручанням людини. Вона реалізується за допомогою CI/CD пайплайнів, інструментів управління конфігурацією та скриптів.",
    "additionalQuestions": [
      {
        "id": "devops-q10-aq1",
        "question": "Які переваги автоматизованого розгортання?",
        "answer": "Переваги: зменшення людських помилок, прискорення циклу релізу, покращення консистентності середовищ, можливість частих та малих розгортань, легший відкат у випадку проблем."
      },
      {
        "id": "devops-q10-aq2",
        "question": "Які стратегії розгортання ви знаєте?",
        "answer": "Популярні стратегії: **Rolling Update** (поетапне оновлення), **Blue/Green Deployment** (розгортання на паралельне середовище, потім перемикання трафіку), **Canary Deployment** (поетапний випуск для невеликої частини користувачів), **A/B Testing Deployment** (для тестування різних версій функціональності)."
      },
      {
        "id": "devops-q10-aq3",
        "question": "Що таке 'Rollback' (відкат) і чому він важливий?",
        "answer": "Rollback – це можливість швидко повернути додаток до попередньої, стабільної версії у випадку виявлення критичних помилок або проблем після нового розгортання. Це критично важливо для мінімізації часу простою та забезпечення доступності сервісу."
      }
    ]
  },
  {
    "id": "devops-q11",
    "topic": "DevOps",
    "mainQuestion": "Що таке SRE (Site Reliability Engineering) і як воно пов'язане з DevOps?",
    "mainAnswer": "SRE (Site Reliability Engineering) – це дисципліна, яка застосовує аспекти програмної інженерії до проблем інфраструктури та операцій. Вона фокусується на автоматизації, вимірюванні та поліпшенні надійності, масштабованості та ефективності систем. SRE часто розглядається як конкретна реалізація принципів DevOps, особливо в контексті великих систем.",
    "additionalQuestions": [
      {
        "id": "devops-q11-aq1",
        "question": "Які основні принципи SRE?",
        "answer": "Основні принципи SRE включають: прийняття помилок, бюджет помилок (Error Budget), автоматизація рутинних завдань, зменшення ручної роботи (Toil), моніторинг та алертинг, управління інцидентами, постмортеми без звинувачень."
      },
      {
        "id": "devops-q11-aq2",
        "question": "Що таке 'Error Budget' (бюджет помилок) у SRE?",
        "answer": "Error Budget – це допустимий відсоток часу, протягом якого система може бути недоступною або працювати з помилками, не порушуючи встановлені Service Level Objectives (SLO). Він стимулює команди до інновацій, дозволяючи їм брати на себе обґрунтовані ризики, але також надає межу для прийняття ризиків."
      },
      {
        "id": "devops-q11-aq3",
        "question": "Чим відрізняється SRE від традиційних Ops-команд?",
        "answer": "SRE-команди більш орієнтовані на інженерію та автоматизацію, ніж традиційні Ops-команди. Вони пишуть код для вирішення операційних проблем, автоматизують розгортання, моніторинг та виправлення, тоді як традиційні Ops часто більше зосереджені на ручному управлінні та підтримці."
      }
    ]
  },
  {
    "id": "devops-q12",
    "topic": "DevOps",
    "mainQuestion": "Що таке мережева безпека у контексті DevOps?",
    "mainAnswer": "Мережева безпека у контексті DevOps означає інтеграцію практик безпеки на кожному етапі життєвого циклу розробки програмного забезпечення (DevSecOps). Вона включає захист мережевої інфраструктури, контроль доступу, шифрування трафіку, сегментацію мережі та моніторинг аномалій для запобігання несанкціонованому доступу та атакам.",
    "additionalQuestions": [
      {
        "id": "devops-q12-aq1",
        "question": "Що таке DevSecOps?",
        "answer": "DevSecOps (Development, Security, Operations) – це розширення DevOps, яке інтегрує безпеку на всіх етапах CI/CD пайплайну, від проектування до розгортання та експлуатації. Мета – зробити безпеку відповідальністю кожного члена команди та автоматизувати перевірки безпеки."
      },
      {
        "id": "devops-q12-aq2",
        "question": "Які основні загрози мережевій безпеці в хмарних середовищах?",
        "answer": "Загрози включають: небезпечні конфігурації хмарних ресурсів, недостатній контроль доступу, вразливості в додатках, DDoS-атаки, витоки даних, зловживання доступом до API та відсутність шифрування даних."
      },
      {
        "id": "devops-q12-aq3",
        "question": "Як автоматизувати перевірки безпеки в CI/CD?",
        "answer": "Автоматизація включає: сканування коду на вразливості (SAST), сканування залежностей, сканування контейнерних образів, сканування вразливостей під час виконання (DAST) та інтеграцію інструментів безпеки в пайплайн."
      }
    ]
  },
  {
    "id": "devops-q13",
    "topic": "DevOps",
    "mainQuestion": "Що таке GitOps?",
    "mainAnswer": "GitOps – це операційний фреймворк, який використовує Git як єдине джерело істини для декларативної інфраструктури та додатків. Усі зміни, які потрібно застосувати до системи, описуються у файлах Git-репозиторію. Автоматизовані агенти відстежують зміни в репозиторії та синхронізують з ними реальний стан кластера.",
    "additionalQuestions": [
      {
        "id": "devops-q13-aq1",
        "question": "Які основні принципи GitOps?",
        "answer": "Основні принципи: вся система описана декларативно в Git; Git – єдине джерело істини; дозволені зміни вносяться через pull requests у Git; агенти автоматично синхронізують стан системи з Git."
      },
      {
        "id": "devops-q13-aq2",
        "question": "Які переваги GitOps порівняно з традиційним управлінням інфраструктурою?",
        "answer": "Переваги: підвищена швидкість розгортання, покращена безпека (аудит, відстеження змін), краща відтворюваність середовищ, легкий відкат змін, спрощене управління складними розподіленими системами (особливо Kubernetes)."
      },
      {
        "id": "devops-q13-aq3",
        "question": "Які інструменти використовуються для GitOps?",
        "answer": "Популярні інструменти для реалізації GitOps: Flux CD, Argo CD, Jenkins X (для Kubernetes). Вони відстежують Git-репозиторії та забезпечують синхронізацію кластера."
      }
    ]
  },
  {
    "id": "devops-q14",
    "topic": "DevOps",
    "mainQuestion": "Що таке 'Chaos Engineering' (Хаос-інженерія)?",
    "mainAnswer": "Chaos Engineering – це практика навмисного впровадження керованих збоїв (або 'хаосу') у розподілену систему для перевірки її стійкості та здатності відновлюватися. Мета – виявити слабкі місця та потенційні збої до того, як вони вплинуть на реальних користувачів.",
    "additionalQuestions": [
      {
        "id": "devops-q14-aq1",
        "question": "Навіщо потрібна Chaos Engineering?",
        "answer": "Вона допомагає командам покращити стійкість системи, виявити приховані залежності, перевірити ефективність моніторингу та алертингу, а також переконатися, що системи дійсно відмовостійкі, а не лише 'теоретично'."
      },
      {
        "id": "devops-q14-aq2",
        "question": "Наведіть приклад експерименту з Chaos Engineering.",
        "answer": "Приклади: відключення окремих серверів або віртуальних машин, імітація збоїв мережі (висока затримка, втрата пакетів), виснаження ресурсів (CPU, пам'ять), вбивство випадкових Pods у Kubernetes, імітація відмови бази даних."
      },
      {
        "id": "devops-q14-aq3",
        "question": "Які інструменти використовуються для Chaos Engineering?",
        "answer": "Популярні інструменти: Chaos Monkey (розроблений Netflix), LitmusChaos, Gremlin, Chaos Mesh."
      }
    ]
  },
  {
    "id": "devops-q15",
    "topic": "DevOps",
    "mainQuestion": "Яка роль 'Feedback Loops' (петель зворотного зв'язку) у DevOps?",
    "mainAnswer": "Петлі зворотного зв'язку – це фундаментальний аспект DevOps, що забезпечує постійний потік інформації та навчання між усіма етапами життєвого циклу розробки та операцій. Це дозволяє командам швидко виявляти проблеми, вчитися на помилках та безперервно вдосконалювати процеси та продукт.",
    "additionalQuestions": [
      {
        "id": "devops-q15-aq1",
        "question": "Наведіть приклади петель зворотного зв'язку в DevOps.",
        "answer": "Приклади: моніторинг продуктивності (метрики), логування та аналіз журналів, автоматизовані тести (зворотний зв'язок по якості), алертинг про збої, ретроспективи та постмортеми (зворотний зв'язок про процеси), збір відгуків користувачів."
      },
      {
        "id": "devops-q15-aq2",
        "question": "Як петлі зворотного зв'язку покращують якість програмного забезпечення?",
        "answer": "Швидкий зворотний зв'язок дозволяє командам виявляти та виправляти дефекти на ранніх етапах, коли їх вартість виправлення найнижча. Це запобігає накопиченню боргів у технічній сфері та підвищує загальну стабільність і надійність системи."
      },
      {
        "id": "devops-q15-aq3",
        "question": "Чому важливо мати швидкі петлі зворотного зв'язку?",
        "answer": "Швидкі петлі зворотного зв'язку дозволяють командам діяти швидко. Чим швидше проблема виявляється (наприклад, через невдалий тест або аномалію моніторингу), тим швидше її можна виправити. Це мінімізує вплив на користувачів та зменшує ризик великих збоїв."
      }
    ]
  }
]