[
  {
    "id": "css-q1",
    "topic": "CSS",
    "mainQuestion": "Як додати CSS для веб-сторінки?",
    "mainAnswer": "Існує три основні способи: 1. Зовнішні таблиці стилів (<link> в <head>). 2. Внутрішні стилі (<style> в <head>). 3. Вбудовані стилі (атрибут `style` в елементі).",
    "additionalQuestions": [
      {
        "id": "css-q1-aq1",
        "question": "Який спосіб є кращим і чому?",
        "answer": "Зовнішні таблиці стилів є кращими, оскільки вони дозволяють кешувати CSS, спрощують підтримку коду та відокремлюють структуру (HTML) від стилів (CSS)."
      },
      {
        "id": "css-q1-aq2",
        "question": "Коли доцільно використовувати вбудовані стилі?",
        "answer": "Вбудовані стилі (`style=\"...\"`) рідко використовуються і, як правило, лише для невеликих, унікальних змін або в деяких JavaScript-фреймворках/бібліотеках."
      },
      {
        "id": "css-q1-aq3",
        "question": "Що таке пріоритет стилів і як він впливає на відображення?",
        "answer": "Пріоритет (специфічність) визначає, яке правило CSS буде застосовано, якщо для одного елемента існує кілька конфліктуючих правил. Вбудовані стилі мають найвищий пріоритет, потім ID, потім класи/атрибути, потім теги."
      }
    ]
  },
  {
    "id": "css-q2",
    "topic": "CSS",
    "mainQuestion": "У чому різниця між скиданням (resetting) та нормалізацією (normalizing) CSS? Що ви оберете і чому?",
    "mainAnswer": "Скидання CSS (resetting) повністю видаляє всі вбудовані стилі браузера, надаючи чисту основу. Нормалізація CSS (normalizing) корегує стилі браузерів, щоб вони відображалися послідовно, але залишає корисні за замовчуванням значення. Я б обрав нормалізацію, оскільки вона зберігає корисні типові стилі та вимагає менше перевизначень.",
    "additionalQuestions": [
      {
        "id": "css-q2-aq1",
        "question": "Наведіть приклад бібліотеки для нормалізації CSS.",
        "answer": "Популярним прикладом є Normalize.css."
      },
      {
        "id": "css-q2-aq2",
        "question": "Які потенційні проблеми можуть виникнути при повному скиданні CSS?",
        "answer": "При повному скиданні необхідно буде вручну стилізувати кожен елемент, навіть базові, що може збільшити обсяг коду та час розробки."
      },
      {
        "id": "css-q2-aq3",
        "question": "Яка головна мета використання скидання/нормалізації CSS?",
        "answer": "Основна мета — забезпечити послідовне відображення веб-сторінки в різних браузерах, усуваючи відмінності у їхніх вбудованих стилях."
      }
    ]
  },
  {
    "id": "css-q3",
    "topic": "CSS",
    "mainQuestion": "У чому різниця між відступами (margins) та внутрішніми відступами (paddings)?",
    "mainAnswer": "`padding` (внутрішній відступ) — це простір між вмістом елемента та його рамкою (border). `margin` (зовнішній відступ) — це простір навколо рамки елемента, який відокремлює його від інших елементів.",
    "additionalQuestions": [
      {
        "id": "css-q3-aq1",
        "question": "Як `padding` впливає на розмір елемента?",
        "answer": "За замовчуванням (при `box-sizing: content-box`), `padding` *збільшує* загальний розмір елемента (ширину і висоту)."
      },
      {
        "id": "css-q3-aq2",
        "question": "Що таке 'margin collapse' і коли він відбувається?",
        "answer": "'Margin collapse' (схлопування зовнішніх відступів) відбувається, коли вертикальні зовнішні відступи сусідніх блокових елементів об'єднуються в один, рівний більшому з них."
      },
      {
        "id": "css-q3-aq3",
        "question": "Чи входять `margin` та `padding` у box model?",
        "answer": "Так, `margin`, `border`, `padding` та `content` є основними компонентами CSS Box Model."
      }
    ]
  },
  {
    "id": "css-q4",
    "topic": "CSS",
    "mainQuestion": "Як видалити підкреслення посилання?",
    "mainAnswer": "Щоб видалити підкреслення посилання, використовуйте CSS властивість `text-decoration` зі значенням `none`: `a { text-decoration: none; }`.",
    "additionalQuestions": [
      {
        "id": "css-q4-aq1",
        "question": "Чи варто завжди видаляти підкреслення посилань?",
        "answer": "Ні, не завжди. Підкреслення є важливим візуальним індикатором для користувачів, що текст є посиланням. Видалення може погіршити доступність, особливо для користувачів з порушеннями зору."
      },
      {
        "id": "css-q4-aq2",
        "question": "Як змінити колір посилання в CSS?",
        "answer": "Використовуйте властивість `color`, наприклад: `a { color: blue; }`."
      },
      {
        "id": "css-q4-aq3",
        "question": "Як додати ефект підкреслення при наведенні курсору?",
        "answer": "Можна використовувати псевдоклас `:hover`: `a:hover { text-decoration: underline; }`."
      }
    ]
  },
  {
    "id": "css-q5",
    "topic": "CSS",
    "mainQuestion": "Що таке медіа-запити (media queries)? Поясніть синтаксис.",
    "mainAnswer": "Медіа-запити дозволяють застосовувати різні стилі CSS залежно від характеристик пристрою, таких як ширина екрану, висота, орієнтація або тип носія. Синтаксис: `@media screen and (min-width: 768px) { /* CSS-правила */ }`.",
    "additionalQuestions": [
      {
        "id": "css-q5-aq1",
        "question": "Для чого в основному використовуються медіа-запити?",
        "answer": "Вони є основою для реалізації адаптивного (responsive) веб-дизайну, дозволяючи сайту підлаштовуватися під різні розміри екранів (десктопи, планшети, мобільні телефони)."
      },
      {
        "id": "css-q5-aq2",
        "question": "Які типові характеристики пристроїв можна перевіряти за допомогою медіа-запитів?",
        "answer": "Найчастіше перевіряються `width` (ширина в'юпорта), `height` (висота в'юпорта), `orientation` (портретна/альбомна), `resolution` (роздільна здатність екрана)."
      },
      {
        "id": "css-q5-aq3",
        "question": "Що таке 'mobile first' підхід у контексті медіа-запитів?",
        "answer": "'Mobile first' — це стратегія розробки, при якій спочатку створюються стилі для мобільних пристроїв, а потім за допомогою медіа-запитів додаються стилі для більших екранів (`min-width`)."
      }
    ]
  },
  {
    "id": "css-q6",
    "topic": "CSS",
    "mainQuestion": "Що таке специфічність селекторів у CSS?",
    "mainAnswer": "Специфічність селекторів — це алгоритм, за допомогою якого браузери визначають, яке CSS-правило застосовувати до елемента, якщо до нього застосовуються кілька конфліктуючих правил. Вона розраховується на основі кількості та типу селекторів у правилі.",
    "additionalQuestions": [
      {
        "id": "css-q6-aq1",
        "question": "Який порядок специфічності у різних типів селекторів?",
        "answer": "Від найвищого до найнижчого: inline-стилі > ID селектори > Класи/атрибути/псевдокласи > Теги/псевдоелементи. Універсальний селектор і успадковані стилі мають найнижчу специфічність."
      },
      {
        "id": "css-q6-aq2",
        "question": "Як `!important` впливає на специфічність?",
        "answer": "`!important` перебиває будь-яку іншу специфічність (за винятком іншого `!important` з вищою специфічністю або того ж рівня, що з'явився пізніше). Його використання не рекомендується через можливі проблеми з підтримкою коду."
      },
      {
        "id": "css-q6-aq3",
        "question": "Як розрахувати специфічність для даного правила?",
        "answer": "Специфічність розраховується за чотирма категоріями (a, b, c, d): 'a' для inline-стилів, 'b' для ID, 'c' для класів/атрибутів/псевдокласів, 'd' для тегів/псевдоелементів. Комбінація цих чисел утворює специфічність (наприклад, 0,1,2,3)."
      }
    ]
  },
  {
    "id": "css-q7",
    "topic": "CSS",
    "mainQuestion": "У чому різниця між псевдоелементами та псевдокласами в CSS?",
    "mainAnswer": "Псевдокласи (`:hover`, `:focus`, `:first-child`) вибирають елементи на основі їхнього стану або положення в документі. Псевдоелементи (`::before`, `::after`, `::first-line`) дозволяють стилізувати певну частину елемента або додати віртуальний елемент до DOM-дерева.",
    "additionalQuestions": [
      {
        "id": "css-q7-aq1",
        "question": "Наведіть приклад використання псевдокласу.",
        "answer": "`a:hover { color: red; }` - змінить колір посилання на червоний при наведенні курсору."
      },
      {
        "id": "css-q7-aq2",
        "question": "Наведіть приклад використання псевдоелемента.",
        "answer": "`p::first-line { font-weight: bold; }` - зробить жирним перший рядок параграфа. `div::before { content: '->'; }` - додасть стрілку перед вмістом div."
      },
      {
        "id": "css-q7-aq3",
        "question": "Чи можна використовувати два двокрапки (`::`) для псевдокласів?",
        "answer": "Формально, для псевдокласів використовується один двокрапка (`:focus`). Для псевдоелементів рекомендовано використовувати два двокрапки (`::before`) з CSS3, хоча один (`:before`) також працює для сумісності зі старими браузерами."
      }
    ]
  },
  {
    "id": "css-q8",
    "topic": "CSS",
    "mainQuestion": "Що таке `tabindex`? Як і коли його використовувати?",
    "mainAnswer": "Атрибут `tabindex` дозволяє вказати, чи можна фокусуватися на елементі за допомогою клавіші Tab, і в якому порядку. Значення `0` робить елемент фокусованим у природному порядку, `-1` робить його фокусованим лише програмно, а позитивні значення (`1` і більше) визначають порядок табуляції (не рекомендується).",
    "additionalQuestions": [
      {
        "id": "css-q8-aq1",
        "question": "Для чого `tabindex` важливий у контексті доступності?",
        "answer": "Він критично важливий для навігації за допомогою клавіатури, дозволяючи користувачам, які не використовують мишу (наприклад, з порушеннями моторики), взаємодіяти з інтерактивними елементами веб-сторінки."
      },
      {
        "id": "css-q8-aq2",
        "question": "Коли не слід використовувати позитивні значення `tabindex`?",
        "answer": "Не слід використовувати позитивні значення (`tabindex=\"1\"`, `tabindex=\"2\"` тощо), оскільки це порушує природний порядок фокусування, що є непередбачуваним і погано для доступності."
      },
      {
        "id": "css-q8-aq3",
        "question": "Чи можна додати `tabindex` до будь-якого HTML-елемента?",
        "answer": "Так, `tabindex` є глобальним атрибутом і може бути доданий до будь-якого HTML-елемента, хоча він найбільш корисний для інтерактивних елементів (посилання, кнопки, форми) та елементів, які за замовчуванням не фокусуються, але повинні бути доступними через клавіатуру."
      }
    ]
  },
  {
    "id": "css-q9",
    "topic": "CSS",
    "mainQuestion": "Що означають `:focus` та `:active` у CSS?",
    "mainAnswer": "`:focus` — це псевдоклас, який вибирає елемент, який наразі перебуває у фокусі (наприклад, після кліку або навігації за допомогою клавіатури). `:active` — це псевдоклас, який вибирає елемент, який активується користувачем (наприклад, у момент натискання кнопки миші або клавіші на клавіатурі).",
    "additionalQuestions": [
      {
        "id": "css-q9-aq1",
        "question": "Для яких елементів найчастіше використовуються `:focus` та `:active`?",
        "answer": "Найчастіше використовуються для інтерактивних елементів, таких як посилання (`<a>`), кнопки (`<button>`), елементи форм (`<input>`, `<textarea>`)."
      },
      {
        "id": "css-q9-aq2",
        "question": "Чому важливо стилізувати `:focus` стан?",
        "answer": "Стилізація `:focus` важлива для доступності, оскільки вона надає візуальний індикатор для користувачів клавіатури, який елемент є активним. Видаляти стандартний `outline` не рекомендується без заміни."
      },
      {
      "id": "css-q9-aq3",
      "question": "Як довго зберігається `:active` стан?",
      "answer": "Стан `:active` зберігається лише на дуже короткий проміжок часу — поки користувач активно утримує кнопку миші або натискає клавішу. Після відпускання `:active` зникає."
      }
    ]
  },
  {
    "id": "css-q10",
    "topic": "CSS",
    "mainQuestion": "Що таке `outline`? Чи краще його залишати чи видаляти?",
    "mainAnswer": "`outline` — це контур, який браузери відображають навколо елементів, коли вони знаходяться у фокусі (наприклад, після кліку або навігації клавіатурою). Його *краще залишати* або замінювати на інший візуальний індикатор фокусу, оскільки він критично важливий для доступності та навігації клавіатурою.",
    "additionalQuestions": [
      {
        "id": "css-q10-aq1",
        "question": "Яка головна функція `outline`?",
        "answer": "Основна функція — надати візуальний індикатор фокусу для користувачів клавіатури, що дозволяє їм бачити, який елемент наразі активний."
      },
      {
        "id": "css-q10-aq2",
        "question": "Чому розробники іноді видаляють `outline`?",
        "answer": "Іноді його видаляють з естетичних міркувань (`outline: none;`), але це є поганою практикою для доступності, якщо не надається альтернативний візуальний зворотний зв'язок."
      },
      {
        "id": "css-q10-aq3",
        "question": "Як можна замінити `outline` для збереження доступності?",
        "answer": "Можна замінити його на інший візуальний ефект при фокусі, наприклад, зміною `border`, `box-shadow` або `background-color`, що краще відповідає дизайну, але зберігає функціональність."
      }
    ]
  },
  {
    "id": "css-q11",
    "topic": "CSS",
    "mainQuestion": "Поясніть властивість `position` у CSS та її значення.",
    "mainAnswer": "Властивість `position` визначає метод позиціонування елемента в документі. Основні значення: `static` (за замовчуванням, у природному потоці), `relative` (позиціонується відносно свого нормального положення), `absolute` (позиціонується відносно найближчого позиціонованого предка), `fixed` (позиціонується відносно вікна перегляду) та `sticky` (позиціонується як `relative`, доки не досягне певної точки прокрутки, потім стає `fixed`).",
    "additionalQuestions": [
      {
        "id": "css-q11-aq1",
        "question": "Які властивості використовуються разом з `position`?",
        "answer": "Разом з `position` використовуються властивості `top`, `bottom`, `left`, `right` для визначення зміщення елемента."
      },
      {
        "id": "css-q11-aq2",
        "question": "Чим відрізняється `position: absolute` від `position: fixed`?",
        "answer": "`absolute` позиціонується відносно найближчого *позиціонованого* предка і прокручується разом зі сторінкою. `fixed` позиціонується відносно *вікна перегляду* (viewport) і залишається на місці при прокручуванні."
      },
      {
        "id": "css-q11-aq3",
        "question": "Коли варто використовувати `position: sticky`?",
        "answer": "`position: sticky` ідеально підходить для створення 'прилипаючих' елементів, таких як навігаційні панелі, які спочатку прокручуються, а потім 'залишаються' у верхній частині екрану."
      }
    ]
  },
  {
    "id": "css-q12",
    "topic": "CSS",
    "mainQuestion": "Опишіть `z-index` та як формується контекст накладання (stacking context).",
    "mainAnswer": "`z-index` властивість контролює порядок накладання позиціонованих елементів на осі Z (глибина). Елемент з вищим `z-index` перекриває елемент з нижчим. Контекст накладання формується, коли елемент має `position` відмінний від `static` та/або деякі інші властивості (наприклад, `opacity < 1`, `transform`, `flex` або `grid` контейнери, `will-change`). Елементи в одному контексті накладання позиціонуються відносно один одного, але весь контекст діє як єдиний 'шар' в його батьківському контексті.",
    "additionalQuestions": [
      {
        "id": "css-q12-aq1",
        "question": "Чи працює `z-index` для всіх елементів?",
        "answer": "Ні, `z-index` працює тільки для позиціонованих елементів (тобто тих, у кого `position` встановлено на `relative`, `absolute`, `fixed` або `sticky`)."
      },
      {
        "id": "css-q12-aq2",
        "question": "Якщо два елементи мають однаковий `z-index`, хто буде зверху?",
        "answer": "Якщо `z-index` однаковий, порядок накладання визначається порядком їх появи в HTML-документі: пізніший елемент буде зверху."
      },
      {
        "id": "css-q12-aq3",
        "question": "Які інші властивості можуть створити контекст накладання?",
        "answer": "Крім `position` (не static), це можуть бути `opacity` менше 1, `transform` не `none`, `filter` не `none`, `will-change` (для властивостей, що створюють контекст), `flex` або `grid` контейнери, `isolation: isolate`."
      }
    ]
  },
  {
    "id": "css-q13",
    "topic": "CSS",
    "mainQuestion": "У чому різниця між `inline-block`, `block`, `inline`?",
    "mainAnswer": "`display: block;` елементи займають всю доступну ширину, починаються з нового рядка, дозволяють встановлювати `width`, `height`, `margin`, `padding`. `display: inline;` елементи займають лише стільки місця, скільки їм потрібно, не починаються з нового рядка, ігнорують `width`, `height`, вертикальні `margin`/`padding`. `display: inline-block;` поєднує властивості обох: як `inline`, він не починається з нового рядка, але як `block`, він дозволяє встановлювати `width`, `height`, `margin`, `padding` (всі сторони).",
    "additionalQuestions": [
      {
        "id": "css-q13-aq1",
        "question": "Наведіть приклади типових `block` та `inline` елементів.",
        "answer": "Типові `block`: `<div>`, `<p>`, `<h1>`. Типові `inline`: `<span>`, `<a>`, `<strong>`, `<em>`."
      },
      {
        "id": "css-q13-aq2",
        "question": "Коли `inline-block` є особливо корисним?",
        "answer": "`inline-block` дуже корисний для створення елементів навігації, кнопок або іконок, які повинні бути в одному рядку, але також мати задану ширину, висоту та відступи."
      },
      {
        "id": "css-q13-aq3",
        "question": "Як впливає `display` на поведінку елемента у потоці документа?",
        "answer": "`display` контролює, як елемент генерує Box Model та взаємодіє з іншими елементами у нормальному потоці, визначаючи, чи займатиме він весь рядок, чи буде частиною рядка, і як він реагуватиме на властивості розмірів та відступів."
      }
    ]
  },
  {
    "id": "css-q14",
    "topic": "CSS",
    "mainQuestion": "Чи можна застосувати `padding-top` та `padding-bottom` до `inline` елемента?",
    "mainAnswer": "Так, до `inline` елементів можна застосувати `padding-top` та `padding-bottom`. Ці властивості збільшать 'розмір' елемента, але **не вплинуть на розташування сусідніх елементів у вертикальному напрямку**, оскільки `inline` елементи зберігають свій рядок. Це може призвести до накладання вмісту.",
    "additionalQuestions": [
      {
        "id": "css-q14-aq1",
        "question": "Як виглядатиме візуальний ефект `padding-top` на `inline` елементі?",
        "answer": "Зверху та знизу елемента з'явиться візуальний відступ, але це не посуне елементи у вищому або нижчому рядку. Текст може накладатися на цей відступ."
      },
      {
        "id": "css-q14-aq2",
        "question": "Який ефект `padding-left` та `padding-right` на `inline` елементі?",
        "answer": "`padding-left` та `padding-right` працюють нормально для `inline` елементів, збільшуючи простір по горизонталі та відсуваючи сусідні елементи."
      },
      {
        "id": "css-q14-aq3",
        "question": "Якщо потрібно відсунути `inline` елемент вертикально, що робити?",
        "answer": "Щоб коректно відсунути `inline` елемент вертикально, його потрібно змінити на `display: block;` або `display: inline-block;`."
      }
    ]
  },
  {
    "id": "css-q15",
    "topic": "CSS",
    "mainQuestion": "Чи можна застосувати `margin-top` та `margin-bottom` до `inline` елемента?",
    "mainAnswer": "Ні, `margin-top` та `margin-bottom` **не застосовуються** до `inline` елементів і не матимуть жодного ефекту на їх вертикальне розташування чи відступи від інших елементів. Застосовуються лише `margin-left` та `margin-right`.",
    "additionalQuestions": [
      {
        "id": "css-q15-aq1",
        "question": "Які властивості `margin` працюють для `inline` елементів?",
        "answer": "Для `inline` елементів працюють лише `margin-left` та `margin-right`, створюючи горизонтальний відступ."
      },
      {
        "id": "css-q15-aq2",
        "question": "Яке рішення для створення вертикальних відступів між `inline` елементами?",
        "answer": "Для вертикальних відступів `inline` елементи зазвичай обгортають у блокові контейнери, або самі елементи перетворюють на `inline-block` або `block`."
      },
      {
        "id": "css-q15-aq3",
        "question": "Чи є винятки для правила `margin-top/bottom` на `inline`?",
        "answer": "Ні, це стандартна поведінка `inline` елементів згідно з CSS Box Model. Вертикальні маргіни ігноруються."
      }
    ]
  },
  {
    "id": "css-q16",
    "topic": "CSS",
    "mainQuestion": "Що таке 'margin collapse'?",
    "mainAnswer": "'Margin collapse' (схлопування зовнішніх відступів) — це явище в CSS, коли вертикальні зовнішні відступи (margin-top та margin-bottom) сусідніх *блокових* елементів об'єднуються в один спільний відступ, який дорівнює більшому з них. Це відбувається лише у вертикальному напрямку.",
    "additionalQuestions": [
      {
        "id": "css-q16-aq1",
        "question": "Коли відбувається схлопування зовнішніх відступів?",
        "answer": "Схлопування відбувається між: 1. Сусідніми блоковими елементами. 2. Батьківським елементом та його першим/останнім дочірнім елементом, якщо між ними немає `border` або `padding`. 3. Порожнім блоковим елементом без вмісту, `border` або `padding`."
      },
      {
        "id": "css-q16-aq2",
        "question": "Як запобігти схлопуванню зовнішніх відступів?",
        "answer": "Запобігти можна, додавши `padding` або `border` до батьківського елемента, використовуючи `overflow: hidden`, змінюючи `display` (наприклад, на `flex` або `grid` контейнер), або використовуючи `position: absolute`."
      },
      {
        "id": "css-q16-aq3",
        "question": "Чи схлопуються горизонтальні зовнішні відступи?",
        "answer": "Ні, схлопуються лише вертикальні зовнішні відступи. Горизонтальні `margin-left` та `margin-right` завжди додаються."
      }
    ]
  },
  {
    "id": "css-q17",
    "topic": "CSS",
    "mainQuestion": "Що таке `box-sizing`? Навіщо він потрібен?",
    "mainAnswer": "`box-sizing` — це CSS-властивість, яка визначає, як розраховується загальний розмір елемента (width та height), включаючи `padding` та `border`. За замовчуванням (`content-box`), `padding` та `border` додаються до заданої `width`/`height`. При `border-box`, `padding` та `border` *включаються* в задану `width`/`height`, що спрощує розрахунок розмірів макетів.",
    "additionalQuestions": [
      {
        "id": "css-q17-aq1",
        "question": "Яке значення `box-sizing` вважається кращим для верстки і чому?",
        "answer": "`border-box` часто вважається кращим, оскільки він дозволяє легше контролювати розміри елементів і спрощує розрахунки при створенні макетів, оскільки `padding` та `border` не 'виштовхують' елемент за межі заданої ширини/висоти."
      },
      {
        "id": "css-q17-aq2",
        "question": "Як встановити `box-sizing: border-box` для всіх елементів?",
        "answer": "Поширеною практикою є використання універсального селектора: `*, *::before, *::after { box-sizing: border-box; }`."
      },
      {
        "id": "css-q17-aq3",
        "question": "Чи впливає `box-sizing` на `margin`?",
        "answer": "Ні, `box-sizing` впливає лише на те, як `width`, `height`, `padding` та `border` взаємодіють. `margin` завжди залишається зовні розміру елемента."
      }
    ]
  }
]
