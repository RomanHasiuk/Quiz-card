[
  {
    "id": "preprocessors-q1",
    "topic": "Preprocessors",
    "mainQuestion": "Що таке CSS-препроцесори? Назвіть кілька з них.",
    "mainAnswer": "CSS-препроцесори — це мови сценаріїв, які розширюють можливості стандартного CSS, дозволяючи використовувати змінні, вкладеність, міксини, функції, успадкування та інші функції, що полегшують написання та підтримку CSS-коду. Після написання код препроцесора компілюється в звичайний CSS, який розуміють браузери. Популярні приклади: Sass (SCSS), Less, Stylus.",
    "additionalQuestions": [
      {
        "id": "preprocessors-q1-aq1",
        "question": "Яка головна перевага використання CSS-препроцесорів?",
        "answer": "Головна перевага — підвищення ефективності, читабельності та підтримуваності CSS-коду за рахунок використання програмних концепцій, яких немає в чистому CSS."
      },
      {
        "id": "preprocessors-q1-aq2",
        "question": "Чи розуміють браузери код препроцесорів безпосередньо?",
        "answer": "Ні, браузери розуміють лише стандартний CSS. Код препроцесора завжди повинен бути скомпільований у чистий CSS перед використанням на веб-сторінці."
      },
      {
        "id": "preprocessors-q1-aq3",
        "question": "Які інструменти потрібні для роботи з препроцесорами?",
        "answer": "Потрібні компілятори або збірка інструментів (наприклад, Node.js з відповідними пакетами npm), які перетворюють код препроцесора на CSS."
      }
    ]
  },
  {
    "id": "preprocessors-q2",
    "topic": "Preprocessors",
    "mainQuestion": "Поясніть основні можливості Sass (вкладеність, міксини, функції, змінні, плейсхолдери).",
    "mainAnswer": "Sass (Syntactically Awesome Style Sheets) розширює CSS: **Вкладеність (Nesting)** дозволяє вкладати CSS-правила одне в одне. **Міксини (Mixins)** дозволяють повторно використовувати групи CSS-декларацій. **Функції (Functions)** обчислюють значення, які можуть бути використані в CSS. **Змінні (Variables)** дозволяють зберігати та повторно використовувати значення (наприклад, кольори, шрифти). **Плейсхолдери (Placeholders)** дозволяють розширювати набори стилів, не генеруючи надлишковий код.",
    "additionalQuestions": [
      {
        "id": "preprocessors-q2-aq1",
        "question": "Наведіть приклад використання змінних у Sass.",
        "answer": "$primary-color: #3498db; — це змінна, яку можна використовувати в стилях, наприклад, `color: $primary-color;`. Це дозволяє легко змінювати кольори в усьому проекті, змінюючи лише значення змінної."
      },
      {
        "id": "preprocessors-q2-aq2",
        "question": "Для чого корисні міксини?",
        "answer": "Міксини дуже корисні для уникнення дублювання коду, особливо для вендорних префіксів або складних наборів властивостей, які повторюються в різних місцях."
      },
      {
        "id": "preprocessors-q2-aq3",
        "question": "Яка перевага використання плейсхолдерів перед звичайними класами?",
        "answer": "Плейсхолдери (`%placeholder`) не генерують CSS-код самостійно, доки вони не будуть розширені за допомогою `@extend`. Це допомагає зменшити розмір скомпільованого CSS, уникаючи дублювання правил."
      }
    ]
  },
  {
    "id": "preprocessors-q3",
    "topic": "Preprocessors",
    "mainQuestion": "У чому різниця між Sass та SCSS?",
    "mainAnswer": "Sass (Syntactically Awesome Style Sheets) має два синтаксиси: оригінальний 'indented syntax' (Sass) без фігурних дужок і крапок з комою, де структура визначається відступами, та SCSS (Sassy CSS), який є надбудовою над CSS3 і використовує синтаксис, максимально схожий на звичайний CSS (з фігурними дужками та крапками з комою). SCSS є більш поширеним і рекомендованим, оскільки він легший для розуміння тим, хто вже знайомий з CSS.",
    "additionalQuestions": [
      {
        "id": "preprocessors-q3-aq1",
        "question": "Який синтаксис ви оберете для нового проекту і чому?",
        "answer": "Для нового проекту я б обрав SCSS, оскільки він сумісний з чистим CSS, легше читається для нових розробників і дозволяє просто копіювати і вставляти CSS-код."
      },
      {
        "id": "preprocessors-q3-aq2",
        "question": "Чи можна перетворити файли Sass на SCSS і навпаки?",
        "answer": "Так, Sass надає інструменти для конвертації файлів між цими двома синтаксисами (`sass-convert`)."
      },
      {
        "id": "preprocessors-q3-aq3",
        "question": "Які розширення файлів використовуються для Sass та SCSS?",
        "answer": "Для оригінального синтаксису Sass використовується розширення `.sass`, а для SCSS — `.scss`."
      }
    ]
  },
  {
    "id": "preprocessors-q4",
    "topic": "Preprocessors",
    "mainQuestion": "Що таке PostCSS?",
    "mainAnswer": "PostCSS — це інструмент для трансформації CSS за допомогою JavaScript-плагінів. Він не є препроцесором у традиційному розумінні (не додає нові можливості синтаксису), але дозволяє виконувати різні операції над CSS, такі як додавання вендорних префіксів (Autoprefixer), лінтинг (Stylelint), використання майбутніх CSS-синтаксисів (CSSNext) або оптимізація коду.",
    "additionalQuestions": [
      {
        "id": "preprocessors-q4-aq1",
        "question": "Чим PostCSS відрізняється від препроцесорів типу Sass?",
        "answer": "Sass розширює CSS, додаючи нові можливості синтаксису (змінні, міксини), а PostCSS — це платформа, яка обробляє і трансформує вже написаний CSS за допомогою плагінів. Вони часто використовуються разом (спочатку Sass, потім PostCSS)."
      },
      {
        "id": "preprocessors-q4-aq2",
        "question": "Наведіть приклад популярного плагіна PostCSS.",
        "answer": "Найпопулярніший плагін — Autoprefixer, який автоматично додає вендорні префікси до CSS-властивостей."
      },
      {
        "id": "preprocessors-q4-aq3",
        "question": "Чи може PostCSS замінити препроцесор?",
        "answer": "Він може частково замінити деякі функції препроцесорів (наприклад, Nesting Plugin дозволяє вкладеність). Однак для повноцінних програмних можливостей (міксини, цикли, умови) зазвичай все ще потрібен препроцесор."
      }
    ]
  }
]
