[
  {
    "id": "mongodb-q01",
    "topic": "MongoDB",
    "mainQuestion": "Що таке MongoDB та чим вона відрізняється від реляційних баз даних?",
    "mainAnswer": "MongoDB – це популярна документоорієнтована NoSQL база даних. Вона зберігає дані у гнучких, JSON-подібних документах (BSON), на відміну від реляційних баз даних, які використовують таблиці з фіксованою схемою. Основні відмінності: відсутність фіксованої схеми, горизонтальне масштабування (шардінг), орієнтація на документи, використання BSON, замість SQL – мова запитів на основі JSON.",
    "additionalQuestions": [
      {
        "id": "mongodb-q01-aq1",
        "question": "Що означає 'документоорієнтована' база даних?",
        "answer": "Документоорієнтована означає, що дані зберігаються у вигляді документів, які є самодостатніми одиницями. У MongoDB ці документи мають формат BSON (бінарний JSON) і можуть містити вкладені структури, масиви, що робить їх дуже гнучкими."
      },
      {
        "id": "mongodb-q01-aq2",
        "question": "Які основні переваги MongoDB?",
        "answer": "Гнучка схема, висока масштабованість (горизонтальне масштабування, шардінг), висока продуктивність для великих обсягів даних, легкість інтеграції з веб-додатками (через JSON-формат) та велика спільнота."
      },
      {
        "id": "mongodb-q01-aq3",
        "question": "Коли варто використовувати MongoDB замість реляційної БД?",
        "answer": "MongoDB підходить для додатків з часто змінною схемою даних, великими обсягами неструктурованих або напівструктурованих даних, високими вимогами до масштабованості та швидкого розгортання, а також для додатків, де потрібна швидка ітерація та гнучкість у розробці."
      }
    ]
  },
  {
    "id": "mongodb-q02",
    "topic": "MongoDB",
    "mainQuestion": "Що таке BSON?",
    "mainAnswer": "BSON (Binary JSON) – це бінарне представлення JSON-документів, яке використовується в MongoDB для зберігання даних. Він розширює JSON додатковими типами даних (наприклад, Date, BinData, ObjectId) та є більш ефективним для зберігання та передачі, ніж текстовий JSON, завдяки своїй бінарній природі.",
    "additionalQuestions": [
      {
        "id": "mongodb-q02-aq1",
        "question": "Які переваги BSON над JSON?",
        "answer": "Переваги BSON: розширені типи даних (що відсутні в JSON), ефективніше використання пам'яті та швидша обробка даних завдяки бінарному формату, а також підтримка швидкого пропуску нерелевантних полів для запитів."
      },
      {
        "id": "mongodb-q02-aq2",
        "question": "Чи можна зберігати JSON безпосередньо в MongoDB?",
        "answer": "Так, ви можете вставляти JSON-подібні об'єкти в MongoDB, але вони будуть внутрішньо конвертовані в BSON для зберігання. При отриманні даних з MongoDB вони зазвичай повертаються у вигляді JSON-сумісного формату."
      },
      {
        "id": "mongodb-q02-aq3",
        "question": "Які типи даних підтримує BSON, яких немає в JSON?",
        "answer": "BSON підтримує такі типи даних: ObjectId, Date, Timestamp, Regular Expression, Binary data, Decimal128, MinKey, MaxKey, Undefined, DBPointer, JavaScript code."
      }
    ]
  },
  {
    "id": "mongodb-q03",
    "topic": "MongoDB",
    "mainQuestion": "Поясніть терміни 'Collection' та 'Document' у MongoDB.",
    "mainAnswer": "У MongoDB 'Document' – це основна одиниця даних, яка є набором пар поле-значення, аналогічно рядку у реляційній базі даних, але з гнучкою, вкладеною структурою (JSON-подібний об'єкт). 'Collection' – це група документів, аналогічно таблиці в реляційній базі даних. Колекції не мають фіксованої схеми і можуть містити документи з різними полями.",
    "additionalQuestions": [
      {
        "id": "mongodb-q03-aq1",
        "question": "Чи можуть документи в одній колекції мати різні структури?",
        "answer": "Так, це одна з ключових особливостей MongoDB. Документи в одній колекції можуть мати абсолютно різні поля, що надає високу гнучкість для зберігання різноманітних даних."
      },
      {
        "id": "mongodb-q03-aq2",
        "question": "Що таке `_id` поле в MongoDB?",
        "answer": "`_id` – це обов'язкове поле в кожному документі MongoDB, яке слугує первинним ключем. Воно повинно бути унікальним у колекції. Якщо ви не вказуєте `_id` під час вставки, MongoDB автоматично генерує `ObjectId`."
      },
      {
        "id": "mongodb-q03-aq3",
        "question": "Яка аналогія між термінами SQL та MongoDB?",
        "answer": "SQL: `Database` -> MongoDB: `Database`; SQL: `Table` -> MongoDB: `Collection`; SQL: `Row` -> MongoDB: `Document`; SQL: `Column` -> MongoDB: `Field`."
      }
    ]
  },
  {
    "id": "mongodb-q04",
    "topic": "MongoDB",
    "mainQuestion": "Опишіть основні CRUD-операції в MongoDB.",
    "mainAnswer": "CRUD – це акронім для основних операцій бази даних: Create (створення), Read (читання), Update (оновлення) та Delete (видалення). У MongoDB вони реалізуються за допомогою методів: `insertOne()/insertMany()` для Create, `find()/findOne()` для Read, `updateOne()/updateMany()/replaceOne()` для Update, та `deleteOne()/deleteMany()` для Delete.",
    "additionalQuestions": [
      {
        "id": "mongodb-q04-aq1",
        "question": "Наведіть приклад запиту на вставку документа.",
        "answer": "```javascript\ndb.users.insertOne({ name: 'Іван', age: 30, city: 'Київ' });\n```"
      },
      {
        "id": "mongodb-q04-aq2",
        "question": "Як знайти всі документи, де вік більший за 25?",
        "answer": "```javascript\ndb.users.find({ age: { $gt: 25 } });\n```"
      },
      {
        "id": "mongodb-q04-aq3",
        "question": "Як оновити документ, змінивши поле `city`?",
        "answer": "```javascript\ndb.users.updateOne(\n  { name: 'Іван' },\n  { $set: { city: 'Львів' } }\n);\n```"
      }
    ]
  },
  {
    "id": "mongodb-q05",
    "topic": "MongoDB",
    "mainQuestion": "Що таке індекси в MongoDB і як вони працюють?",
    "mainAnswer": "Індекси в MongoDB – це спеціальні структури даних, які зберігають невелику частину набору даних у зручному для читання форматі, що дозволяє швидко знаходити документи. Вони покращують продуктивність запитів, зменшуючи кількість документів, які потрібно сканувати для пошуку. MongoDB підтримує різні типи індексів, включаючи єдині (single field), складові (compound), багатоключові (multikey) та текстові індекси.",
    "additionalQuestions": [
      {
        "id": "mongodb-q05-aq1",
        "question": "Наведіть приклад створення індексу.",
        "answer": "```javascript\ndb.users.createIndex({ age: 1 }); // Створює зростаючий індекс на полі 'age'\n```"
      },
      {
        "id": "mongodb-q05-aq2",
        "question": "Які недоліки використання індексів у MongoDB?",
        "answer": "Індекси споживають додатковий простір на диску. Вони також уповільнюють операції запису (вставки, оновлення, видалення), оскільки при кожній зміні даних індекс також потрібно оновлювати."
      },
      {
        "id": "mongodb-q05-aq3",
        "question": "Що таке 'explain()' у MongoDB?",
        "answer": "`explain()` – це метод, який додається до запиту, щоб отримати інформацію про план виконання цього запиту. Він допомагає зрозуміти, як MongoDB використовує індекси, скільки документів сканується, і оптимізувати запити."
      }
    ]
  },
  {
    "id": "mongodb-q06",
    "topic": "MongoDB",
    "mainQuestion": "Що таке Aggregation Pipeline у MongoDB?",
    "mainAnswer": "Aggregation Pipeline (конвеєр агрегації) – це потужний інструмент у MongoDB для обробки документів та повернення агрегованих результатів. Він дозволяє виконувати складні операції, такі як фільтрація, групування, сортування, трансформація та об'єднання даних, поетапно, використовуючи послідовність 'стадій' (stages).",
    "additionalQuestions": [
      {
        "id": "mongodb-q06-aq1",
        "question": "Назвіть кілька поширених стадій у Aggregation Pipeline.",
        "answer": "Поширені стадії: `$match` (фільтрація документів), `$group` (групування документів та застосування агрегатних функцій), `$project` (переформатування документів, вибір/виключення полів), `$sort` (сортування), `$limit` (обмеження кількості документів), `$lookup` (лівосторонній зовнішній JOIN з іншою колекцією)."
      },
      {
        "id": "mongodb-q06-aq2",
        "question": "Як `$group` використовується в Aggregation Pipeline?",
        "answer": "Стадія `$group` групує документи за вказаним ідентифікатором групи та дозволяє застосовувати агрегатні вирази (наприклад, `$sum`, `$avg`, `$count`) до згрупованих документів. Вона зазвичай використовується для підрахунку підсумків або агрегування даних."
      },
      {
        "id": "mongodb-q06-aq3",
        "question": "Для чого потрібна стадія `$lookup`?",
        "answer": "Стадія `$lookup` виконує лівосторонній зовнішній JOIN між документами з поточної колекції та документами з іншої колекції. Вона дозволяє 'з'єднувати' дані з різних колекцій, що є аналогією JOIN у реляційних базах даних."
      }
    ]
  },
  {
    "id": "mongodb-q07",
    "topic": "MongoDB",
    "mainQuestion": "Поясніть концепцію Replication (Реплікація) у MongoDB.",
    "mainAnswer": "Реплікація в MongoDB – це процес синхронізації даних між кількома серверами для забезпечення високої доступності та відмовостійкості. Вона реалізується за допомогою 'наборів реплік' (replica sets), де один сервер є 'первинним' (primary) і обробляє всі операції запису, а інші є 'вторинними' (secondaries) і синхронізують дані з первинним. Вторинні можуть обробляти запити на читання.",
    "additionalQuestions": [
      {
        "id": "mongodb-q07-aq1",
        "question": "Які переваги використання Replica Sets?",
        "answer": "Переваги: висока доступність (автоматичне перемикання на вторинний сервер у разі відмови первинного), відмовостійкість, масштабування читання (розподіл запитів на читання між вторинними), резервне копіювання (можна робити з вторинного сервера)."
      },
      {
        "id": "mongodb-q07-aq2",
        "question": "Що станеться, якщо 'primary' вузол вийде з ладу?",
        "answer": "Якщо 'primary' вузол виходить з ладу, Replica Set автоматично проводить вибори (election) серед 'secondary' вузлів, щоб обрати нового 'primary'. Цей процес називається автоматичним відмовостійким перемиканням (automatic failover)."
      },
      {
        "id": "mongodb-q07-aq3",
        "question": "Чи можна записувати дані у 'secondary' вузол?",
        "answer": "За замовчуванням, операції запису виконуються лише на 'primary' вузлі. Однак, можна налаштувати деякі клієнти дозволяти запис на вторинні вузли, але це може призвести до проблем з консистентністю, оскільки дані можуть ще не бути повністю синхронізовані."
      }
    ]
  },
  {
    "id": "mongodb-q08",
    "topic": "MongoDB",
    "mainQuestion": "Що таке Sharding (Шардінг) у MongoDB?",
    "mainAnswer": "Sharding (шардінг) – це метод горизонтального масштабування в MongoDB, який дозволяє розподіляти великі набори даних та навантаження запитів між кількома серверами (шардами). Кожен шард зберігає частину даних колекції, що дозволяє MongoDB обробляти набагато більші обсяги даних, ніж один сервер може витримати.",
    "additionalQuestions": [
      {
        "id": "mongodb-q08-aq1",
        "question": "Для чого потрібен Sharding?",
        "answer": "Sharding потрібен для масштабування додатків, які обробляють дуже великі обсяги даних або мають високе навантаження запитів, що не може бути ефективно оброблено одним сервером. Він дозволяє розподіляти I/O та обчислювальні операції між кількома машинами."
      },
      {
        "id": "mongodb-q08-aq2",
        "question": "Що таке 'shard key'?",
        "answer": "'Shard key' – це поле або набір полів у документі, за яким MongoDB розподіляє дані по шардах. Вибір ефективного shard key критично важливий для продуктивності та рівномірного розподілу даних."
      },
      {
        "id": "mongodb-q08-aq3",
        "question": "Які компоненти входять до Sharded Cluster?",
        "answer": "Sharded Cluster складається з: **Shard** (набір реплік, що містить підмножину даних), **Config Servers** (зберігають метадані про кластер, включаючи мапінг даних до шардів), та **mongos** (маршрутизатор запитів, який перенаправляє запити клієнтів до відповідних шардів)."
      }
    ]
  },
  {
    "id": "mongodb-q09",
    "topic": "MongoDB",
    "mainQuestion": "Опишіть рівні ізоляції (Read Concern) в MongoDB.",
    "mainAnswer": "MongoDB надає різні рівні ізоляції (Read Concern), які дозволяють контролювати, наскільки 'свіжі' дані клієнт готовий читати з реплікаційного набору. Це компроміс між консистентністю та доступністю/продуктивністю. Основні рівні: `local`, `available`, `majority`, `linearizable` та `snapshot`.",
    "additionalQuestions": [
      {
        "id": "mongodb-q09-aq1",
        "question": "Який рівень `Read Concern` забезпечує найсильнішу консистентність?",
        "answer": "Рівень `linearizable` забезпечує найсильнішу консистентність, гарантуючи, що всі операції читання повертають найактуальніші дані, ніби вони виконувалися послідовно в реальному часі. Проте це може вплинути на продуктивність."
      },
      {
        "id": "mongodb-q09-aq2",
        "question": "Який рівень `Read Concern` використовується за замовчуванням?",
        "answer": "За замовчуванням використовується рівень `local` (для читання з primary) або `available` (для читання з secondary). Ці рівні забезпечують високу доступність і продуктивність, але можуть повертати не повністю синхронізовані дані."
      },
      {
        "id": "mongodb-q09-aq3",
        "question": "Для чого потрібен рівень `majority`?",
        "answer": "Рівень `majority` гарантує, що дані, які ви читаєте, були підтверджені більшістю вузлів у реплікаційному наборі. Це забезпечує високий рівень консистентності, уникнення 'фантомних читань' та стійкість до збоїв окремих вузлів."
      }
    ]
  },
  {
    "id": "mongodb-q10",
    "topic": "MongoDB",
    "mainQuestion": "Що таке 'GridFS' у MongoDB і для чого він використовується?",
    "mainAnswer": "GridFS – це специфікація для зберігання великих файлів (наприклад, зображень, відео, аудіо) у MongoDB. Замість того, щоб зберігати весь файл як один документ (що має обмеження розміру), GridFS розбиває файл на менші 'chunks' (шматки) і зберігає кожен chunk як окремий документ у колекції `fs.chunks`, а метадані файлу – у колекції `fs.files`.",
    "additionalQuestions": [
      {
        "id": "mongodb-q10-aq1",
        "question": "Яке максимальне обмеження розміру документа в MongoDB?",
        "answer": "Максимальний розмір BSON-документа в MongoDB становить 16 мегабайт. GridFS обходить це обмеження, розбиваючи великі файли на менші шматки."
      },
      {
        "id": "mongodb-q10-aq2",
        "question": "Коли варто використовувати GridFS, а не файлову систему?",
        "answer": "GridFS варто використовувати, коли потрібно: зберігати великі файли разом з іншими даними MongoDB, мати можливість реплікації та шардингу для великих файлів, або коли файли потрібно легко доступні через API без необхідності розгортати окреме файлове сховище."
      },
      {
        "id": "mongodb-q10-aq3",
        "question": "Які недоліки GridFS?",
        "answer": "Недоліки включають: відсутність прямого доступу до файлів через файлову систему, потенційне збільшення використання дискового простору через додаткові метадані, і для дуже частих дрібних оновлень файлів може бути менш ефективним, ніж звичайна файлова система."
      }
    ]
  },
  {
    "id": "mongodb-q11",
    "topic": "MongoDB",
    "mainQuestion": "Як забезпечити безпеку в MongoDB?",
    "mainAnswer": "Безпека в MongoDB включає: увімкнення автентифікації та авторизації (наприклад, рольова модель доступу), використання SSL/TLS для шифрування мережевого трафіку, увімкнення журнали аудиту, обмеження мережевого доступу (брандмауер), шифрування даних на рівні сховища, регулярні оновлення та дотримання принципів найменших привілеїв.",
    "additionalQuestions": [
      {
        "id": "mongodb-q11-aq1",
        "question": "Що таке рольова модель доступу в MongoDB?",
        "answer": "Рольова модель доступу дозволяє призначати користувачам ролі (наприклад, `read`, `readWrite`, `dbAdmin`), які визначають, до яких ресурсів (баз даних, колекцій) і які операції вони можуть виконувати. Це забезпечує гранульований контроль доступу."
      },
      {
        "id": "mongodb-q11-aq2",
        "question": "Чому важливо шифрувати дані в MongoDB?",
        "answer": "Шифрування даних (як під час передачі, так і на сховищі) захищає конфіденційну інформацію від несанкціонованого доступу, навіть якщо зловмисники отримають доступ до файлів бази даних або перехоплять мережевий трафік."
      },
      {
        "id": "mongodb-q11-aq3",
        "question": "Чи є MongoDB вразливою до SQL Injection?",
        "answer": "MongoDB не використовує SQL, тому вона не вразлива до традиційних SQL Injection. Однак, вона може бути вразлива до 'NoSQL Injection' або 'MongoDB Injection', якщо вхідні дані використовуються без валідації для формування запитів (наприклад, операторів `$where` або `$eval`). Завжди необхідно валідувати та екранувати вхідні дані."
      }
    ]
  },
  {
    "id": "mongodb-q12",
    "topic": "MongoDB",
    "mainQuestion": "Що таке Embedded Documents (вбудовані документи) і коли їх використовувати?",
    "mainAnswer": "Embedded Documents – це документи, які вкладаються безпосередньо в інший документ. Вони використовуються для представлення зв'язків 'один-до-одного' або 'один-до-багатьох', коли вкладені дані є логічно частиною батьківського документа і часто запитуються разом з ним. Це зменшує кількість запитів до БД та покращує продуктивність читання.",
    "additionalQuestions": [
      {
        "id": "mongodb-q12-aq1",
        "question": "Наведіть приклад використання Embedded Documents.",
        "answer": "```json\n{\n  \"_id\": \"user123\",\n  \"name\": \"Іван\",\n  \"email\": \"ivan@example.com\",\n  \"address\": { // Embedded Document\n    \"street\": \"Вулиця Соборна, 10\",\n    \"city\": \"Київ\",\n    \"zip\": \"01001\"\n  },\n  \"phones\": [ // Array of Embedded Documents\n    { \"type\": \"home\", \"number\": \"+380-44-123-4567\" },\n    { \"type\": \"work\", \"number\": \"+380-44-765-4321\" }\n  ]\n}\n```"
      },
      {
        "id": "mongodb-q12-aq2",
        "question": "Які переваги Embedded Documents?",
        "answer": "Переваги: атомарність операцій (один запис/читання всього документа), краща продуктивність для частих запитів 'батько-дитина', зменшення кількості JOIN-ів на стороні додатка або Aggregation Pipeline."
      },
      {
        "id": "mongodb-q12-aq3",
        "question": "Які недоліки Embedded Documents?",
        "answer": "Недоліки: обмеження розміру документа (16MB), складність оновлення окремих вкладених елементів, потенційна надмірність даних, якщо вкладені дані використовуються в багатьох документах (тоді краще використовувати посилання)."
      }
    ]
  },
  {
    "id": "mongodb-q13",
    "topic": "MongoDB",
    "mainQuestion": "Що таке 'Reference' (посилання) в MongoDB і коли їх використовувати?",
    "mainAnswer": "Reference (посилання) – це підхід до моделювання зв'язків у MongoDB, де замість вбудовування документів зберігається лише їхній `_id` як посилання в іншому документі. Цей підхід аналогічний зовнішнім ключам у реляційних базах даних. Використовується, коли зв'язки є 'один-до-багатьох' або 'багато-до-багатьох', дані часто змінюються незалежно, або вкладені документи можуть бути дуже великими чи їх багато.",
    "additionalQuestions": [
      {
        "id": "mongodb-q13-aq1",
        "question": "Наведіть приклад використання Reference.",
        "answer": "```json\n// Колекція 'users'\n{\n  \"_id\": \"user123\",\n  \"name\": \"Іван\",\n  \"email\": \"ivan@example.com\"\n}\n\n// Колекція 'posts'\n{\n  \"_id\": \"postA\",\n  \"title\": \"Мій перший пост\",\n  \"author_id\": \"user123\" // Посилання на _id користувача\n}\n```"
      },
      {
        "id": "mongodb-q13-aq2",
        "question": "Які переваги використання References?",
        "answer": "Переваги: гнучкість у масштабуванні (колекції можуть бути на різних шардах), уникнення дублювання даних, зменшення розміру документів, легкість оновлення пов'язаних документів без впливу на інші."
      },
      {
        "id": "mongodb-q13-aq3",
        "question": "Які недоліки використання References?",
        "answer": "Недоліки: вимагає додаткових запитів до бази даних для 'розділення' (дереференсування) даних, що може призвести до проблеми N+1 запитів. Для об'єднання даних потрібне використання `$lookup` в Aggregation Pipeline або ручне об'єднання на рівні додатка."
      }
    ]
  },
  {
    "id": "mongodb-q14",
    "topic": "MongoDB",
    "mainQuestion": "Що таке Journaling у MongoDB?",
    "mainAnswer": "Journaling (журналування) – це механізм у MongoDB, який записує операції модифікації даних у спеціальний журнал (journal) до того, як вони будуть застосовані до основних файлів даних. Це забезпечує стійкість (Durability) та цілісність даних у разі раптового збою або відключення живлення, дозволяючи відновити базу даних до узгодженого стану.",
    "additionalQuestions": [
      {
        "id": "mongodb-q14-aq1",
        "question": "Для чого потрібен Journaling?",
        "answer": "Journaling потрібен для забезпечення відновлення даних після збою. Він гарантує, що операції, які вже були записані в журнал, але ще не збережені у файлах даних, не будуть втрачені і можуть бути відтворені при перезапуску сервера."
      },
      {
        "id": "mongodb-q14-aq2",
        "question": "Чи впливає Journaling на продуктивність?",
        "answer": "Так, Journaling може незначно впливати на продуктивність запису, оскільки кожна операція запису повинна бути записана двічі: спочатку в журнал, а потім у файли даних. Однак цей вплив, як правило, несуттєвий і є необхідним компромісом для забезпечення стійкості даних."
      },
      {
        "id": "mongodb-q14-aq3",
        "question": "Чи можна вимкнути Journaling?",
        "answer": "Вимкнення Journaling можливе, але не рекомендується для виробничих середовищ, оскільки це значно збільшує ризик втрати даних у разі збою. Його іноді вимикають для тестів продуктивності або в дуже специфічних сценаріях, де втрата даних прийнятна."
      }
    ]
  },
  {
    "id": "mongodb-q15",
    "topic": "MongoDB",
    "mainQuestion": "Як оптимізувати продуктивність запитів у MongoDB?",
    "mainAnswer": "Оптимізація продуктивності запитів у MongoDB включає: створення відповідних індексів, правильне моделювання даних (вибір між вбудованими документами та посиланнями), використання Aggregation Pipeline для складних операцій, розумне використання `limit()` та `skip()`, використання Projection для вибору тільки необхідних полів, та розуміння механізмів Read Concern.",
    "additionalQuestions": [
      {
        "id": "mongodb-q15-aq1",
        "question": "Чому важливо використовувати Projection?",
        "answer": "Projection (`db.collection.find({}, { field: 1 })`) дозволяє вказати, які поля документа повертати в результаті запиту. Це зменшує обсяг даних, що передаються по мережі, та обсяг пам'яті, необхідний для обробки, що значно покращує продуктивність, особливо для великих документів."
      },
      {
        "id": "mongodb-q15-aq2",
        "question": "Яка роль об'єкта `_id` в оптимізації?",
        "answer": "Поле `_id` завжди має унікальний індекс за замовчуванням, що робить пошук за `_id` дуже ефективним. Оскільки `_id` є кластерним індексом, він також оптимізує порядок зберігання даних на диску, що прискорює читання пов'язаних документів."
      },
      {
        "id": "mongodb-q15-aq3",
        "question": "Як уникнути 'blocking' операцій у MongoDB?",
        "answer": "'Blocking' операції можуть виникнути при виконанні запитів, які вимагають сканування великої кількості документів без індексу, або при виконанні агрегацій, що перевищують ліміт пам'яті. Щоб уникнути цього, необхідно використовувати відповідні індекси, оптимізувати Aggregation Pipeline, а в деяких випадках розглянути можливість шардингу."
      }
    ]
  },
  {
    "id": "mongodb-q16",
    "topic": "MongoDB",
    "mainQuestion": "Що таке Transactions (транзакції) у MongoDB?",
    "mainAnswer": "Transactions (транзакції) у MongoDB дозволяють виконувати кілька операцій запису як єдину атомарну операцію, що гарантує консистентність даних. Вони підтримують ACID-принципи (Atomicity, Consistency, Isolation, Durability) і дозволяють виконувати складні операції з кількома колекціями або документами, забезпечуючи, що всі зміни будуть застосовані або скасовані разом.",
    "additionalQuestions": [
      {
        "id": "mongodb-q16-aq1",
        "question": "Як почати транзакцію в MongoDB?",
        "answer": "Транзакція починається за допомогою методу `startSession()` для створення сесії, а потім виклику `session.startTransaction()`. Після виконання всіх операцій потрібно викликати `session.commitTransaction()` для підтвердження або `session.abortTransaction()` для скасування."
      },
      {
        "id": "mongodb-q16-aq2",
        "question": "Які обмеження транзакцій у MongoDB?",
        "answer": "Обмеження включають: транзакції можуть охоплювати лише колекції в одному реплікаційному наборі (не між наборами), максимальний розмір транзакції обмежений 16MB, і транзакції можуть впливати на продуктивність через блокування документів."
      },
      {
        "id": "mongodb-q16-aq3",
        "question": "Чи підтримує MongoDB транзакції в шардованих кластерах?",
        "answer": "Так, MongoDB підтримує транзакції в шардованих кластерах з версії 4.2. Це дозволяє виконувати атомарні операції на даних, розподілених між кількома шардовими вузлами."
      }
    ]
  }
]
