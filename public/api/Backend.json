[
  {
    "id": "backend_001",
    "topic": "Backend",
    "mainQuestion": "Що таке Node.js, npm та package.json?",
    "mainAnswer": "Node.js – це JavaScript-середовище виконання, яке дозволяє запускати JavaScript на стороні сервера. **npm** (Node Package Manager) – це менеджер пакетів для Node.js, який використовується для встановлення, керування та спільного використання бібліотек та пакетів коду. **package.json** – це файл маніфесту, який містить метадані про проєкт Node.js, такі як назва, версія, залежності, скрипти та автор.",
    "additionalQuestions": [
      {
        "id": "backend_001_1",
        "question": "Для чого використовується Node.js?",
        "answer": "Node.js ідеально підходить для створення масштабованих мережевих застосунків, таких як API, мікросервіси, веб-сокети та застосунки реального часу."
      },
      {
        "id": "backend_001_2",
        "question": "Яка роль npm в розробці на Node.js?",
        "answer": "npm спрощує керування залежностями, дозволяючи розробникам легко додавати, оновлювати та видаляти бібліотеки, необхідні для проєкту."
      },
      {
        "id": "backend_001_3",
        "question": "Які ключові поля містить package.json?",
        "answer": "Окрім назви та версії, package.json часто містить поля `dependencies` (залежності, необхідні для роботи застосунку) та `devDependencies` (залежності для розробки та тестування)."
      }
    ]
  },
  {
    "id": "backend_002",
    "topic": "Backend",
    "mainQuestion": "Як працюють export та import у Node.js?",
    "mainAnswer": "У Node.js для роботи з модулями використовуються механізми **CommonJS** (`require()` та `module.exports`) або **ES Modules** (`import` та `export`). `export` використовується для того, щоб зробити функції, об'єкти або змінні доступними з інших файлів, а `import` – для їхнього використання в поточному файлі.",
    "additionalQuestions": [
      {
        "id": "backend_002_1",
        "question": "Яка різниця між CommonJS та ES Modules?",
        "answer": "CommonJS є синхронним, а ES Modules – асинхронним. ES Modules є стандартом JavaScript, а CommonJS – специфічним для Node.js."
      },
      {
        "id": "backend_002_2",
        "question": "Як експортувати кілька елементів з одного файлу?",
        "answer": "Для CommonJS можна використовувати `module.exports = { item1, item2 }`. Для ES Modules – `export { item1, item2 };`."
      },
      {
        "id": "backend_002_3",
        "question": "Як імпортувати конкретні елементи з модуля?",
        "answer": "Для CommonJS: `const { item1 } = require('./module');`. Для ES Modules: `import { item1 } from './module';`."
      }
    ]
  },
  {
    "id": "backend_003",
    "topic": "Backend",
    "mainQuestion": "Опишіть засоби роботи з файлами в Node.js.",
    "mainAnswer": "У Node.js для роботи з файловою системою використовується вбудований модуль **`fs` (File System)**. Він надає методи для читання, запису, оновлення, видалення файлів та каталогів, а також для отримання інформації про них. Модуль `fs` підтримує як синхронні, так і асинхронні операції.",
    "additionalQuestions": [
      {
        "id": "backend_003_1",
        "question": "Які основні функції модуля `fs`?",
        "answer": "Серед основних функцій: `fs.readFile()` (читання файлу), `fs.writeFile()` (запис у файл), `fs.mkdir()` (створення каталогу), `fs.unlink()` (видалення файлу), `fs.readdir()` (читання вмісту каталогу)."
      },
      {
        "id": "backend_003_2",
        "question": "Чим відрізняються синхронні та асинхронні операції в `fs`?",
        "answer": "Синхронні операції блокують виконання коду до завершення операції, що може призвести до зависання застосунку. Асинхронні операції не блокують виконання і використовують колбеки або проміси для обробки результату."
      },
      {
        "id": "backend_003_3",
        "question": "Як обробляти помилки при роботі з файлами?",
        "answer": "При асинхронних операціях помилки передаються як перший аргумент у колбек-функцію. Для промісів використовуються блоки `try...catch` або метод `.catch()`."
      }
    ]
  },
  {
    "id": "backend_004",
    "topic": "Backend",
    "mainQuestion": "Що таке Ajax?",
    "mainAnswer": "**Ajax** (Asynchronous JavaScript and XML) – це набір веб-технологій, які дозволяють веб-сторінкам асинхронно обмінюватися даними з сервером, без необхідності перезавантаження всієї сторінки. Це покращує взаємодію з користувачем, роблячи веб-додатки більш динамічними та чуйними.",
    "additionalQuestions": [
      {
        "id": "backend_004_1",
        "question": "Які технології використовуються в Ajax?",
        "answer": "Ajax об'єднує JavaScript для керування логікою, XMLHttpRequest (або Fetch API) для асинхронних запитів, DOM для оновлення сторінки та XML/JSON для формату даних."
      },
      {
        "id": "backend_004_2",
        "question": "Які переваги Ajax?",
        "answer": "Основні переваги: покращений користувацький досвід (відсутність перезавантаження сторінки), зменшення навантаження на сервер (передаються лише необхідні дані), швидший час відгуку."
      },
      {
        "id": "backend_004_3",
        "question": "Чи завжди Ajax використовує XML?",
        "answer": "Ні. Хоча в назві є 'XML', на практиці набагато частіше використовується **JSON** як формат обміну даними через його легкість та простоту парсингу в JavaScript."
      }
    ]
  },
  {
    "id": "backend_005",
    "topic": "Backend",
    "mainQuestion": "Що таке HTTP та HTTPS?",
    "mainAnswer": "**HTTP** (HyperText Transfer Protocol) – це протокол прикладного рівня для передачі даних у Всесвітній павутині. **HTTPS** (HyperText Transfer Protocol Secure) – це безпечна версія HTTP, яка використовує SSL/TLS шифрування для захисту даних, що передаються між клієнтом і сервером.",
    "additionalQuestions": [
      {
        "id": "backend_005_1",
        "question": "Навіщо потрібен HTTPS?",
        "answer": "HTTPS забезпечує конфіденційність, цілісність даних та автентифікацію сервера, захищаючи користувачів від прослуховування, підробки та маніпуляцій даними."
      },
      {
        "id": "backend_005_2",
        "question": "Які порти за замовчуванням використовуються для HTTP та HTTPS?",
        "answer": "За замовчуванням HTTP використовує порт **80**, а HTTPS – порт **443**."
      },
      {
        "id": "backend_005_3",
        "question": "Як працює шифрування в HTTPS?",
        "answer": "HTTPS використовує протокол SSL/TLS для встановлення зашифрованого з'єднання. Клієнт і сервер обмінюються сертифікатами та ключами шифрування, щоб забезпечити безпечну передачу даних."
      }
    ]
  },
  {
    "id": "backend_006",
    "topic": "Backend",
    "mainQuestion": "Що таке request method? Назвіть деякі поширені методи.",
    "mainAnswer": "**Request method** (або HTTP-метод) – це індикатор HTTP-запиту, який вказує бажану дію для ресурсу, визначеного URI. Він визначає тип операції, яку клієнт хоче виконати над ресурсом на сервері.",
    "additionalQuestions": [
      {
        "id": "backend_006_1",
        "question": "Назвіть найпоширеніші HTTP-методи та їх призначення.",
        "answer": "**GET** (отримати ресурс), **POST** (створити ресурс або надіслати дані), **PUT** (повністю оновити ресурс), **DELETE** (видалити ресурс), **PATCH** (частково оновити ресурс)."
      },
      {
        "id": "backend_006_2",
        "question": "Яка різниця між PUT та PATCH?",
        "answer": "**PUT** замінює весь ресурс новим вмістом, тоді як **PATCH** застосовує часткові зміни до існуючого ресурсу."
      },
      {
        "id": "backend_006_3",
        "question": "Чи є GET безпечним та ідемпотентним?",
        "answer": "Так, метод **GET** вважається **безпечним** (не змінює стан сервера) та **ідемпотентним** (багаторазове виконання того ж запиту дає той самий результат)."
      }
    ]
  },
  {
    "id": "backend_007",
    "topic": "Backend",
    "mainQuestion": "Що таке домен та порт?",
    "mainAnswer": "**Домен** (доменне ім'я) – це легко запам'ятовувана адреса в інтернеті, яка замінює складні IP-адреси (наприклад, `google.com`). **Порт** – це номер, який ідентифікує конкретний процес або застосунок на комп'ютері, через який відбувається мережеве з'єднання.",
    "additionalQuestions": [
      {
        "id": "backend_007_1",
        "question": "Яка роль DNS-серверів у роботі з доменами?",
        "answer": "DNS-сервери (Domain Name System) перетворюють доменні імена в IP-адреси, які використовуються комп'ютерами для обміну даними."
      },
      {
        "id": "backend_007_2",
        "question": "Чому використовуються порти?",
        "answer": "Порти дозволяють кільком застосункам на одному сервері спілкуватися через мережу одночасно, маршрутизуючи вхідні дані до правильного застосунку."
      },
      {
        "id": "backend_007_3",
        "question": "Чи можна змінити порт за замовчуванням для веб-сервера?",
        "answer": "Так, веб-сервери можуть бути налаштовані на прослуховування на нестандартних портах (наприклад, 8080 замість 80)."
      }
    ]
  },
  {
    "id": "backend_008",
    "topic": "Backend",
    "mainQuestion": "Що таке CORS?",
    "mainAnswer": "**CORS** (Cross-Origin Resource Sharing) – це механізм безпеки браузера, який дозволяє веб-сторінці робити запити до ресурсів іншого домену (відмінного від домену, з якого завантажено саму сторінку). Без CORS, браузери за замовчуванням блокують такі 'cross-origin' запити з міркувань безпеки.",
    "additionalQuestions": [
      {
        "id": "backend_008_1",
        "question": "Навіщо потрібен CORS?",
        "answer": "CORS забезпечує гнучкість при створенні веб-додатків, дозволяючи фронтенду взаємодіяти з API, розташованими на різних доменах, при цьому дотримуючись політики безпеки браузера."
      },
      {
        "id": "backend_008_2",
        "question": "Які HTTP-заголовки пов'язані з CORS?",
        "answer": "Основні заголовки: `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers`, `Access-Control-Expose-Headers`."
      },
      {
        "id": "backend_008_3",
        "question": "Що таке 'preflight request' в CORS?",
        "answer": "Це запит `OPTIONS`, який браузер автоматично відправляє перед 'складним' CORS-запитом (наприклад, з нестандартними заголовками або методами), щоб перевірити, чи дозволяє сервер такий запит."
      }
    ]
  },
  {
    "id": "backend_009",
    "topic": "Backend",
    "mainQuestion": "Що таке заголовки? Назвіть кілька поширених.",
    "mainAnswer": "**Заголовки** (HTTP Headers) – це пари 'ім'я-значення', які передаються в HTTP-запитах та відповідях. Вони містять метадані про повідомлення, такі як тип контенту, довжина, кешування, авторизація тощо, допомагаючи клієнту та серверу правильно інтерпретувати та обробляти дані.",
    "additionalQuestions": [
      {
        "id": "backend_009_1",
        "question": "Які є основні типи заголовків?",
        "answer": "Заголовки можуть бути загальними (для запиту та відповіді), запиту (для клієнта), відповіді (для сервера) та об'єктними (для опису тіла повідомлення)."
      },
      {
        "id": "backend_009_2",
        "question": "Назвіть кілька поширених заголовків запиту.",
        "answer": "`User-Agent` (ідентифікує клієнта), `Accept` (типи медіа, які приймає клієнт), `Authorization` (дані для автентифікації), `Content-Type` (тип вмісту тіла запиту)."
      },
      {
        "id": "backend_009_3",
        "question": "Назвіть кілька поширених заголовків відповіді.",
        "answer": "`Content-Type` (тип вмісту тіла відповіді), `Cache-Control` (інструкції кешування), `Set-Cookie` (встановлення кукі), `Location` (для перенаправлення)."
      }
    ]
  },
  {
    "id": "backend_010",
    "topic": "Backend",
    "mainQuestion": "Що таке кукі? Як вони працюють?",
    "mainAnswer": "**Кукі** (HTTP Cookies) – це невеликі фрагменти даних, які веб-сервер надсилає у веб-браузер користувача. Браузер зберігає їх і відправляє назад на той же сервер з кожним наступним запитом. Кукі використовуються для підтримки стану між запитами, оскільки HTTP є безстатевим протоколом.",
    "additionalQuestions": [
      {
        "id": "backend_010_1",
        "question": "Для чого використовуються кукі?",
        "answer": "Кукі використовуються для відстеження стану сесії (наприклад, входу користувача), персоналізації вмісту, відстеження користувачів та аналітики."
      },
      {
        "id": "backend_010_2",
        "question": "Які атрибути можуть мати кукі?",
        "answer": "Кукі можуть мати атрибути `Expires` або `Max-Age` (термін дії), `Domain`, `Path`, `Secure` (передавати лише через HTTPS), `HttpOnly` (недоступні для JavaScript)."
      },
      {
        "id": "backend_010_3",
        "question": "Які є ризики безпеки, пов'язані з кукі?",
        "answer": "Ризики включають XSS-атаки (викрадення кукі), CSRF-атаки (підробка міжсайтових запитів) та відстеження користувачів без їхньої згоди."
      }
    ]
  },
  {
    "id": "backend_011",
    "topic": "Backend",
    "mainQuestion": "Опишіть механізм аутентифікації для взаємодії клієнт/сервер.",
    "mainAnswer": "Механізм **автентифікації** – це процес перевірки ідентичності користувача або системи. Для взаємодії клієнт/сервер він зазвичай включає надсилання облікових даних (наприклад, логіну та пароля) з клієнта на сервер, сервер їх перевіряє і, у разі успіху, видає токен (наприклад, JWT), який клієнт використовуватиме для подальших автентифікованих запитів.",
    "additionalQuestions": [
      {
        "id": "backend_011_1",
        "question": "Які поширені методи автентифікації?",
        "answer": "Поширені методи: автентифікація на основі сесій (з кукі), токени JWT, OAuth 2.0, API-ключі, Basic Auth."
      },
      {
        "id": "backend_011_2",
        "question": "Що таке JWT?",
        "answer": "**JWT** (JSON Web Token) – це компактний, URL-безпечний засіб представлення тверджень між двома сторонами. Він містить три частини: заголовок, корисне навантаження та підпис, і може бути використаний для автентифікації та авторизації."
      },
      {
        "id": "backend_011_3",
        "question": "Яка різниця між автентифікацією та авторизацією?",
        "answer": "**Автентифікація** – це підтвердження 'хто ти є', а **авторизація** – це визначення 'що тобі дозволено робити' після того, як твоя ідентичність була підтверджена."
      }
    ]
  },
  {
    "id": "backend_012",
    "topic": "Backend",
    "mainQuestion": "Що таке response status code?",
    "mainAnswer": "**Response status code** (код стану відповіді HTTP) – це тризначне число, яке повертається сервером у відповідь на HTTP-запит клієнта. Він вказує на результат спроби запиту та надає інформацію про те, чи був запит успішним, чи сталася помилка, чи потрібна додаткова дія.",
    "additionalQuestions": [
      {
        "id": "backend_012_1",
        "question": "Які існують категорії статусних кодів?",
        "answer": "Статусні коди поділяються на 5 категорій: **1xx** (інформаційні), **2xx** (успішні), **3xx** (перенаправлення), **4xx** (помилки клієнта), **5xx** (помилки сервера)."
      },
      {
        "id": "backend_012_2",
        "question": "Назвіть кілька поширених статусних кодів.",
        "answer": "**200 OK** (успіх), **201 Created** (ресурс створено), **204 No Content** (успіх без тіла відповіді), **400 Bad Request** (некоректний запит), **401 Unauthorized** (немає автентифікації), **403 Forbidden** (немає доступу), **404 Not Found** (ресурс не знайдено), **500 Internal Server Error** (внутрішня помилка сервера)."
      },
      {
        "id": "backend_012_3",
        "question": "Чим корисні статусні коди?",
        "answer": "Вони дозволяють клієнту програмно реагувати на результат запиту, спрощують відлагодження та забезпечують стандартизований спосіб інформування про стан операції."
      }
    ]
  },
  {
    "id": "backend_013",
    "topic": "Backend",
    "mainQuestion": "Що таке Express.js? Як він працює?",
    "mainAnswer": "**Express.js** – це мінімалістичний та гнучкий фреймворк для веб-застосунків Node.js, який надає надійний набір функцій для розробки веб- та мобільних застосунків, а також API. Він спрощує створення маршрутів, обробку запитів, роботу з проміжним ПЗ (middleware) та керування шаблонами.",
    "additionalQuestions": [
      {
        "id": "backend_013_1",
        "question": "Які основні можливості Express.js?",
        "answer": "Основні можливості: маршрутизація (визначення URL-адрес), проміжне ПЗ (обробка запитів перед тим, як вони досягнуть маршруту), робота з шаблонізаторами, підтримка API."
      },
      {
        "id": "backend_013_2",
        "question": "Що таке 'middleware' в Express.js?",
        "answer": "Проміжне ПЗ – це функції, які мають доступ до об'єкта запиту (`req`), об'єкта відповіді (`res`) та наступної функції проміжного ПЗ в циклі запит-відповідь. Вони можуть виконувати різні завдання, наприклад, логування, автентифікацію, парсинг тіла запиту."
      },
      {
        "id": "backend_013_3",
        "question": "Як Express.js обробляє запити?",
        "answer": "Express.js використовує ланцюжок проміжного ПЗ. Кожен запит проходить через функції проміжного ПЗ, а потім досягає відповідного маршруту, який повертає відповідь клієнту."
      }
    ]
  },
  {
    "id": "backend_014",
    "topic": "Backend",
    "mainQuestion": "Що таке база даних? Які види баз даних ви знаєте?",
    "mainAnswer": "**База даних** – це організована колекція структурованої інформації або даних, що зазвичай зберігається в електронній формі в комп'ютерній системі. Вона призначена для ефективного зберігання, управління та доступу до великих обсягів даних. Розрізняють два основні види: реляційні та нереляційні (NoSQL).",
    "additionalQuestions": [
      {
        "id": "backend_014_1",
        "question": "Які особливості реляційних баз даних?",
        "answer": "Реляційні бази даних (SQL) зберігають дані в таблицях з чітко визначеними схемами та використовують зв'язки між таблицями. Вони добре підходять для структурованих даних та складних запитів."
      },
      {
        "id": "backend_014_2",
        "question": "Які особливості нереляційних (NoSQL) баз даних?",
        "answer": "NoSQL бази даних гнучкіші у зберіганні даних, не вимагають строгої схеми та краще масштабуються для великих обсягів неструктурованих або напівструктурованих даних. Приклади: документо-орієнтовані (MongoDB), 'ключ-значення' (Redis), колоночні (Cassandra), графові (Neo4j)."
      },
      {
        "id": "backend_014_3",
        "question": "Коли варто використовувати реляційну, а коли NoSQL базу даних?",
        "answer": "Реляційну – коли потрібна висока цілісність даних, складні запити та чітка структура (наприклад, фінансові системи). NoSQL – коли потрібна гнучкість схеми, висока масштабованість та робота з великими обсягами різнорідних даних (наприклад, соціальні мережі, IoT)."
      }
    ]
  },
  {
    "id": "backend_015",
    "topic": "Backend",
    "mainQuestion": "Що таке SQL? Які види запитів можна робити за допомогою SQL?",
    "mainAnswer": "**SQL** (Structured Query Language) – це стандартна мова програмування для управління та маніпулювання реляційними базами даних. Вона дозволяє взаємодіяти з даними, виконуючи такі операції, як створення, читання, оновлення та видалення записів.",
    "additionalQuestions": [
      {
        "id": "backend_015_1",
        "question": "Які основні категорії команд SQL?",
        "answer": "Основні категорії: **DQL** (Data Query Language - `SELECT`), **DML** (Data Manipulation Language - `INSERT`, `UPDATE`, `DELETE`), **DDL** (Data Definition Language - `CREATE`, `ALTER`, `DROP`), **DCL** (Data Control Language - `GRANT`, `REVOKE`), **TCL** (Transaction Control Language - `COMMIT`, `ROLLBACK`)."
      },
      {
        "id": "backend_015_2",
        "question": "Наведіть приклад запиту SQL для отримання даних.",
        "answer": "`SELECT * FROM users WHERE age > 30;` (вибрати всіх користувачів, старших за 30 років)."
      },
      {
        "id": "backend_015_3",
        "question": "Наведіть приклад запиту SQL для оновлення даних.",
        "answer": "`UPDATE products SET price = 25.00 WHERE id = 123;` (оновити ціну продукту з ID 123)."
      }
    ]
  },
  {
    "id": "backend_016",
    "topic": "Backend",
    "mainQuestion": "Що таке PostgreSQL? Як підключитися до нього з Node.js застосунку?",
    "mainAnswer": "**PostgreSQL** – це потужна, відкрита об'єктно-реляційна система управління базами даних (СУБД), відома своєю надійністю, стійкістю функцій та продуктивністю. Для підключення до PostgreSQL з Node.js застосунку зазвичай використовується офіційний клієнт `pg` або ORM/query builder, такий як `Knex.js` або `Sequelize`.",
    "additionalQuestions": [
      {
        "id": "backend_016_1",
        "question": "Чим PostgreSQL відрізняється від інших СУБД?",
        "answer": "PostgreSQL відомий своєю відповідністю стандартам SQL, підтримкою розширених типів даних, високою розширюваністю та можливістю працювати як об'єктно-реляційна СУБД."
      },
      {
        "id": "backend_016_2",
        "question": "Наведіть приклад підключення до PostgreSQL за допомогою `pg`.",
        "answer": "```javascript\nconst { Client } = require('pg');\nconst client = new Client({\n  user: 'your_user',\n  host: 'localhost',\n  database: 'your_database',\n  password: 'your_password',\n  port: 5432,\n});\nclient.connect();\nclient.query('SELECT NOW()', (err, res) => {\n  if (err) throw err;\n  console.log(res.rows[0].now);\n  client.end();\n});\n```"
      },
      {
        "id": "backend_016_3",
        "question": "Що таке ORM і чи варто його використовувати з PostgreSQL?",
        "answer": "**ORM** (Object-Relational Mapper) – це інструмент, який дозволяє взаємодіяти з базою даних за допомогою об'єктно-орієнтованих мов програмування замість написання сирого SQL. Його варто використовувати для спрощення розробки та підвищення продуктивності, але іноді це може призвести до менш оптимізованих запитів."
      }
    ]
  },
  {
    "id": "backend_017",
    "topic": "Backend",
    "mainQuestion": "Що таке SQL injection?",
    "mainAnswer": "**SQL injection** (SQL-ін'єкція) – це тип атаки на веб-додатки, при якому зловмисник вставляє (ін'єктує) шкідливий SQL-код у поля введення веб-форми або в URL-параметри. Це дозволяє маніпулювати запитами до бази даних, щоб отримати доступ до конфіденційних даних, змінити або видалити їх, або навіть захопити контроль над сервером.",
    "additionalQuestions": [
      {
        "id": "backend_017_1",
        "question": "Як виглядає SQL-ін'єкція на прикладі?",
        "answer": "Припустимо, у вас є запит `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`. Якщо користувач введе `' OR '1'='1` як `username`, запит стане `SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '...'`, що дозволить йому увійти без пароля."
      },
      {
        "id": "backend_017_2",
        "question": "Як захиститися від SQL-ін'єкцій?",
        "answer": "Основними способами захисту є використання **параметризованих запитів (prepared statements)** або **ORM/query builders**, які автоматично екранують вхідні дані, а також **валідація вхідних даних**."
      },
      {
        "id": "backend_017_3",
        "question": "Чому параметризовані запити ефективні проти SQL-ін'єкцій?",
        "answer": "Параметризовані запити відокремлюють SQL-код від вхідних даних. База даних інтерпретує всі вхідні дані як значення, а не як частину SQL-коду, запобігаючи виконанню шкідливих команд."
      }
    ]
  }
]